[H-01] Making a payment to the protocol with_dontMintparameter will result in lost fund for user.
Submitted byyixxas, also found byminhquanymandcccz
User will have their funds lost if they tries to pay the protocol with_dontMint = False. A payment made with this parameter set should increase thecreditsOf[]balance of user.
In_processPayment(),creditsOf[_data.beneficiary]is updated at the end if there are leftover funds. However, Ifmetadatais provided and_dontMint == true, it immediately returns.JBTiered721Delegate.sol#L524-L590
function_processPayment(JBDidPayDatacalldata_data)internaloverride{// Keep a reference to the amount of credits the beneficiary already has.uint256_credits=creditsOf[_data.beneficiary];...if(_data.metadata.length>36&&bytes4(_data.metadata[32:36]) ==type(IJB721Delegate).interfaceId) {...// Don't mint if not desired.if(_dontMint)return;...}...// If there are funds leftover, mint the best available with it.if(_leftoverAmount!=0) {_leftoverAmount=_mintBestAvailableTier(_leftoverAmount,_data.beneficiary,_expectMintFromExtraFunds);if(_leftoverAmount!=0) {// Make sure there are no leftover funds after minting if not expected.if(_dontOverspend)revertOVERSPENDING();// Increment the leftover amount.creditsOf[_data.beneficiary] =_leftoverAmount;}elseif(_credits!=0)creditsOf[_data.beneficiary] =0;}elseif(_credits!=0)creditsOf[_data.beneficiary] =0;}
Proof of Concept
I’ve wrote a coded POC to illustrate this. It uses the same Foundry environment used by the project. Simply copy this function toE2E.t.solto verify.
functiontestPaymentNotAddedToCreditsOf()public{address_user=address(bytes20(keccak256('user')));(JBDeployTiered721DelegateDatamemoryNFTRewardDeployerData,JBLaunchProjectDatamemorylaunchProjectData) =createData();uint256projectId=deployer.launchProjectFor(_projectOwner,NFTRewardDeployerData,launchProjectData);// Get the dataSourceIJBTiered721Delegate_delegate=IJBTiered721Delegate(_jbFundingCycleStore.currentOf(projectId).dataSource());addressNFTRewardDataSource=_jbFundingCycleStore.currentOf(projectId).dataSource();uint256_creditBefore=IJBTiered721Delegate(NFTRewardDataSource).creditsOf(_user);// Project is initiated with 10 different tiers with contributionFee of 10,20,30,40, .... , 100// Make payment to mint 1 NFTuint256_payAmount=10;_jbETHPaymentTerminal.pay{value:_payAmount}(projectId,100,address(0),_user,0,false,'Take my money!',newbytes(0));// Minted 1 NFTassertEq(IERC721(NFTRewardDataSource).balanceOf(_user),1);// Now, we make the payment but supply _dontMint metadatabool_dontMint=true;uint16[]memoryempty;_jbETHPaymentTerminal.pay{value:_payAmount}(projectId,100,address(0),_user,0,false,'Take my money!',//new bytes(0)abi.encode(bytes32(0),type(IJB721Delegate).interfaceId,_dontMint,false,false,empty));// NFT not mintedassertEq(IERC721(NFTRewardDataSource).balanceOf(_user),1);// Check that credits of user is still the same as before even though we have made the paymentassertEq(IJBTiered721Delegate(NFTRewardDataSource).creditsOf(_user),_creditBefore);}
Tools Used
Foundry
Recommended Mitigation Steps
Update thecreditsOf[]in theif(_dontMint)check.
- if(_dontMint) return;+ if(_dontMint){ creditsOf[_data.beneficiary] += _value; }
mejango (Juicebox DAO) commented on duplicate issue #157:
mixed feels._dontMintbasically says “Save me gas at all costs.”. I see the argument for value leaking being bad though. will mull over.
drgorillamd (Juicebox DAO) commented on duplicate issue #157:
paying small amounts (under the floor or withdontMint) only to save them to later mint is a bit of a nonsense -> it’s way cheaper to just not pay, save in an eoa then mint within the same tx.I have the feeling the severity is based on seeing_creditas a saving account, while it’s rather something to collect leftovers.Anyway, we changed it, but not sure of high sev on this one, happy to see others’ point of view.
Picodes (judge) commented:
@drgorillamd @mejango I have to say that I don’t see why someone would use thedontMintflag in the first place. Wasn’t the original intent to use this flag specifically to modify_creditwithout minting?
In the meantime I’ll keep the High label for this one, thedontMintfunctionality being flawed and leading to a loss of funds.
drgorillamd (Juicebox DAO) commented:
@PicodesnftRewardis just an extension plugged into a Jb project ->dontMintis to avoid forcing users of the project who don’t want a nft reward when contributing, i.e. “classic” use of a Jb project.
The use case we had in mind was smaller payers, wanting to get the erc20 (or even just donating), without the gas burden of a nft reward (which might, on L1, sometimes be more than the contribution itself).
Does that make sense?
Picodes (judge) commented:
Definitely, thanks for the clarification @drgorillamd.
Picodes (judge) commented:
The final decision for this issue was to keep the high severity because of the leak of value and the possibility that some users use the function thinking it will change_credit, despite the fact that it was not the original intent of the code.
mejango (Juicebox DAO) commented:
We ended up adding credits even when_dontMintis true!!It was a last minute design decision, initially we marked the issue as “Disagree with severity” and we were planning on keeping the code unchanged since it didnt pose a risk and was working as designed.We ended up changing the design, but the wardens’ feedback was ultimately helpful!

[H-02] Minting and redeeming will break for fully minted tiers withreserveRate != 0andreserveRate/MaxReserveRatetokens burned
Submitted by0x52
Minting and redeeming become impossible.
Proof of Concept
uint256 _numberOfNonReservesMinted = _storedTier.initialQuantity -_storedTier.remainingQuantity -_reserveTokensMinted;uint256 _numerator = uint256(_numberOfNonReservesMinted * _storedTier.reservedRate);uint256 _numberReservedTokensMintable = _numerator / JBConstants.MAX_RESERVED_RATE;if (_numerator - JBConstants.MAX_RESERVED_RATE * _numberReservedTokensMintable > 0)++_numberReservedTokensMintable;return _numberReservedTokensMintable - _reserveTokensMinted;
The lines above are taken from JBTiered721DelegateStore#_numberOfReservedTokensOutstandingFor and used to calculate and return the available number of reserve tokens that can be minted. Since the return statement doesn’t check that _numberReservedTokensMintable >= _reserveTokensMinted, it will revert under those circumstances. The issue is that there are legitimate circumstances in which this becomes false. If a tier is fully minted then all reserve tokens are mintable. When the tier begins to redeem, _numberReservedTokensMintable will fall under _reserveTokensMinted, permanently breaking minting and redeeming. Minting is broken because all mint functions directly call _numberOfReservedTokensOutstandingFor. Redeeming is broken because the redeem callback (JB721Delegate#redeemParams) calls _totalRedemtionWeight which calls _numberOfReservedTokensOutstandingFor.
Example:
A tier has a reserveRate of 100 (1/100 tokens reserved) and an initialQuantity of 10000. We assume that the tier has been fully minted, that is, _reserveTokensMinted is 100 and remainingQuantity = 0. Now we begin burning the tokens. Let’s run through the lines above after 100 tokens have been burned (remainingQuantity = 100):
_numberOfNonReservedMinted = 10000 - 100 - 100 = 9800
_numerator = 9800 * 100 = 980000
_numberReservedTokensMintable = 980000 / 10000 = 98
Since _numberReservedTokensMintable < _reserveTokensMinted the line will underflow and revert.
JBTiered721DelegateStore#_numberOfReservedTokensOutstandingFor will now revert every time it is called. This affects all minting functions as well as totalRedemptionWeight. Since those functions now revert when called, it is impossible to mint or redeem anymore NFTs.
Recommended Mitigation Steps
Add a check before returning:
+   if (_reserveTokensMinted > _numberReservedTokensMintable) {+       return 0;+   }return _numberReservedTokensMintable - _reserveTokensMinted;
mejango (Juicebox DAO) confirmed
Trust (warden) commented:
The root cause seems to be that there is no tracking of reserve tokens burnt.
mejango (Juicebox DAO) commented:
@Trust fair. this would require extra storage to track which tokenIDs were minted as reserves. could be a nice-to-have, and also used to prevent this issue.
Picodes (judge) commented:
Without tracking the number of burnt tokens, the mitigation suggested by the warden avoids the underflow so solves the main issue, which is that minting and redeeming breakAccounting fornumberOfBurnedReservesFormay help fixing the math but the underflow would still be possible if only non reserve tokens are burned

[H-03] Outstanding reserved tokens are incorrectly counted in total redemption weight
Submitted byJeiwan, also found byTrust,ladboy233, andcccz
The amounts redeemed in overflow redemption can be calculated incorrectly due to incorrect accounting of the outstanding number of reserved tokens.
Proof of Concept
Project contributors are allowed to redeem their NFT tokens for a portion of the overflow (excessive funded amounts). The amount a contributor receives is calculated asoverflow * (user’s redemption rate / total redemption weight), where user’s redemption weight isthe total contribution floor of all their NFTsand total redemption weight isthe total contribution floor of all minted NFTs. Since the total redemption weight is the sum of individual contributor redemption weights, the amount they can redeem is proportional to their contribution.
However, the total redemption weight calculation incorrectly accounts outstanding reserved tokens (JBTiered721DelegateStore.sol#L563-L566):
// Add the tier's contribution floor multiplied by the quantity minted.weight+=(_storedTier.contributionFloor*(_storedTier.initialQuantity-_storedTier.remainingQuantity)) +_numberOfReservedTokensOutstandingFor(_nft,_i,_storedTier);
Specifically, thenumberof reserved tokens is added to theweightof minted tokens. This disrupts the redemption amount calculation formula since the total redemption weight is in fact not the sum of individual contributor redemption weights.
Recommended Mitigation Steps
Two options can be seen:
if the outstanding number of reserved tokens is considered minted (which seems to be so, judging bythis logic) then it needs to be added to the quantity, i.e.:--- a/contracts/JBTiered721DelegateStore.sol+++ b/contracts/JBTiered721DelegateStore.sol@@ -562,8 +562,7 @@ contract JBTiered721DelegateStore is IJBTiered721DelegateStore {// Add the tier's contribution floor multiplied by the quantity minted.weight +=(_storedTier.contributionFloor *-          (_storedTier.initialQuantity - _storedTier.remainingQuantity)) +-        _numberOfReservedTokensOutstandingFor(_nft, _i, _storedTier);+          (_storedTier.initialQuantity - _storedTier.remainingQuantity ++           _numberOfReservedTokensOutstandingFor(_nft, _i, _storedTier)));unchecked {++_i;if it’s not considered minted, then it shouldn’t be counted at all.
drgorillamd (Juicebox DAO) confirmed
Picodes (judge) upgraded severity:
As the redeemed amounts are at stake, upgrading to High

[H-04] Reserved token rounding can be abused to honeypot and steal user’s funds
Submitted byTrust
When the project wishes to mint reserved tokens, they call mintReservesFor which allows minting up to the amount calculated by DelegateStore’s _numberOfReservedTokensOutstandingFor. The function has this line:
// No token minted yet? Round up to 1.if (_storedTier.initialQuantity == _storedTier.remainingQuantity) return 1;
In order to ease calculations, if reserve rate is not 0 and no token has been minted yet, the function allows a single reserve token to be printed. It turns out that this introduces a very significant risk for users. Projects can launch with several tierIDs of similar contribution size, and reserve rate as low as 1%. Once a victim contributes to the project, it can instantly mint a single reserve token of all the rest of the tiers. They can then redeem the reserve token and receive most of the user’s contribution, without putting in any money of their own.
Since this attack does not require setting “dangerous” flags like lockReservedTokenChanges or lockManualMintingChanges, it represents a very considerable threat to unsuspecting users. Note that the attack circumvents user voting or any funding cycle changes which leave time for victim to withdraw their funds.
Impact
Honeypot project can instantly take most of first user’s contribution.
Proof of Concept
New project launches, with 10 tiers, of contributions 1000, 1050, 1100, …
Reserve rate is set to 1% and redemption rate = 100%
User contributes 1100 and gets a Tier 3 NFT reward.
Project immediately mints Tier 1,  Tier 2, Tier 4,… Tier 10 reserve tokens, and redeems all the reserve tokens.
Project’s total weight = 12250
Reserve token weight = 11150
Malicious project cashes 1100 (overflow) * 11150 / 12250 = ~1001 tokens.
Recommended Mitigation Steps
Don’t round up outstanding reserve tokens as it represents too much of a threat.
mejango (Juicebox DAO) acknowledged
Picodes (judge) commented:
The finding is valid and clearly demonstrates how project owners could bypass the flags and safeguards implemented to trick users into thinking that they’ll be safe.However, it falls within the “centralization risk” category, and within reports showing “a unique attack path which users were not told upfront about” (seethis issue). So I believe Medium severity to be appropriate.
Trust (warden) commented:
I would just like to state that the way I look at it, this is not a centralization risk, as the counterparty which can perform the exploit is some listed project on Juicebox, rather than Juicebox itself. It is very similar to a high severityfindingin Enso Finance, where a strategy creator can rug funds sent to their strategy.
Picodes (judge) commented:
Kept it high risk out of coherence withhttps://github.com/code-423n4/2022-05-enso-findings/issues/204, and because this attack would bypass all the safeguards implemented by Juicebox

[H-05] Redemption weight of tiered NFTs miscalculates, making users redeem incorrect amounts - Bug #1
Submitted byTrust, also found byAymen0909and0x52
Redemption weight is a concept used in Juicebox to determine investor’s eligible percentage of the non-locked funds. In redeemParams, JB721Delegate calculates user’s share using:
uint256 _redemptionWeight = _redemptionWeightOf(_decodedTokenIds);uint256 _total = _totalRedemptionWeight();uint256 _base = PRBMath.mulDiv(_data.overflow, _redemptionWeight, _total);
_totalRedemptionWeight eventually is implemented in DelegateStore:
for (uint256 _i; _i < _maxTierId; ) {// Keep a reference to the stored tier._storedTier = _storedTierOf[_nft][_i + 1];// Add the tier's contribution floor multiplied by the quantity minted.weight +=(_storedTier.contributionFloor *(_storedTier.initialQuantity - _storedTier.remainingQuantity)) +_numberOfReservedTokensOutstandingFor(_nft, _i, _storedTier);unchecked {++_i;}}
If we pay attention to _numberOfReservedTokensOutstandingFor() call, we can see it is called with tierId = i, yet storedTier of i+1. It is definitely not the intention as for example, recordMintReservesFor() uses the function correctly:
function recordMintReservesFor(uint256 _tierId, uint256 _count)externaloverridereturns (uint256[] memory tokenIds){// Get a reference to the tier.JBStored721Tier storage _storedTier = _storedTierOf[msg.sender][_tierId];// Get a reference to the number of reserved tokens mintable for the tier.uint256 _numberOfReservedTokensOutstanding = _numberOfReservedTokensOutstandingFor(msg.sender,_tierId,_storedTier);...
The impact of this bug is incorrect calculation of the weight of user’s contributions. TheinitialQuantityandremainingQuantityvalues are taken from the correct tier, but_reserveTokensMintedminted is taken from previous tier. In the case where_reserveTokensMintedis smaller than correct value, for example tierID=0 which is empty, the outstanding value returned is larger, meaning weight is larger and redemptions are worth less. In the opposite case, where lower tierID has higher_reserveTokensMinted, the redemptions will receivemorepayout than they should.
Impact
Users of projects can receive less or more funds than they are eligible for when redeeming NFT rewards.
Proof of Concept
1. Suppose we have a project with 2 tiers, reserve ratio = 50%, redemption ratio = 100%:
TierContributionInitial quantityRemaining quantityReserves mintedReserves outstandingTier 15010312Tier 210030282
When calculating totalRedemptionWeight(), the correct result is
50 * (10 - 3) + 2 + 100 * (30-2) + 2 = 3154
The wrong result will be:
50 * (10 -3) +4+ 100 * (30-2) +13= 3167
Therefore, when users redeem NFT rewards, they will get less value than they are eligible for. Note that totalRedemptionWeight() has anadditionalbug where the reserve amount is not multiplied by the contribution, which is discussed in another submission. If it would be calculated correctly, the correct weight would be 3450.
Recommended Mitigation Steps
Change the calculation to:
_numberOfReservedTokensOutstandingFor(_nft, _i+1, _storedTier);
Additional discussion
Likelihood of impact is very high, because the conditions will arise naturally (different tiers, different reserve minted count for each tier, user calls redeem).
Severity of impact is high because users receive less or more tokens than they are eligible for.
Initially I thought this bug could allow attacker to steal entire unlocked project funds, using a mint/burn loop. However, this would not be profitable because their calculated share of the funds would always be at most what they put in, because reserve tokens are printed out of thin air.
mejango (Juicebox DAO) confirmed

