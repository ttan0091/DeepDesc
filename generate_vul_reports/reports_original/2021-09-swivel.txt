[H-01] Unsafe handling of underlying tokens
Submitted by 0xsanson, also found by 0xRajeev, cmichel, defsec, GalloDaSballo, JMukesh, leastwood, loop, nikitastupin, pants, and pauliax.
Impact
Not every ERC20 token follows OpenZeppelin’s recommendation. It’s possible (inside ERC20 standard) that atransferFromdoesn’t revert upon failure but returnsfalse.
The code doesn’t check these return values. For exampleuToken.transferFrom(msg.sender, o.maker, a);ininitiateVaultFillingZcTokenInitiatecan be exploited by the msg.sender to initiate a trade without sending any underlying.
Proof of Concept
grep 'transfer' Swivel.sol
Tools Used
editor
Recommended Mitigation Steps
Consider usingOpenZeppelin’s librarywithsafeversions of transfer functions.
[H-02] Swivel: Taker is charged fees twice in exitVaultFillingVaultInitiate
Submitted by itsmeSTYJ, also found by gpersoon.
Impact
Taker is charged fees twice inexitVaultFillingVaultInitiate(). Maker is transferring less than premiumFilled to taker and then taker is expected to pay fees i.e. taker’s net balance is premiumFilled - 2*fee
Recommended Mitigation Steps
functionexitVaultFillingVaultInitiate(Hash.Ordercalldatao,uint256a, Sig.Componentscalldatac)internal{bytes32hash=validOrderHash(o,c);require(a<= (o.principal-filled[hash]),'taker amount > available volume');filled[hash] +=a;uint256premiumFilled= (((a*1e18) /o.principal) *o.premium) /1e18;uint256fee= ((premiumFilled*1e18) /fenominator[3]) /1e18;Erc20uToken=Erc20(o.underlying);// transfer premium from maker to senderuToken.transferFrom(o.maker,msg.sender,premiumFilled);// transfer fee in underlying to swivel from senderuToken.transferFrom(msg.sender,address(this),fee);// transfer <a> vault.notional (nTokens) from sender to makerrequire(MarketPlace(marketPlace).p2pVaultExchange(o.underlying,o.maturity,msg.sender,o.maker,a),'vault exchange failed');emitExit(o.key,hash,o.maker,o.vault,o.exit,msg.sender,a,premiumFilled);}
JTraversa (Swivel) confirmed
0xean (judge) commented:
Based on3 — High: Assets can be stolen/lost/compromised directly (or indirectly if there is a valid attack path that does not have hand-wavy hypotheticals).This is being upgraded to a high risk. The duplicate of it was at that level by the submitting warden and considering that fees are being incorrectly taken from the taker and not the maker, the maker ends up with a higher balance than expected and the taker has no way to recoup these fees (assets are now lost).
JTraversa (Swivel) commented:
Is that how it is interpreted? I’d assume that high risk would imply a valid attack path that a user could use to drain deposited funds based on that description.I won’t fight this one obviously, just think there’s acleardifferentiation between this and the other high risk issue.
[H-03]transferNotionalFromdoesn’t checkfrom != to
Submitted by gpersoon, also found by cmichel.
Impact
The functiontransferNotionalFromofVaultTracker.soluses temporary variables to store the balances.
If the “from” and “to” address are the same then the balance of “from” is overwritten by the balance of “to”.
This means the balance of “from” and “to” are increased and no balances are decreased, effectively printing money.
Note:transferNotionalFromcan be called viatransferVaultNotionalby everyone.
Proof of Concept
https://github.com/Swivel-Finance/gost/blob/v2/test/vaulttracker/VaultTracker.sol#L144-L196
functiontransferNotionalFrom(addressf,addresst,uint256a)externalonlyAdmin(admin)returns(bool) {Vaultmemoryfrom=vaults\[f];Vaultmemoryto=vaults\[t];...vaults\[f] =from;...vaults\[t] =to;// if f==t then this will overwrite vaults\[f]
https://github.com/Swivel-Finance/gost/blob/v2/test/marketplace/MarketPlace.sol#L234-L238
functiontransferVaultNotional(addressu,uint256m,addresst,uint256a)publicreturns(bool) {require(VaultTracker(markets\[u]\[m].vaultAddr).transferNotionalFrom(msg.sender,t,a),'vault transfer failed');
Tools Used
Recommended Mitigation Steps
Add something like the following:require (f != t,"Same");
JTraversa (Swivel) confirmed
[H-04] return value of 0 from ecrecover not checked
Submitted by gpersoon, also found by 0xRajeev, cmichel, and nikitastupin.
Impact
The solidity functionecrecoveris used, however the error result of 0 is not checked for.
See documentation:https://docs.soliditylang.org/en/v0.8.9/units-and-global-variables.html?highlight=ecrecover#mathematical-and-cryptographic-functions“recover the address associated with the public key from elliptic curve signature or return zero on error. ”
Now you can supply invalid input parameters to theSig.recoverfunction, which will then result 0.
If you also seto.makerto be 0 then this will match and an invalid signature is not detected.
So you can do all kinds of illegal & unexpected transactions.
Proof of Concept
https://github.com/Swivel-Finance/gost/blob/v2/test/swivel/Swivel.sol#L476-L484
functionvalidOrderHash(Hash.Ordercalldatao, Sig.Componentscalldatac)internalviewreturns(bytes32) {...require(o.maker==Sig.recover(Hash.message(domain,hash),c),'invalid signature');returnhash;}
https://github.com/Swivel-Finance/gost/blob/v2/test/swivel/Sig.sol#L16-L23
functionrecover(bytes32h,Componentscalldatac)internalpurereturns(address) {...returnecrecover(h,c.v,c.r,c.s);
Tools Used
Recommended Mitigation Steps
Verify that the result fromecrecoverisn’t 0
JTraversa (Swivel) acknowledgedJTraversa (Swivel) commented:
Id say this is noteable, but because all actions require approvals from o.maker, having 0x00 as o.maker with an “invalid” but valid signature should not be impactful.
The suggestion would be to filter 0x00 makers from the orderbook? (which we do)
