[H-01] buyAndSwap1155WETH() function may cause loss of user assets
Submitted by cccz
In the NFTXMarketplaceZap.sol contract, the buyAndSwap1155WETH function uses the WETH provided by the user to exchange VaultToken, but when executing the _buyVaultToken method, msg.value is used instead of maxWethIn. Since msg.value is 0, the call will fail.
functionbuyAndSwap1155WETH(uint256vaultId,uint256[]memoryidsIn,uint256[]memoryamounts,uint256[]memoryspecificIds,uint256maxWethIn,address[]calldatapath,addressto)publicpayablenonReentrant{require(to!=address(0));require(idsIn.length!=0);IERC20Upgradeable(address(WETH)).transferFrom(msg.sender,address(this),maxWethIn);uint256count;for(uint256i=0;i<idsIn.length;i++) {uint256amount=amounts[i];require(amount>0,"Transferring <1");count+=amount;}INFTXVaultvault=INFTXVault(nftxFactory.vault(vaultId));uint256redeemFees= (vault.targetSwapFee() *specificIds.length) + (vault.randomSwapFee() * (count-specificIds.length));uint256[]memoryswapAmounts=_buyVaultToken(address(vault),redeemFees,msg.value,path);
In extreme cases, when the user provides both ETH and WETH (the user approves the contract WETH in advance and calls the buyAndSwap1155WETH function instead of the buyAndSwap1155 function by mistake), the _buyVaultToken function will execute successfully, but because the buyAndSwap1155WETH function will not convert ETH to WETH, The user’s ETH will be locked in the contract, causing loss of user assets.
function_buyVaultToken(addressvault,uint256minTokenOut,uint256maxWethIn,address[]calldatapath)internalreturns(uint256[]memory) {uint256[]memoryamounts=sushiRouter.swapTokensForExactTokens(minTokenOut,maxWethIn,path,address(this),block.timestamp);returnamounts;}
Recommended Mitigation Steps
-uint256[]memoryswapAmounts=_buyVaultToken(address(vault),redeemFees,msg.value,path);+uint256[]memoryswapAmounts=_buyVaultToken(address(vault),redeemFees,maxWethIn,path);
0xKiwi (NFTX) confirmed and resolved

[H-02] The return value of the _sendForReceiver function is not set, causing the receiver to receive more fees
Submitted by cccz, also found by WatchPug
In the NFTXSimpleFeeDistributor.sol contract, the distribute function is used to distribute the fee, and the distribute function judges whether the fee is sent successfully according to the return value of the _sendForReceiver function.
functiondistribute(uint256vaultId)externaloverridevirtualnonReentrant{require(nftxVaultFactory!=address(0));address_vault=INFTXVaultFactory(nftxVaultFactory).vault(vaultId);uint256tokenBalance=IERC20Upgradeable(_vault).balanceOf(address(this));if(distributionPaused||allocTotal==0) {IERC20Upgradeable(_vault).safeTransfer(treasury,tokenBalance);return;}uint256length=feeReceivers.length;uint256leftover;for(uint256i=0;i<length;i++) {FeeReceivermemory_feeReceiver=feeReceivers[i];uint256amountToSend=leftover+ ((tokenBalance*_feeReceiver.allocPoint) /allocTotal);uint256currentTokenBalance=IERC20Upgradeable(_vault).balanceOf(address(this));amountToSend=amountToSend>currentTokenBalance?currentTokenBalance:amountToSend;boolcomplete=_sendForReceiver(_feeReceiver,vaultId,_vault,amountToSend);if(!complete) {leftover=amountToSend;}else{leftover=0;}}
In the _sendForReceiver function, when _receiver is not a contract, no value is returned. By default, this will return false. This will make the distribute function think that the fee sending has failed, and will send more fees next time.
function_sendForReceiver(FeeReceivermemory_receiver,uint256_vaultId,address_vault,uint256amountToSend)internalvirtualreturns(bool) {if(_receiver.isContract) {IERC20Upgradeable(_vault).approve(_receiver.receiver,amountToSend);// If the receive is not properly processed, send it to the treasury instead.bytesmemorypayload=abi.encodeWithSelector(INFTXLPStaking.receiveRewards.selector,_vaultId,amountToSend);(boolsuccess,) =address(_receiver.receiver).call(payload);// If the allowance has not been spent, it means we can pass it forward to next.returnsuccess&&IERC20Upgradeable(_vault).allowance(address(this),_receiver.receiver) ==0;}else{IERC20Upgradeable(_vault).safeTransfer(_receiver.receiver,amountToSend);}}
Proof of Concept
https://github.com/code-423n4/2021-12-nftx/blob/main/nftx-protocol-v2/contracts/solidity/NFTXSimpleFeeDistributor.sol#L157-L168
https://github.com/code-423n4/2021-12-nftx/blob/main/nftx-protocol-v2/contracts/solidity/NFTXSimpleFeeDistributor.sol#L49-L67
Recommended Mitigation Steps
function_sendForReceiver(FeeReceivermemory_receiver,uint256_vaultId,address_vault,uint256amountToSend)internalvirtualreturns(bool) {if(_receiver.isContract) {IERC20Upgradeable(_vault).approve(_receiver.receiver,amountToSend);// If the receive is not properly processed, send it to the treasury instead.bytesmemorypayload=abi.encodeWithSelector(INFTXLPStaking.receiveRewards.selector,_vaultId,amountToSend);(boolsuccess, ) =address(_receiver.receiver).call(payload);// If the allowance has not been spent, it means we can pass it forward to next.returnsuccess&&IERC20Upgradeable(_vault).allowance(address(this),_receiver.receiver) ==0;}else{-IERC20Upgradeable(_vault).safeTransfer(_receiver.receiver,amountToSend);+returnIERC20Upgradeable(_vault).safeTransfer(_receiver.receiver,amountToSend);}}
0xKiwi (NFTX) confirmed, but disagreed with high severity and commented:
Good catch, thank you. Disagreeing with severity though since this is a permissioned contract, no user funds are at risk and this would most likely cause some failures.We aren’t using any EOAs as receivers in production or testing, so this has not been caught. Thank you.
0xKiwi (NFTX) resolved
LSDan (judge) commented:
I agree with the warden on this one. Funds are directly at risk and the likelihood of this occurring is 100%. I’m not sure if it matters if the funds are user funds or protocol funds. This would eventually have become a big problem that affected the protocol’s ability to function.

[H-03] A vault can be locked from MarketplaceZap and StakingZap
Submitted by p4st13r4, also found by cmichel, GreyArt, hyh, jayjonah8, leastwood, pauliax, shenwilly, and WatchPug
Any user that owns a vToken of a particular vault can lock the functionalities ofNFTXMarketplaceZap.solandNFTXStakingZap.solfor everyone.
Every operation performed by the marketplace, that deals with vToken minting, performs this check:
require(balance==IERC20Upgradeable(vault).balanceOf(address(this)),"Did not receive expected balance");
A malicious user could transfer any amount > 0 of a vault’vToken to the marketplace (or staking) zap contracts, thus making the vault functionality unavailable for every user on the marketplace
Proof of Concept
https://github.com/code-423n4/2021-12-nftx/blob/main/nftx-protocol-v2/contracts/solidity/NFTXMarketplaceZap.sol#L421
https://github.com/code-423n4/2021-12-nftx/blob/main/nftx-protocol-v2/contracts/solidity/NFTXMarketplaceZap.sol#L421
Recommended Mitigation Steps
Remove this logic from the marketplace and staking zap contracts, and add it to the vaults (if necessary)
0xKiwi (NFTX) confirmed, but disagreed with high severity and commented:
Valid concern, confirmed. And disagreeing with severity.
0xKiwi (NFTX) resolved
LSDan (judge) commented:
In this case I agree with the warden’s severity. The attack would cause user funds to be locked and is incredibly easy to perform.

