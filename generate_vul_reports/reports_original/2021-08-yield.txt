[H-01]CompositeMultiOraclereturns wrong decimals for prices?
Submitted by cmichel
TheCompositeMultiOracle.peek/getfunctions seem to return wrong prices.
It’s unclear what decimalssource.decimalsrefers to in this case. Does it refer tosource.sourcetoken decimals?
It chains the price arguments through_peekfunction calls and a single price is computed as:
(priceOut,updateTimeOut) =IOracle(source.source).peek(base,quote,10**source.decimals);// Get price for one unit// @audit shouldn't this divide by 10 ** IOracle(source.source).decimals() instead?priceOut=priceIn*priceOut/ (10**source.decimals);
Assume all oracles use 18 decimals (oracle.decimals()returns 18) andsource.decimalsrefers to thetoken decimalsofsource.source.
Then going fromUSDC -> DAI -> USDT(path = [DAI]) starts with a price of1e18inpeek:
_peek(USDC, DAI, 1e18): Gets the price of1e6 USDC(as USDC has 6 decimals) in DAI with 18 decimals precision (because all oracle precision is set to 18):priceOut = priceIn * 1e18 / 1e6 = 1e18 * 1e18 / 1e6 = 1e30_peek(DAI, USDT, 1e30): Gets the price of1e18 DAI(DAI has 18 decimals) with 18 decimals precision:priceOut = priceIn * 1e18 / 1e18 = priceIn = 1e30
It then uses1e30as the price to go fromUSDCtoUSDT:value = price * amount / 1e18 = 1e30 * (1.0 USDC) / 1e18 = 1e30 * 1e6 / 1e18 = 1e18 = 1e12 * 1e6 = 1_000_000_000_000.0 USDT. Inflating the actualUSDTamount.
The issue is thatpeekassumes that the final price is in 18 decimals in thevalue = price * amount / 1e18division by1e18.
But_peek(and_get) don’t enforce this.
Recommend that_peekshould scale the prices to1e18by doing:
(priceOut,updateTimeOut) =IOracle(source.source).get(base,quote,10**source.decimals);// priceOut will have same decimals as priceIn if we divide by oracle decimalspriceOut=priceIn*priceOut/ (10**IOracle(source.source).decimals());
It does not need to divide by thesource.sourcetoken precision(source.decimals), but by the oracle precision (IOracle(source.source).decimals()).
alcueca (Yield) acknowledged:
It’s confusing to deal with all these decimals, I should at least comment the code better, and try to make it easier to understand.It’s unclear what decimals source.decimals refers to in this case. Does it refer to source.source token decimals?CompositeMultiOracle takes IOracle contracts as sources, sosource.decimalsrefers to the token decimals of the oracle, not of the data source one level below.It does not need to divide by the source.source token precision (source.decimals), but by the oracle precision (IOracle(source.source).decimals()).The source.source token precision would beIChainlinkAggregatorV3(source.source()).decimals(), the source oracle precision issource.decimals(). CompositeMultiOracle cannot make an assumption on any fields present onsource.source, and must  work only with the underlyingsourceIOracles.I’m still not disputing this finding. I need to dig further to make sure the decimals are right when different IOracle sources have different decimals, and I’ve hardcoded a few1e18in there. Those are code smells.
alcueca (Yield) patched:
Sent me into a wild goose chase to support IOracle of multiple decimals as sources to CompositeMultiOracle, only to realize that we create all IOracles and we always create them with 18 decimals, converting from the underlying data source if needed.Ended up making CompositeMultiOracle require that underlying oracles have 18 decimals.Done.
alcueca (Yield) further patched:
Furtherrefactored all oracles so that decimals are handled properly, and work on taking an amount of base as input, and returning an amount of quote as output. Our oracles don’t have decimals themselves anymore as a state variable, since the return values are in the decimals of quote. This means that CompositeMultiOracle is agnostic with regards to decimals, and doesn’t even need to know about them.
[H-02]ERC20Rewardsreturns wrong rewards if no tokens initially exist
Submitted by cmichel
TheERC20Rewards._updateRewardsPerTokenfunction exits without updatingrewardsPerToken_.lastUpdatediftotalSupplyis zero, i.e., if there are no tokens initially.
This leads to an error if there is an active rewards period but no tokens have been minted yet.
Example:rewardsPeriod.start: 1 month ago,rewardsPeriod.end: in 1 month,totalSupply == 0.
The first mint leads to the user (mintee) receiving all rewards for the past period (50% of the total rewards in this case).
_mintis called, calls_updateRewardsPerTokenwhich short-circuits.rewardsPerToken.lastUpdatedis still set torewardsPeriod.startfrom the constructor. Then_updateUserRewardsis called and does not currently yield any rewards. (because both balance and the index diff are zero). User has now minted the tokens,totalSupplyincreases and user balance is set.User performs aclaim:_updateRewardsPerTokenis called andtimeSinceLastUpdated = end - rewardsPerToken_.lastUpdated = block.timestamp - rewardsPeriod.start = 1 month. Contract “issues” rewards for the past month. The first mintee receives all of it.
The first mintee receives all pending rewards when they should not receive any past rewards.
This can easily happen if the token is new, the reward period has already been initialized and is running, but the protocol has not officially launched yet.
Note thatsetRewardsalso allows setting a date in the past which would also be fatal in this case.
Recommend that therewardsPerToken_.lastUpdatedfield must always be updated in_updateRewardsPerTokento the current time (orend) even if_totalSupply == 0. Don’t return early.
alcueca (Yield) confirmed:
You are right, that’s a great finding. For the record, I think that this is whatthis line in Unipool.soldoes:
functionrewardPerToken()publicviewreturns(uint256) {if(totalSupply() ==0) {returnrewardPerTokenStored;}
I’ll apply the mitigation step suggested, with a conditional to not do therewardsPerToken_.accumulatedmath that would revert.Now I know the feeling of the devs that fork a known project and leave a pesky conditional out, thanks again :D
alcueca (Yield) patched:
Fix
[H-03]ERC20Rewardsbreaks when setting a different token
Submitted by cmichel
ThesetRewardsfunction allows setting a different token.
Holders of a previous reward period cannot all be paid out and will receivetheir old reward amountin the new token.
This leads to issues when the new token is more (less) valuable, or uses different decimals.
Example:Assume the first reward period paid out inDAIwhich has 18 decimals. Someone would have received1.0 DAI = 1e18 DAIif they calledclaimnow. Instead, they wait until the new period starts withUSDC(using only 6 decimals) and canclaimtheir1e18reward amount in USDC which would equal1e12 USDC, one trillion USD.
Changing the reward token only works if old and new tokens use the same decimals and have the exact same value. Otherwise, users that claim too late/early will lose out.
Recommend disallowing changing the reward token, or clearing user’s pending rewards of the old token. The second approach requires more code changes and keeping track of what token a user last claimed.
alcueca (Yield) confirmed:
Maybe I should have used stronger language:// If changed in a new rewards program, any unclaimed rewards from the last one will be served in the new tokenThe issue is known, but you are right in pointing it out. There are few situations in which changing the rewards token would make sense (such as replacing a faulty rewards token by a fixed one). I think it would be best to just disallow changing the token.
alcueca (Yield) patched:
Fix
[H-04] Rewards accumulated can stay constant and often not increment
Submitted by moose-code
rewardsPerToken_.accumulatedcan stay constant whilerewardsPerToken_.lastUpdatedis continually updated, leading to no actual rewards being distributed. I.e. No rewards accumulate.
Line 115,rewardsPerToken_.accumulatedcould stay constant if there are very quick update intervals, a relatively lowrewardsPerToken_.rateand a decent supply of the ERC20 token.
I.e. imagine the token supply is 1 billion tokens (quite a common amount, note even if a supply of only say 1 million tokens this is still relevant). i.e. 1e27 wei.
Line 115 has
1e18*timeSinceLastUpdated*rewardsPerToken_.rate/_totalSupply
timeSinceLastUpdatedcan be crafted to be arbitrarily small by simply transferring or burning tokens, so lets exclude this term (it could be 10 seconds etc). Imagine total supply is 1e27 as mentioned.
Therefore,1e18 * rewardsPerToken_.rate / 1e27, which shows that if therewardsPerToken_.rateis < 1e9, something which is very likely, then the accumulated amount won’t increment, as there are no decimals in solidity and this line of code will evaluate to adding zero. While this is rounded down to zero, critically,rewardsPerToken_.lastUpdated = end;is updated.
The reason I have labelled this as a high risk is the express purpose of this contract is to reward users with tokens, yet a user could potentially quite easily exploit this line to ensure no one ever gets rewards and the accumulated amount never increases.
Given a fairly large token supply, and a relatively low emissions rate is set, that satisfies the above equation, for the entire duration of the rewards period, the user simply sends tokens back and forth every couple seconds (gas limitations, but layer 2), to keep the deltatimeSinceLastUpdatedclose to 1.
This way the accumulated amount will never tick up, but time keeps being counted.
Furthermore, I would say this is high risk as this wouldn’t even need an attacker. Given the transfer function is likely often being called by users,timeSinceLastUpdatedwill naturally be very low anyways.
Even if not so extreme as the above case, Alberto points out that “rounding can eat into the rewards” which is likely to be prevalent in the current scenario and make a big impact over time on the targeted vs actual distribution.
Again, this problem is more likely to occur in naturally liquid tokens where lots of transfer, mint or burn events occur.
As suggested by Alberto, the simplest it to probably not update therewardsPerToken_.lastUpdatedfield ifrewardsPerToken_.accumulateddoes not change. Although this change should be closely scrutinized to see it doesn’t introduce bugs elsewhere.
alcueca (Yield) acknowledged and disagreed with severity:
While the issue exists, it’s not as severe as portrayed, and doesn’t need fixing.There is an error in the assessment, and it is that theraterefers to the rewards amount distributed per second among all token holders. It is not the rewards amount distributed per token per second (that’s dynamically calculated).Also, it needs to be taken into account thatrewardsPerToken.accumulatedis stored scaled up by 1e18, to avoid losing much ground to rounding.
structRewardsPerToken{uint128accumulated;// Accumulated rewards per token for the period, scaled up by 1e18uint32lastUpdated;// Last time the rewards per token accumulator was updateduint96rate;// Wei rewarded per second among all token holders}
One of the largest cap tokens is Dai, with a distribution close to 1e28.
If ERC20Rewards were to distribute 1 cent/second among all token holders (which wouldn’t be very exciting), and block times were of 1 second, the accumulator would still accumulate.accumulator += 1e18 (scaling) * 1 (seconds per block) * 1e16 (Dai wei / second) / 1e28 (Dai total supply)The increase to theaccumulatoris of 1e6, which gives plenty of precision. I would expect a rewards program on Dai holders would be at least 1e6 larger per second.On the other hand,accumulatoris anuint128, which holds amounts of up to 1e38. To overflow it we would need a low cap token (let’s say USDC, with 1e15), and a high distribution (1e12 per second, which is unreal), and we run the program for 3 years, or 1e9, to make it easy.The accumulator at the end of the ten years would be:accumulator = 1e18 (scaling) * 1e9 (seconds) * 1e12 (distribution) / 1e15 (supply) = 1e24Which doesn’t overflow.
ghoul-sol (judge) commented:
I’ll keep high risk as there should be no scenario where the math breaks.
[H-05] Exchange rates from Compound are assumed with 18 decimals
Submitted by shw
TheCTokenMultiOraclecontract assumes the exchange rates (borrowing rate) of Compound always have 18 decimals, while, however, which is not true. According to theCompound documentation, the exchange rate returned from theexchangeRateCurrentfunction is scaled by1 * 10^(18 - 8 + Underlying Token Decimals)(and so doesexchangeRateStored). Using a wrong decimal number on the exchange rate could cause incorrect pricing on tokens. SeeCTokenMultiOracle.sol#L110.
Recommend following the documentation and getting the decimals of the underlying tokens to set the correct decimal of aSource.
alcueca (Yield) confirmed:
Thanks a lot for coming up with this. I had looked into how Compound defined the decimals and couldn’t find it.
alcueca (Yield) patched:
Fix
