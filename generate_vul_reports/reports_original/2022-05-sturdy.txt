[H-01] Hard-coded slippage may freeze user funds during market turbulence
Submitted by jonah1005, also found by berndartmueller, Picodes, IllIllI, sorrynotsorry, and WatchPug
GeneralVault.sol#L125GeneralVault set a hardcoded slippage control of 99%. However, the underlying yield tokens price may go down.If Luna/UST things happen again, users’ funds may get locked.
LidoVault.sol#L130-L137Moreover, the withdrawal of the lidoVault takes a swap from the curve pool. 1 stEth worth 0.98 ETH at the time of writing.The vault can not withdraw at the current market.
Given that users’ funds would be locked in the lidoVault, I consider this a high-risk issue.
Proof of Concept
1 stEth  = 0.98 Eth
LidoVault.sol#L130-L137
Recommended Mitigation Steps
There are different ways to set the slippage.
The first one is to let users determine the maximum slippage they’re willing to take.
The protocol front-end should set the recommended value for them.
functionwithdrawCollateral(address_asset,uint256_amount,address_to,uint256_minReceiveAmount)externalvirtual{// ...require(withdrawAmount>=_minReceiveAmount,Errors.VT_WITHDRAW_AMOUNT_MISMATCH);}
The second one is have a slippage control parameters that’s set by the operator.
// Exchange stETH -> ETH via Curveuint256receivedETHAmount=CurveswapAdapter.swapExactTokensForTokens(_addressesProvider,_addressesProvider.getAddress('STETH_ETH_POOL'),LIDO,ETH,yieldStETH,maxSlippage);
functionsetMaxSlippage(uint256_slippage)externalonlyOperator{maxSlippage=_slippage;//@audit This action usually emit an event.emitSetMaxSlippage(msg.sender,slippage);}
These are two common ways to deal with this issue. I prefer the first one.The market may corrupt really fast before the operator takes action.It’s nothing fun watching the number go down while having no option.
sforman2000 (Sturdy) confirmed
iris112 (Sturdy) commented:
Fix the issue of require 99% of withdrawAmount sturdyfi/code4rena-may-2022#11
hickuphh3 (judge) commented:
I realise there are 2 issues discussed here:The high-risk severity relates toGeneralVault’s tight 1% slippage. Because it is inherited by vaults, it can cause withdrawals to fail and for user funds to be stuck.However, in the context of the LIDO vault specifically,#69’sfirst low-severity issue rightly points out that users can choose to withdraw their funds in stETH, then do conversion to ETH separately afterwards. Hence, funds won’t actually be stuck. I would’ve therefore classified this a medium-severity issue. Nevertheless, it is expected that users will attempt to withdraw to ETH instead of stETH in times of market volatility.

[H-02] The check for value transfer success is made after the return statement in_withdrawFromYieldPoolofLidoVault
Submitted by pedroais, also found by 0x52, 0xliumin, cccz, CertoraInc, fatherOfBlocks, GimelSec, hake, hickuphh3, hyh, IllIllI, isamjay, mtz, oyc_109, p4st13r4, peritoflores, rotcivegaf, sorrynotsorry, StErMi, tabish, WatchPug, z3s, 0x4non, 0xf15ers, berndartmueller, dipp, Dravee, MaratCerby, saian, simon135, sseefried, and TerrierLover
Users can lose their funds
Proof of Concept
LidoVault.sol#L142
The code checks transaction success after returning the transfer value and finishing execution. If the call fails the transaction won’t revert since  require(sent, Errors.VTCOLLATERALWITHDRAW_INVALID); won’t execute.
Users will have withdrawn without getting their funds back.
Recommended Mitigation Steps
Return the function after the success check
sforman2000 (Sturdy) confirmed
iris112 (Sturdy) commented:
Fix the issue of return before require sturdyfi/code4rena-may-2022#9
hickuphh3 (judge) commented:
Issue is rather clear-cut.

