[H-01] Incorrect calculations for Surplus Auction creation cause massive surplus imbalances
Submitted byfalconhoof, also found by pep7siup (1,2),tnquanghuy0512,0x6d6164616e,twicek,immeas,T1MOH,Krace,Baki,bitsurfer, andBeosin
There are two big issues inAccountingEngine.sol::auctionSurplus()when calculating values for the creating a Surplus Auction; specifically inLines 213 - 217.
The first issue is theifstatement atline 213which incorrectly checks if_params.surplusTransferPercentageis less thanONE_HUNDRED_WADwhen it should check if it is less thanWAD.
if (_params.surplusTransferPercentage < ONE_HUNDRED_WAD) {
The maximum value for_params.surplusTransferPercentage, as checked by the function atline 199, is1e18so the check atline 213will always returnTRUE.
However, the check should returnFALSEwhen_params.surplusTransferPercentageis1e18or100%because in that case an auction shouldn’t be created; rather the fullsurplusAmountshould be transferred toextraSurplusReceiverin the next code block.
The second issue is the use ofONE_HUNDRED_WADto calculate_amountToSellatLine 215which results in a hugely inflated figure in the newly created surplus auction.
The use ofONE_HUNDRED_WADcauses the calculated figure to be100 timesgreater than it should be.
_amountToSell: _params.surplusAmount.wmul(ONE_HUNDRED_WAD - _params.surplusTransferPercentage)
Impact
Issue 1. For the first issue; when_params.surplusTransferPercentageis100%, a ghost surplus Auction will be created and the entiresurplusAmountamount will also be sent to theextraSurplusReceiveressentially double-counting a large amount of the surplus. This double accounting can destabilise the system and lead to underflows elsewhere.
Issue 2. Surplus auctions are created with massively inflated figures for_amountToSell. This has the potential to cause massive price imbalances and crash the protocol. There is potential here for a malicious actor to leverage the vulnerability to their advantage by creating lots of false surplus in system coins which they purchase cheaply.
Proof of Concept
The following combines both issues into one PoC to show the worst case scenario.
Given the following values and assuming the initial all checks pass in function before reaching Line 213AccountingEngine.sol::auctionSurplus():
WAD = 1e18surplusTransferPercentage = 1e18 (representative of 100%)surplusAmount = 3e18ONE_HUNDRED_WAD = 100e18
The following condition at Line 213 will always return TRUE:
if (_params.surplusTransferPercentage < ONE_HUNDRED_WAD)
So an auction will be created with_amountToSell100 times higher than it should be:
_amountToSell: _params.surplusAmount.wmul(ONE_HUNDRED_WAD - _params.surplusTransferPercentage),Returns 297e18; where coin surplusAmount is only 3e18:_amountToSell = 3e18 * (100e18 - 1e18) / 1e18= 3e18 * 99e18 / 1e18= 297e18= 297 WAD
Following this, a coin amount ofsurplusAmountis also sent to theextraSurplusReceivercalculated inLines 224-231which is actually the intended behaviour.
Tools Used
Foundry
Recommended Mitigation Steps
Update the function on the two affected lines to useWADinstead ofONE_HUNDRED_WADas:
function auctionSurplus() external returns (uint256 _id) {if(_params.surplusTransferPercentage > WAD) revert AccEng_surplusTransferPercentOverLimit();if (_params.surplusAmount == 0) revert AccEng_NullAmount();if (extraSurplusReceiver == address(0)) revert AccEng_NullSurplusReceiver();if (block.timestamp < lastSurplusTime + _params.surplusDelay) revert AccEng_SurplusCooldown();uint256 _coinBalance = safeEngine.coinBalance(address(this));uint256 _debtBalance = safeEngine.debtBalance(address(this));(_coinBalance, _debtBalance) = _settleDebt(_coinBalance, _debtBalance, _unqueuedUnauctionedDebt(_debtBalance));if (_coinBalance < _debtBalance + _params.surplusAmount + _params.surplusBuffer) {revert AccEng_InsufficientSurplus();}// auction surplus percentage-   if (_params.surplusTransferPercentage < ONE_HUNDRED_WAD) {+   if (_params.surplusTransferPercentage < WAD) {_id = surplusAuctionHouse.startAuction({-        _amountToSell: _params.surplusAmount.wmul(ONE_HUNDRED_WAD - _params.surplusTransferPercentage),+        _amountToSell: _params.surplusAmount.wmul(WAD - _params.surplusTransferPercentage),_initialBid: 0});lastSurplusTime = block.timestamp;emit AuctionSurplus(_id, 0, _params.surplusAmount.wmul(ONE_HUNDRED_WAD - _params.surplusTransferPercentage));}// transfer surplus percentageif (_params.surplusTransferPercentage > 0) {if (extraSurplusReceiver == address(0)) revert AccEng_NullSurplusReceiver();safeEngine.transferInternalCoins({_source: address(this),_destination: extraSurplusReceiver,_rad: _params.surplusAmount.wmul(_params.surplusTransferPercentage)});lastSurplusTime = block.timestamp;emit TransferSurplus(extraSurplusReceiver, _params.surplusAmount.wmul(_params.surplusTransferPercentage));}}
RaymondFam (Lookout) commented:
_amountToSellis indeed very close to 100 times (99% plus).
pi0neerpat (OpenDollar) confirmed
MiloTruck (Judge) commented:
The warden has demonstrated how due to the incorrect use ofONE_HUNDRED_WADinstead ofWADwhen calculating percentages, surplus auctions will be created with massively inflated values, breaking the accounting of the protocol. As such, I agree with high severity.Selected this report for best as it outlines the issues, impacts and recommended mitigation really well despite the lack of a coded PoC.
pi0neerpat (OpenDollar) commented
Resolvedhere.

[H-02] Missing debt check lets users start a debt auction of non-existent debt
Submitted bySaintcode_, also found byT1MOHandfalconhoof
TheAccountingEngine.solcontract serves as the protocol’s central component responsible for initializing both debt and surplus auctions. Debt auctions are consistently initiated with a predefined minimum bid referred to as debtAuctionBidSize. This is done to ensure that the protocol can only auction debt that is not currently undergoing an auction and is not locked within the debt queue, as articulated in the comment found onIAccountingEngine:248: “It can only auction debt that has been popped from the debt queue and is not already being auctioned”. This necessity prompts the check on AccountingEngine:181:
if (_params.debtAuctionBidSize > _unqueuedUnauctionedDebt(_debtBalance))
This check verifies that there is a sufficient amount of bad debt available to auction.
The issue stems in line 183, where_settleDebtis called, this aims to ensure that only bad debt is considered for the auction. However, if the remaining bad debt, after settlement, falls below the specified threshold(debtAuctionBidSize <= unqueuedUnauctionedDebt()), the auction still starts with an incorrect amount of bad debt coverage, diluting the protocol Token when it is not yet needed.
Impact
Non-existent debt gets auctioned when it is not necesary which dilutes the protocol token.
PoC
The attached Proof of Concept (PoC) demonstrates two test cases:
In the initial test case, a two-call flow is implemented. The “settleDebt” function must be externally triggered before initiating an auction. This design ensures that a check for insufficient debt occurs prior to creating an auction. Consequently, as after calling settleDebt there is inadequate debt, the operation will revert.In the second case, theauctionDebtfunction is invoked directly. It is expected to behave in the same manner as in the first test case (because the funciton calls_settleDebtinternally). However, in this second test case, the execution follows a different path. Rather than replicating the behavior of the initial test case by reverting not starting the auction, the execution succeeds, resulting in the creation of a debt auction even when there is no existing debt.
The following tests have been created using the protocol’s test suite:
First test case (original two call flow):
functiontest_missing_insuficient_debt_check_part2()public{accountingEngine.modifyParameters("surplusTransferPercentage",abi.encode(1));accountingEngine.modifyParameters("extraSurplusReceiver",abi.encode(1));safeEngine.createUnbackedDebt(address(0),address(accountingEngine),rad(100ether));_popDebtFromQueue(100ether);accountingEngine.settleDebt(100ether);vm.expectRevert();uintid=accountingEngine.auctionDebt();}
Second test case (vulnerability):
functiontest_missing_insuficient_debt_check_part2()public{accountingEngine.modifyParameters("surplusTransferPercentage",abi.encode(1));accountingEngine.modifyParameters("extraSurplusReceiver",abi.encode(1));safeEngine.createUnbackedDebt(address(0),address(accountingEngine),rad(100ether));_popDebtFromQueue(100ether);uintid=accountingEngine.auctionDebt();}
Both test cases should revert and not let a user create a debt Auction under insufficient debt circumstances, but as stated on the report the second test case succeeds and creates the Auction.
Recommended Mitigation Steps
To mitigate this risk, I suggest introducing the check(_params.debtAuctionBidSize > _unqueuedUnauctionedDebt(_debtBalance))after calling _settleDebt to ensure there exists enough amount of bad in the contract after the settling.
RaymondFam (Lookout) commented:
Seems like_params.debtAuctionBidSize > _unqueuedUnauctionedDebt(_debtBalance)check is well in place prior to settling the debt in the second case, but will let the sponsor look into it.
MiloTruck (Judge) commented:
Due to the misplacement of the_params.debtAuctionBidSize > _unqueuedUnauctionedDebt(_debtBalance)check before_settleDebt()is called, the protocol will create debt auctions even when the amount of bad debt is belowparams.debtAuctionBidSize. This leads to dilution of the protocol token as bidders can buy non-existent debt, thereby destabilizing the value of protocol’s token. As such, I agree with high severity.
pi0neerpat (OpenDollar) commented
Resolvedhere.

