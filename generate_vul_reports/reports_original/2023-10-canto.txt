[H-01] Array Length oftickTracking_can be purposely increased to Brick Minting and Burning of most users’ liquidity positions
Submitted byBanditx0x, also found byBanditx0x,maanas,emerald7017,adriro,twicek,0xDING99YA,0xpiken,3docSec, and0xWaitress
Lines of code
https://github.com/code-423n4/2023-10-canto/blob/40edbe0c9558b478c84336aaad9b9626e5d99f34/canto_ambient/contracts/mixins/LiquidityMining.sol#L24-L35https://github.com/code-423n4/2023-10-canto/blob/40edbe0c9558b478c84336aaad9b9626e5d99f34/canto_ambient/contracts/mixins/LiquidityMining.sol#L122
Impact
A malicious user can brick minting, burning and harvesting of liquidity for almost all liquidity providers.
Important NOTE: This is a different vector from another gas issue, which is iterating over too many ticks in(int24 i = lowerTick + 10; i <= upperTick - 10; ++i). That issue affects wide liquidity positions, while this attack vector affects even liquidity positions with a relatively small number of ticks.
Proof of Concept
WhenaccrueConcentratedPositionTimeWeightedLiquidityis called, under most conditions for every potentially eligible tick, it will iterate over everytickTrackingDataintickTracking:
while(time<block.timestamp&&tickTrackingIndex<numTickTracking)
tickTrackingis iterated bytickTrackingIndex++;
The array mapped bytickTracking_is increased by 1 for a tick every time a trade through the liquidity pool changes the price from a different tick to this tick. This is implemented in thecrossTicksfunction:
functioncrossTicks(bytes32poolIdx,int24exitTick,int24entryTick)internal{uint256numElementsExit=tickTracking_[poolIdx][exitTick].length;tickTracking_[poolIdx][exitTick][numElementsExit-1].exitTimestamp=uint32(block.timestamp);StorageLayout.TickTrackingmemorytickTrackingData=StorageLayout.TickTracking(uint32(block.timestamp),0);tickTracking_[poolIdx][entryTick].push(tickTrackingData);}
A user could purposely increase the length of thetickTracking_array and cause the gas limit to be reached whenever the array is looped over.
The price impact required to cross a tick is from 0 to 1 bps, with 1 bps as the tick width. This is already extremely small, but the attacker could have the swap amount be a very small fraction of a bps if they first swap to make the price end very close to a tick boundary, then execute multiple extremely small swaps which bounce the price back and forth over the tick boundary.
Note that the CANTO liquidity rewards are targeted to stable pools. An attacker can be quite confident, for example, that a USDC/USDT pool will trade at around$1, and the ticks closest to$1 will always be eligible for rewards and therefore be looped over by all rewardable positions whenaccrueConcentratedPositionTimeWeightedLiquidityis called. Therefore, the attack can be targeted to just one or two ticks to affect almost every user.
accrueConcentratedPositionTimeWeightedLiquidityis called during minting, burning and harvesting liquidity positions. Therefore, this gas griefing attack will make all these functions revert for almost every user. This would basically break the functionality of concentrated liquidity pools on Ambient.
Contrast the effect to the cost to the attacker: using the aforementioned attack vector the main cost to the attacker will be the gas costs of performing the swaps. This is far lower than the damage that is done to the protocol/users.
One additional factor which makes this attack easy to execute, is that crossing ticks, even if the entry and exit is within the sameblock.timestamp, adds to the array length. Tracking this is unnecessary, because the tick was active for 0 blocks, and therefore, the time delta and allocated rewards is zero.
Recommended Mitigation Steps
One immediate step would topop()tickTrackingDataas soon as theexitTimestamp == entryTimestamp. This happens to the last element of the array whencrossTicksis called. Tracking this is unnecessary, because the tick was active for 0 blocks, and therefore, the time delta and allocated rewards is zero.
The documentation stated that CANTO rewards are meant to be distributed for stable pools for this codebase. The term “stable” could have different interpretations, but this recommendation assumes that this refers to stablecoin-like or pegged asset pairs such as stETH/WETH, USDT/USDC etc.
Instead of iterating through every tick, one could assume a range where the stable assets could lie and then reward all positions that lie within the specified range; in this case, +/- 10 ticks of the price tick.
This makes an assumption that these “stable assets” will actually stay pegged to each other. However, the current accounting architecture has multiple problems:
Given the high number of loops required by the current accounting mechanism, there are multiple reasons that gas could run out. This includes iterating through too many ticks or having too many tick entries/exits.The current mechanism increases the gas costs of all minting, burning and harvesting.DOS attacks like the one described in this issue are possible.
Assuming a stable price has the downside of misallocating rewards if the stable assets depeg from each other. However, this may be a reasonable tradeoff to prevent this DOS attack.
Assessed type
DoS
OpenCoreCH (Canto) confirmed
Note: for full discussion, seehere.

