[H-01] IncorrectblocksPerYearconstant inWhitepaperInterestRateModel
Submitted byTeam_Rocket, also found bythekmj,MohammedRizwan,peritoflores,DeliChainSec,0xkazim,sces60107,0xkazim,ast3ros,BPZ,carlitox477,sashik_eth,Yardi256,berlin-101,zzykxx,Brenzee,fs0c,Franfran,Bauchibred,BoltzmannBrain,SaeedAlipoor01988,Lilyjjoandvolodya.
https://github.com/code-423n4/2023-05-venus/blob/8be784ed9752b80e6f1b8b781e2e6251748d0d7e/contracts/WhitePaperInterestRateModel.sol#L17
The interest rate per block is5xgreater than it’s intended to be for markets that use the Whitepaper interest rate model.
Proof of Concept
TheWhitePaperInterestRateModelcontract is forked from Compound Finance, which was designed to be deployed on Ethereum Mainnet. TheblocksPerYearconstant inside the contract is used to calculate the interest rate of the market on a per-block basis and is set to2102400, which assumes that there are 365 days a year and that the block-time is15 seconds.
However, Venus Protocol is deployed on the BNB chain, which has a block-time of only3 seconds. This results in the interest rate per block on the BNB chain to be5xgreater than intended.
BothbaseRatePerBlockandmultiplierPerBlockare affected and are5xthe value they should be. This also implies that the pool’s interest rate is also 5 times more sensitive to utilization rate changes than intended. It is impossible for the market to arbitrage and adjust the interest rate back to the intended rate as seen in the PoC graph below. It’s likely that arbitrageurs will deposit as much collateral as possible to take advantage of the high supply rate, leading to a utilization ratio close to 0.
The following Python script plots theWhitePaperInterestRateModelcurves for a 15 second and a 3 second block time.
importmatplotlib.pyplotasplt# ConstantsBASE =1e18# Solidity functions converted to Python functionsdefutilization_rate(cash,borrows,reserves):ifborrows ==0:return0return(borrows * BASE) / (cash + borrows - reserves)defget_borrow_rate(ur,base_rate_per_block,multiplier_per_block):return((ur * multiplier_per_block) / BASE) + base_rate_per_blockdefgenerate_data_points(base_rate_per_year,multiplier_per_year,blocks_per_year,cash,borrows,reserves):base_rate_per_block = base_rate_per_year / blocks_per_yearmultiplier_per_block = multiplier_per_year / blocks_per_yearutilization_rates = [i /100foriinrange(101)]borrow_rates = [get_borrow_rate(ur * BASE, base_rate_per_block, multiplier_per_block)forurinutilization_rates]returnutilization_rates, borrow_rates# User inputsbase_rate_per_year =5e16# 5%multiplier_per_year =1e16# 1%blocks_per_year1 =2102400# 15 second block-timeblocks_per_year2 =10512000# 3 second block-time# Example values for cash, borrows, and reservescash =1e18borrows =5e18reserves =0.1e18# Generate data points for both curvesutilization_rates1, borrow_rates1 = generate_data_points(base_rate_per_year, multiplier_per_year, blocks_per_year1, cash, borrows, reserves)utilization_rates2, borrow_rates2 = generate_data_points(base_rate_per_year, multiplier_per_year, blocks_per_year2, cash, borrows, reserves)# Plot both curves on the same plot with a keyplt.plot(utilization_rates1, borrow_rates1,label=f"Blocks per year:{blocks_per_year1}")plt.plot(utilization_rates2, borrow_rates2,label=f"Blocks per year:{blocks_per_year2}")plt.xlabel("Utilization Rate")plt.ylabel("Borrow Rate")plt.title("Interest Rate Curves")plt.legend()plt.show()
Result:

As seen above, the borrow rate curves are different and do not intersect. Hence, it’s impossible via arbitrage for market participants to adjust the rate back to its intended value.
Recommended Mitigation Steps
Fix theblocksPerYearconstant so that it accurately describes the number of blocks a year on the BNB chain, which has a block-time of 15 seconds. The correct value is10512000.
\begin{aligned}\text{blocksPerYear} &= \frac{\text{secondsInAYear}}{\text{blockTime}} \\&= \frac{365 \times 24 \times 60 \times 60}{3} \\&= 10{,}512{,}000\end{aligned}
@@ -14,7 +14,7 @@ contract WhitePaperInterestRateModel is InterestRateModel {/*** @notice The approximate number of blocks per year that is assumed by the interest rate model*/-    uint256 public constant blocksPerYear = 2102400;+    uint256 public constant blocksPerYear = 10512000;/*** @notice The multiplier of utilization rate that gives the slope of the interest rate
0xean (judge) increased severity to High
chechu (Venus) confirmed via duplicate issue #559

