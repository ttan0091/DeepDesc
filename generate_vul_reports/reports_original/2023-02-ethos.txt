[H-01] Re-balancing the vault allocation may always revert when distributing profits: resulting of a massive system DOS
Submitted by0xBeirao, also found bybin2chen
updateRewardSumfunction call_computeRewardsPerUnitStakedwith_debtToOffsetset to 0. Meaning that the assignmentL531will revert iflastLUSDLossError_Offset != 0(which is likely the case) because we try to assign a negative value to anuint.
Impact
_rebalance()will be definitely DOS if the profit is greater than theyieldClainThreshold⇒vars.profit != 0.
Because they call_rebalance()all these functions will be DOS :
InBorrowerOperations100% DOS
openTrovecloseTrove_adjustTroveaddColl, withdrawCollwithdrawLUSD, repayLUSD
InTroveManager80% DOS
liquidateTrovesbatchLiquidateTrovesredeemCloseTrove
Proof of Concept
Context : the vault has compound enough profit to withdraw. (here)
Alice initiates a trove liquidation.offset()inStabilityPoolis called to cancels out the trove debt against the LUSD contained in the Stability Pool.
A floor division errors occur so nowlastLUSDLossError_Offsetis not null.
Now, every time_rebalance()is called the transaction will revert.
Recommended Mitigation
InStabilityPool.sol#L504-L544, just skip the floor division errors calculation if_debtToOffset == 0
if(_debtToOffset!=0){[StabilityPool.sol#L526-L538](https://github.com/code-423n4/2023-02-ethos/blob/73687f32b934c9d697b97745356cdf8a1f264955/Ethos-Core/contracts/StabilityPool.sol#L526-L538)}
tess3rac7 (Ethos Reserve) confirmed

[H-02] User can lose up to whole stake on vault withdrawal when there are funds locked in the strategy
Submitted byhyh, also found byhansfriese,koxuan,Koolex,Parad0x,jasonxiale, andchaduke
ReaperVaultV2’swithdrawMaxLossisn’t honoured when there are any locked funds in the strategy. Locked funds mean that there is a gap between requested and returned amount other than the loss reported. This is valid behavior of a strategy, but in this case realized loss is miscalculated in _withdraw() and a withdrawing user will receive less funds, while having all the shares burned.
Impact
Users can lose up to the whole asset amount due as all their requested shares can be burned, while only available amount be transferred to them. This amount can be arbitrary low.
The behaviour is not controlled bywithdrawMaxLosslimit and is conditional only on a strategy having some funds locked (i.e. strategy experiencing liquidity squeeze).
Proof of Concept
_withdraw()resetsvalueto betoken.balanceOf(address(this))when the balance isn’t enough for withdrawal:
https://github.com/code-423n4/2023-02-ethos/blob/73687f32b934c9d697b97745356cdf8a1f264955/Ethos-Vault/contracts/ReaperVaultV2.sol#L357-L412
// Internal helper function to burn {_shares} of vault shares belonging to {_owner}// and return corresponding assets to {_receiver}. Returns the number of assets that were returned.function_withdraw(uint256_shares,address_receiver,address_owner)internalnonReentrantreturns(uint256value) {...vaultBalance=token.balanceOf(address(this));if(value>vaultBalance) {value=vaultBalance;}require(totalLoss<= ((value+totalLoss) *withdrawMaxLoss) /PERCENT_DIVISOR,"Withdraw loss exceeds slippage");}token.safeTransfer(_receiver,value);emitWithdraw(msg.sender,_receiver,_owner,value,_shares);}
Each strategy can return less thanrequested - lossas some funds can be temporary frozen:
https://github.com/code-423n4/2023-02-ethos/blob/73687f32b934c9d697b97745356cdf8a1f264955/Ethos-Vault/contracts/abstract/ReaperBaseStrategyv4.sol#L90-L103
/***@devWithdraws funds and sends them back to the vault. Can only*      be called by the vault. _amount must be valid and security fee*      is deducted up-front.*/functionwithdraw(uint256_amount)externaloverridereturns(uint256loss) {require(msg.sender==vault,"Only vault can withdraw");require(_amount!=0,"Amount cannot be zero");require(_amount<=balanceOf(),"Ammount must be less than balance");uint256amountFreed=0;(amountFreed,loss) =_liquidatePosition(_amount);IERC20Upgradeable(want).safeTransfer(vault,amountFreed);}
The invariant there isliquidatedAmount + loss <= _amountNeeded, soliquidatedAmount + loss < _amountNeededis a valid state (due to the funds locked):
https://github.com/code-423n4/2023-02-ethos/blob/73687f32b934c9d697b97745356cdf8a1f264955/Ethos-Vault/contracts/abstract/ReaperBaseStrategyv4.sol#L230-L243
/*** Liquidate up to`_amountNeeded`of`want`of this strategy's positions,* irregardless of slippage. Any excess will be re-invested with`_adjustPosition()`.* This function should return the amount of`want`tokens made available by the* liquidation. If there is a difference between them,`loss`indicates whether the* difference is due to a realized loss, or if there is some other sitution at play* (e.g. locked funds) where the amount made available is less than what is needed.** NOTE: The invariant`liquidatedAmount + loss <= _amountNeeded`should always be maintained*/function_liquidatePosition(uint256_amountNeeded)internalvirtualreturns(uint256liquidatedAmount,uint256loss);
_liquidatePosition()is called in strategy withdraw():
https://github.com/code-423n4/2023-02-ethos/blob/73687f32b934c9d697b97745356cdf8a1f264955/Ethos-Vault/contracts/abstract/ReaperBaseStrategyv4.sol#L90-L103
/***@devWithdraws funds and sends them back to the vault. Can only*      be called by the vault. _amount must be valid and security fee*      is deducted up-front.*/functionwithdraw(uint256_amount)externaloverridereturns(uint256loss) {require(msg.sender==vault,"Only vault can withdraw");require(_amount!=0,"Amount cannot be zero");require(_amount<=balanceOf(),"Ammount must be less than balance");uint256amountFreed=0;(amountFreed,loss) =_liquidatePosition(_amount);IERC20Upgradeable(want).safeTransfer(vault,amountFreed);}
This way there can belockedAmount = _amountNeeded - (liquidatedAmount + loss) >= 0, which is neither a loss, nor withdraw-able at the moment.
As ReaperVaultV2’s_withdraw()updatesvalueperif (value > vaultBalance) {value = vaultBalance;}, the followingtotalLoss <= ((value + totalLoss) * withdrawMaxLoss) / PERCENT_DIVISORcheck do not control for the real loss and allows user to lose up to the whole amount due as_withdraw()first burns the full amount of the_sharesrequested and this total loss check for therebasedvalueis the only guard in place:
https://github.com/code-423n4/2023-02-ethos/blob/73687f32b934c9d697b97745356cdf8a1f264955/Ethos-Vault/contracts/ReaperVaultV2.sol#L359-L412
function_withdraw(uint256_shares,address_receiver,address_owner)internalnonReentrantreturns(uint256value) {require(_shares!=0,"Invalid amount");value= (_freeFunds() *_shares) /totalSupply();_burn(_owner,_shares);if(value>token.balanceOf(address(this))) {...vaultBalance=token.balanceOf(address(this));if(value>vaultBalance) {value=vaultBalance;}require(totalLoss<= ((value+totalLoss) *withdrawMaxLoss) /PERCENT_DIVISOR,"Withdraw loss exceeds slippage");}token.safeTransfer(_receiver,value);emitWithdraw(msg.sender,_receiver,_owner,value,_shares);}
Suppose there is only one strategy and90of the100tokens requested is locked at the moment, and there is no loss, just a temporal liquidity squeeze. Say there is no tokens on the vault balance before strategy withdrawal.
ReaperBaseStrategyv4’swithdraw()will transfer10, report0loss,0 = totalLoss <= ((value + totalLoss) * withdrawMaxLoss) / PERCENT_DIVISOR = (10 + 0) * withdrawMaxLoss / PERCENT_DIVISORcheck will be satisfied for any viablewithdrawMaxLosssetting.
Bob the withdrawing user will receive10tokens and have100tokens worth of the shares burned.
Recommended Mitigation Steps
Consider rewriting the controlling logic so the check be based on initial value:
Now:
https://github.com/code-423n4/2023-02-ethos/blob/73687f32b934c9d697b97745356cdf8a1f264955/Ethos-Vault/contracts/ReaperVaultV2.sol#L399-L407
vaultBalance=token.balanceOf(address(this));if(value>vaultBalance) {value=vaultBalance;}require(totalLoss<= ((value+totalLoss) *withdrawMaxLoss) /PERCENT_DIVISOR,"Withdraw loss exceeds slippage");
To be, as an example, if treat the loss attributed to the current user only as they have requested the withdrawal:
require(totalLoss<= (value*withdrawMaxLoss) /PERCENT_DIVISOR,"Withdraw loss exceeds slippage");value-=totalLoss;vaultBalance=token.balanceOf(address(this));require(value<=vaultBalance,"Not enough funds");
Also,sharescan be updated according to the real value obtained as it is done in yearn:
https://github.com/yearn/yearn-vaults/blob/master/contracts/Vault.vy#L1147-L1151
ifvalue> vault_balance:value=vault_balance# NOTE:Burn#ofsharesthatcorrespondstowhatVaulthason-hand,#includingthelossesthatwereincurredaboveduringwithdrawalsshares=self._sharesForAmount(value+totalLoss)
tess3rac7 (Ethos Reserve) confirmed via duplicate issue#723

[H-03] Rewards will be locked in LQTYStaking Contract
Submitted bygjaldon, also found by0xBeirao,hyh, and0xRobocop
https://github.com/code-423n4/2023-02-ethos/blob/main/Ethos-Core/contracts/LQTY/LQTYStaking.sol#L181-L183https://github.com/code-423n4/2023-02-ethos/blob/main/Ethos-Core/contracts/RedemptionHelper.sol#L191-L197https://github.com/code-423n4/2023-02-ethos/blob/main/Ethos-Core/contracts/ActivePool.sol#L296-L300
The state variableF_Collateralin the LQTYStaking contract is used to keep track of rewards for each of the collateral types used in the protocol. Every time the LQTYStaking contract is sent collateral assets for rewards by the ActivePool or the RedemptionHelper,LQTYStaking.increaseF_Collateralis called to record the rewards that are to be distributed to stakers.
However, if the state variabletotalLQTYStakedis large enough in the LQTYStaking contract, zero rewards will be distributed to stakers even though LQTYStaking received assets. This issue is exarcebated when using WBTC as collateral due to its low number of decimals.
For example, given the following:
totalLQTYStaked= 1e25; LQTY/OATH token has 18 decimals; this means that a total of 10million LQTY has been stakedA redemption rate of 0.5% was applied on a redemption of 10e8 WBTC. This leads to a redemption fee of 5e6 WBTC that is sent to the LQTYStaking contract. This happens inthis code.Given the above, RedemptionHelper callsLQTYStaking.increaseF_Collateral(WBTCaddress, 5e6)
The issue is in this line inincreaseF_Collateral:
if(totalLQTYStaked>0) {collFeePerLQTYStaked=_collFee.mul(DECIMAL_PRECISION).div(totalLQTYStaked);}
_collFee= 5e6;DECIMAL_PRECISION= 1e18;totalLQTYStaked= 1e25
If we substitute the variables with the actual values and represent the code in math, it looks like:
(5e6 * 1e18) / 1e25 = 5e24 / 1e25 = 0.5
Since the result of that math is a value less than 1 and in Solidity/EVM we only deal with integers and division rounds down, we get 0 as a result. That means the below code will only add0toF_Collateral:
F_Collateral[_collateral] =F_Collateral[_collateral].add(collFeePerLQTYStaked);
So even though LQTYStaking received 5e6 WBTC in redemption fee, that fee will never be distributed to stakers and will remain forever locked in the LQTYStaking contract. The minimum amount of redemption fee that is needed for the reward to be recognized and distributed to stakers is 1e7 WBTC. That means at least 0.1 BTC in collateral fee is needed for the rewards to be distributed when there is 1Million total LQTY staked.
Impact
This leads to loss of significant rewards for stakers. These collateral assets that are not distributed as rewards will remain forever locked in LQTYStaking.
If 1e25 LQTY is staked in LQTYStaking (10M LQTY), at least 1e7 (0.1) WBTC in redemption fee must be sent by the RedemptionHelper for that WBTC to be sent as rewards to the stakers. That means only redemptions of 20e8 (20) WBTC and more will lead to redemption fees high enough to be distributed as rewards to stakers. Redemption of 20e8 WBTC will rarely happen, so it’s likely that majority of rewards will be forever locked since most redemptions will be less than that.
Given the above, if only 3% of redemptions have amounts of 20e8 WBTC or greater, then 97% of redemptions will have their fees forever locked in the contract. The greater the amount of LQTY Staked, the higher the amount needed for the fees to be recorded.
Proof of Concept
First, comment outthis lineinincreaseF_Collateralto disable the access control. This allows us to write a more concise POC. It is fine since the issue has nothing to do with access control.
Add the following test case to theEthos-Core/test/LQTYStakingFeeRewardsTest.jsfile after thebeforeEachclause:
it('does not increase F collateral even with large amount of collateral fee',async()=>{awaitstakingToken.mint(A,dec(10_000_000,18))awaitstakingToken.approve(lqtyStaking.address,dec(10_000_000,18), {from:A})awaitlqtyStaking.stake(dec(10_000_000,18), {from:A})constwbtc=collaterals[1].addressconstoldWBTC_FCollateral=awaitlqtyStaking.F_Collateral(wbtc)// .09 WBTC in redemption/collateral fee will not be distributed as reward to stakersawaitlqtyStaking.increaseF_Collateral(wbtc,dec(9,6))assert.isTrue(oldWBTC_FCollateral.eq(awaitlqtyStaking.F_Collateral(wbtc)))// at least 0.1 WBTC in redemption/collateral fee is needed for it to be distributed as reward to stakersawaitlqtyStaking.increaseF_Collateral(wbtc,dec(1,7))assert.isTrue(oldWBTC_FCollateral.lt(awaitlqtyStaking.F_Collateral(wbtc)))})
The test can then be run with the following command:
$ npx hardhat test --grep "does not increase F collateral even with large amount of collateral fee"
Recommended Mitigation
One way to address this issue is to use the same error-recording logic found in the_computeLQTYPerUnitStakedlogic that looks like:
uintLQTYNumerator=_LQTYIssuance.mul(DECIMAL_PRECISION).add(lastLQTYError);uintLQTYPerUnitStaked=LQTYNumerator.div(_totalLUSDDeposits);lastLQTYError=LQTYNumerator.sub(LQTYPerUnitStaked.mul(_totalLUSDDeposits));
ThelastLQTYErrorstate variable stores the LQTY issuance that was not distributed since they were just rounded off. The same approach can be used inincreaseF_Collateral.
tess3rac7 (Ethos Reserve) confirmed

