[H-01] RubiconRouter: Offers created through offerWithETH() can be cancelled by anyone
Submitted by cccz, also found by kenzo, 0x1f8b, IllIllI, and pedroais
When a user creates an offer through the offerWithETH function of the RubiconRouter contract, the offer function of the RubiconMarket contract is called, and the RubiconRouter contract address is set to offer.owner in the offer function.
This means that anyone can call the cancelForETH function of the RubiconRouter contract to cancel the offer and get the ether.
Proof of Concept
https://github.com/code-423n4/2022-05-rubicon/blob/8c312a63a91193c6a192a9aab44ff980fbfd7741/contracts/RubiconRouter.sol#L383-L409
https://github.com/code-423n4/2022-05-rubicon/blob/8c312a63a91193c6a192a9aab44ff980fbfd7741/contracts/RubiconRouter.sol#L440-L452
Recommended Mitigation Steps
Set the owner ofoffer_idto msg.sender inofferWithETHfunction and check it in cancelForETH function.
bghughes (Rubicon) confirmed

[H-02] RubiconRouter: Offers created through offerForETH cannot be cancelled
Submitted by cccz
When a user creates an offer through the offerForETH function of the RubiconRouter contract, the offer function of the RubiconMarket contract is called, and the RubiconRouter contract address is set to offer.owner in the offer function.
But the RubiconRouter contract does not implement a function to cancel this offer. This means that if no one accepts the offer, the user’s tokens will be locked in the contract.
Proof of Concept
https://github.com/code-423n4/2022-05-rubicon/blob/8c312a63a91193c6a192a9aab44ff980fbfd7741/contracts/RubiconRouter.sol#L412-L437
Recommended Mitigation Steps
ImplementcancelForERCfunction to cancel this offer. And set the owner of offer_id to msg.sender in offerForETH function and check it in cancelForERC function
bghughes (Rubicon) marked as duplicate:
Duplicate of#17.
HickupHH3 (judge) commented:
Not a duplicate. Referring to separate lacking functionality of cancellation of ERC20 -> WETH offers (eg. acancelWithETHfunction).

[H-03] Attacker could steal almost all the bonus tokens in BathBuddy Vesting Wallet
Submitted by xiaoming90, also found by 0x52, PP1004, shenwilly, andsashiketh_
BathBuddy is a Vesting Wallet that payout withdrawers anybonusTokensthey may have accrued while staking in the Bath Token (e.g. network incentives/governance tokens).
BathBuddy Vesting Wallet releases a user their relative share of the pool’s total vested bonus token during the withdraw call on BathToken.sol. This vesting occurs linearly over Unix time.
It was observed that an attacker could steal almost all thebonusTokensin the BathBuddy Vesting Wallet.
Proof of Concept
The root cause of this issue is that the amount ofbonusTokensthat a user is entitled to is based on their relative share of the pool’s total vested bonus token at the point of the withdraw call. It is calculated based on the user’s “spot” share in the pool.
Thus, it is possible for an attacker to deposit large amount of tokens into a BathToken Pool to gain significant share of the pool (e.g. 95%), and then withdraw the all the shares immediately. The withdraw call will trigger theBathToken.distributeBonusTokenRewards, and since attacker holds overwhelming amount of share in the pool, they will receive almost all thebonusTokenin the BathBuddy Vesting wallet, leaving behind dust amount ofbonusTokenin the wallet. This could be perform in an atomic transaction and attacker can leverage on flash-loan to fund this attack.
The following shows an example of this issue:
A sponsor sent 1000 DAI to the BathBuddy Vesting Wallet to be used asbonusTokensfor bathWETH pool. The vesting duration is 4 weeks.Alice and Bob deposited 50 WETH and 50 WETH respectively. The total underlying asset of bathWETH is 100 WETH after depositing. Each of them hold 50% of the shares in the pool.Fast forward to the last hour of the vesting period, most of thebonusTokenhave been vested and ready for the recipients to claim. In this example, estimate 998 DAI are ready to be claimed at the final hour.Since Alice has 50% stake in the pool, she should have accured close to 449 DAI at this point. If she decided to withdraw all her bathWETH LP tokens at this point, she would receive close to 449 DAI asbonusTokens. But she choose not to withdraw yet.Unfortunately, an attacker performed a flash-loan to borrow 8500 WETH, and deposit large amount of WETH into the bathWETH gain significant share of the pool, and then withdraw the all the shares immediately.Since attacker hold the an overwhelming amount of shares in the pool, they will receive almost all thebonusToken(around 997 DAI) in the BathBuddy Vesting wallet, leaving behind dust amount ofbonusTokenin the wallet.At this point, Alice decided to withdraw all her bathWETH LP token. She only received dust amount of 0.7 DAI asbonusTokens
The following code shows that the amount ofbonusTokensa user is entitled is based on the user’s current share in the pool -amount = releasable * sharesWithdrawn/initialTotalSupply.
https://github.com/code-423n4/2022-05-rubicon/blob/8c312a63a91193c6a192a9aab44ff980fbfd7741/contracts/peripheral_contracts/BathBuddy.sol#L87
/// @inheritdoc IBathBuddy/// @dev Added and modified release function. Should be the only callable release functionfunctionrelease(IERC20token,addressrecipient,uint256sharesWithdrawn,uint256initialTotalSupply,uint256poolFee)externaloverride{require(msg.sender==beneficiary,"Caller is not the Bath Token beneficiary of these rewards");uint256releasable=vestedAmount(address(token),uint64(block.timestamp)) -released(address(token));if(releasable>0) {uint256amount=releasable.mul(sharesWithdrawn).div(initialTotalSupply);uint256_fee=amount.mul(poolFee).div(10000);..SNIP..uint256amountWithdrawn=amount.sub(_fee);token.transfer(recipient,amountWithdrawn);_erc20Released[address(token)] +=amount;..SNIP..}}
Test Scripts
Following is the test output that demonstrates the above scenario:
Contract:RubiconExchangeandPoolsOriginalTestsDeployment✓isdeployed(1783ms)BathHouseInitializationofBathPairandBathTokens✓BathHouseisdeployedandinitialized(66ms)newbathWETH!0x237eda6f0102c1684caEbA3Ebd89e26a79258C6f✓WETHBathTokenforWETHassetisdeployedandinitialized(131ms)✓InitBathBuddyVestingWalletandAddBathBuddytoWETHBathTokenPool(54ms)✓BathPairisdeployedandinitializedw/BathHouse(59ms)undefined✓Alicedeposit50WETHtoWETHbathTokens(137ms)undefined✓Bobdeposit50WETHtoWETHbathTokens(174ms)bathAssetInstance.bonusTokens.length=1bathBuddyInstance(VestingWallet)has1000DAIbathBuddyInstance.vestedAmount(DAI) =0.000413359788359788bathBuddyInstance.vestedAmount(DAI) =500.000413359788359788(Endof2ndweek)bathBuddyInstance.vestedAmount(DAI) =998.512318121693121693(Lasthourofthevestingperiod)0DAIhasbeenreleasedfromBathBuddyVestingWalletCharleshas8500bathWETHtoken,0DAI,0WETHCharleswithdrawallhisbathWETHtokens997.338978147402060445DAIhasbeenreleasedfromBathBuddyVestingWalletCharleshas0bathWETHtoken,997.039776453957839827DAI,8497.45WETHAlicehas5bathWETHtoken,0DAI,0WETH998.075233164534207763DAIhasbeenreleasedfromBathBuddyVestingWalletAlicehas0bathWETHtoken,0.736034140627007674DAI,6.2731175WETH✓AddRewards(100DAI)toBathBuddyVestingWallet(749ms)bathAssetInstance:underlyingBalance() =6.2768825WETH,balanceOf=6.2768825WETH,OutstandingAmount=0WETH✓ [Debug]
Attacker Charles deposited 8500 WETH to the pool and withdraw them immediately at the final hour, and obtained almost all of thebonusTokens(997 DAI). When Alice withdraw from the pool, she only received 0.7 DAI asbonusTokens.
Script can be foundhttps://gist.github.com/xiaoming9090/2252f6b6f7e62fca20ecfbaac6f754f5
Note: Due to some unknown issue with the testing environment, please create a newBathBuddy.released2functions to fetch the amount of token already released.
Impact
Loss of Fund for the users. BathToken LPs not able to receive the accuredbonusTokenthat they are entitled to.
Recommended Mitigation Steps
Update the reward mechanism to ensure that thebonusTokensare distribute fairly and rewards of each user are accured correctly.
In the above example, since Alice holds 50% of the shares in the pool throughout the majority of the reward period, she should be entitled to close to 50% to the rewards/bonus. Anyone who joins the pool at the last hour of the reward period should only be entitled to dust amount ofbonusToken.
Additionally, “spot” (or current) share of the pool should not be used to determine the amount ofbonusTokena user is entitled to as it is vulnerable to pool/share manipulation or flash-loan attack. Checkpointing mechanism should be implemented so that at the minimum, the user’s amount of share in the previous block is used for determining the rewards. This make flash-loan attack infeasible as such attack has to happen within the same block/transaction.
For distributing bonus/rewards, I would suggest checking out a widely referencedSynthetix’s RewardContract as I think that it would be more relevant than OZ’s Vesting Wallet for this particular purpose.
bghughes (Rubicon) confirmed
HickupHH3 (judge) commented:
Great writeup and POC from the warden!#71is a little similar, but instead of a flash loan, uses a different method of repeated deposits and withdrawals to achieve the same result.Because of the higher quality of this report, I’m using it as the primary issue.

[H-04] First depositor can break minting of shares
Submitted by MiloTruck, also found by cccz, oyc109, VAD37, PP1004, SmartSek, minhquanym, unforgiven, berndartmueller, WatchPug, CertoraInc, and sorrynotsorry_
The attack vector and impact is the same asTOB-YEARN-003, where users may not receive shares in exchange for their deposits if the total asset amount has been manipulated through a large “donation”.
Proof of Concept
InBathToken.sol:569-571, the allocation of shares is calculated as follows:
(totalSupply==0) ?shares=assets:shares= (assets.mul(totalSupply)).div(_pool);
An early attacker can exploit this by:
Attacker callsopenBathTokenSpawnAndSignal()withinitialLiquidityNew = 1, creating a new bath token withtotalSupply = 1Attacker transfers a large amount of underlying tokens to the bath token contract, such as1000000Usingdeposit(), a victim deposits an amount less than1000000, such as1000:assets = 1000(assets * totalSupply) / _pool = (1000 * 1) / 1000000 = 0.001, which would round down to0Thus, the victim receives no shares in return for his deposit
To avoid minting 0 shares, subsequent depositors have to deposit equal to or more than the amount transferred by the attacker. Otherwise, their deposits accrue to the attacker who holds the only share.
it("Victim receives 0 shares",async()=>{// 1. Attacker deposits 1 testCoin first when creating the liquidity poolconstinitialLiquidityNew=1;constinitialLiquidityExistingBathToken=ethers.utils.parseUnits("100",decimals);// Approve DAI and testCoin for bathHouseInstanceawaittestCoin.approve(bathHouseInstance.address,initialLiquidityNew, {from:attacker,});awaitDAIInstance.approve(bathHouseInstance.address,initialLiquidityExistingBathToken,{from:attacker});// Call open creation function, attacker deposits only 1 testCoinconstdesiredPairedAsset=awaitDAIInstance.address;awaitbathHouseInstance.openBathTokenSpawnAndSignal(awaittestCoin.address,initialLiquidityNew,desiredPairedAsset,initialLiquidityExistingBathToken,{from:attacker});// Retrieve resulting bathToken addressconstnewbathTokenAddress=awaitbathHouseInstance.getBathTokenfromAsset(testCoin.address);const_newBathToken=awaitBathToken.at(newbathTokenAddress);// 2. Attacker deposits large amount of testCoin into liquidity poolletattackerAmt=ethers.utils.parseUnits("1000000",decimals);awaittestCoin.approve(newbathTokenAddress,attackerAmt, {from:attacker});awaittestCoin.transfer(newbathTokenAddress,attackerAmt, {from:attacker});// 3. Victim deposits a smaller amount of testCoin, receives 0 shares// In this case, we use (1 million - 1) testCoinletvictimAmt=ethers.utils.parseUnits("999999",decimals);awaittestCoin.approve(newbathTokenAddress,victimAmt, {from:victim});await_newBathToken.deposit(victimAmt,victim, {from:victim});assert.equal(await_newBathToken.balanceOf(victim),0);});
Recommended Mitigation Steps
Uniswap V2 solved this problem by sending the first 1000 LP tokens to the zero address. The same can be done in this case i.e. whentotalSupply() == 0, send the first min liquidity LP tokens to the zero address to enable share dilution.In_deposit(), ensure the number of shares to be minted is non-zero:
require(shares != 0, "No shares minted");
bghughes (Rubicon) confirmed and commented:
Great issue, what do y’all think of this code snippet as a solution:`
/// @notice Deposit assets for the user and mint Bath Token shares to receiver
function _deposit(uint256 assets, address receiver)
internal
returns (uint256 shares)
{
uint256 _pool = underlyingBalance();
uint256 _before = underlyingToken.balanceOf(address(this));// **Assume caller is depositor**underlyingToken.safeTransferFrom(msg.sender, address(this), assets);uint256 _after = underlyingToken.balanceOf(address(this));assets = _after.sub(_before); // Additional check for deflationary tokensif (totalSupply == 0) {uint minLiquidityShare = 10**3;shares = assets.sub(minLiquidityShare);// Handle protecting from an initial supply spoof attack_mint(address(0), (minLiquidityShare));} else {shares = (assets.mul(totalSupply)).div(_pool);}// Send shares to designated target_mint(receiver, shares);require(shares != 0, "No shares minted");emit LogDeposit(assets,underlyingToken,shares,msg.sender,underlyingBalance(),outstandingAmount,totalSupply);emit Deposit(msg.sender, msg.sender, assets, shares);}`
HickupHH3 (judge) commented:
LGTM :P

[H-05] BathToken LPs Unable To Receive Bonus Token Due To Lack Of Wallet Setter Method
Submitted by xiaoming90, also found by 0xNoah, PP1004, sseefried, reassor, hubble, pauliax, sashiketh, and shenwilly_
BathBuddy is a Vesting Wallet that payout withdrawers anybonusTokensthey may have accrued while staking in the Bath Token (e.g. network incentives/governance tokens).
BathBuddy Vesting Wallet releases a user their relative share of the pool’s total vested bonus token during the withdraw call on BathToken.sol. This vesting occurs linearly over Unix time.
It was observed that the BathToken LPs are unable to receive any bonus tokens from the BathBuddy Vesting Wallet during withdraw and the bonus tokens are struck in the BathBuddy Vesting Wallet.
Proof of Concept
The following shows that the address of the BathBuddy Vesting Wallet is stored in therewardsVestingWalletstate variable and it is used to call thereleasefunction to distribute bonus to the BathToken withdrawers.
https://github.com/code-423n4/2022-05-rubicon/blob/8c312a63a91193c6a192a9aab44ff980fbfd7741/contracts/rubiconPools/BathToken.sol#L629
functiondistributeBonusTokenRewards(addressreceiver,uint256sharesWithdrawn,uint256initialTotalSupply)internal{if(bonusTokens.length>0) {for(uint256index=0;index<bonusTokens.length;index++) {IERC20token=IERC20(bonusTokens[index]);// Note: Shares already burned in Bath Token _withdraw// Pair each bonus token with a lightly adapted OZ Vesting wallet. Each time a user withdraws, they//  are released their relative share of this pool, of vested BathBuddy rewards// The BathBuddy pool should accrue ERC-20 rewards just like OZ VestingWallet and simply just release the withdrawer's relative share of releaseable() tokensif(rewardsVestingWallet!=IBathBuddy(0)) {rewardsVestingWallet.release((token),receiver,sharesWithdrawn,initialTotalSupply,feeBPS);}}}}
However, there is no setter method to initialise the value of therewardsVestingWalletstate variable in the contracts. Therefore, the value ofrewardsVestingWalletwill always be zero. Note that Solidity only create a default getter for public state variable, but does not create a default setter.
SincerewardsVestingWalletis always zero, the conditionif (rewardsVestingWallet != IBathBuddy(0))will always be evaluated asfalse. Thus, the code blockrewardsVestingWallet.releasewill never be reached.
Impact
Loss of Fund for the users. BathToken LPs are not able to receive theirbonusToken.
Recommended Mitigation Steps
Implement a setter method for therewardsVestingWalletstate variable in the contracts so that it can be initialised with BathBuddy Vesting Wallet address.
bghughes (Rubicon) confirmed

[H-06] RubiconRouter _swap does not pass whole amount to RubiconMarket
Submitted by kenzo, also found by IllIllI, PP1004, blackscale, and hansfriese
When swapping amongst multiple pairs in RubiconRouter’s_swap, the fee is wrongly accounted for.
Impact
Not all of the user’s funds would be forwarded to RubiconMarket, therefore the user would lose funds.
Proof of Concept
The_swapfunction is calculating the pay amount to send to RubiconMarket.sellAllAmountto be:
currentAmount.sub(currentAmount.mul(expectedMarketFeeBPS).div(10000)
But this would lead to not all of the funds being pulled by RubiconMarket.
I mathematically show this inthis image.
The correct parameter that needs to be sent to sellAllAmount is:
currentAmount.sub(currentAmount.mul(expectedMarketFeeBPS).div(10000+expectedMarketFeeBPS)
I mathematically prove this inthis image.
Recommended Mitigation Steps
Change the parameter to the abovementioned one.
bghughes (Rubicon) confirmed
HickupHH3 (judge) commented:
For the benefit of readers who aren’t as math savvy, let’s work this out with a numerical example.Let’s assume a 1% fee:expectedMarketFeeBPS = 100.
The RubiconMarket charges and pulls this fee separately, so if I have a trade amount of 100, what would be the actual amount to pass into the function?The current implementation is100 - 1% * 100 = 100 - 1 = 99. However, if that’s the case, the market charges 1% of 99 instead, which is 0.99. Hence, the total amount used is99 + 0.99 = 99.99, leaving a dust amount of0.01.Thus, as the warden has proven mathematically, the formula should be100 - 100 * 100 / (10_000 + 100) ~= 99.0099. Then, the 1% fee charged is0.990099..., making the total approximately equal to 100 (rounding errors).

[H-07] RubiconRouter.swapEntireBalance() doesn’t handle the slippage check properly
Submitted by Ruhum, also found by IllIllI, berndartmueller, eccentricexit, blackscale, and hansfriese
TheswapEntireBalance()function allows the user to pass abuy_amt_minvalue which is the minimum number of tokens they should receive from the swap. But, the function doesn’t pass the value to the underlyingswap()function. Thus, the user’s min value will be ignored. Since that will result in unexpected outcomes where user funds might be lost, I rate this issue as HIGH.
Proof of Concept
swapEntireBalance():
functionswapEntireBalance(uint256buy_amt_min,address[]calldataroute,// First address is what is being payed, Last address is what is being boughtuint256expectedMarketFeeBPS)externalreturns(uint256) {//swaps msg.sender entire balance in the tradeuint256maxAmount=ERC20(route[0]).balanceOf(msg.sender);ERC20(route[0]).transferFrom(msg.sender,address(this),maxAmount// Account for expected fee);return_swap(maxAmount,maxAmount.sub(buy_amt_min.mul(expectedMarketFeeBPS).div(10000)),//account for feeroute,expectedMarketFeeBPS,msg.sender);}
The second parameter of the_swap()call should be the min out value. InsteadmaxAmount.sub(buy_amt_min.mul(expectedMarketFeeBPS).div(10000))is used.
Example:
amount=100buy_amt_min=99expectedMarketFeeBPS=500// 5%actualbuy_amy_min=100- (99* (500/10000)) =95.05
So instead of using99the function uses95.05which could result in the user receiving fewer tokens than they expected.
Recommended Mitigation Steps
Passbuy_amt_mindirectly to_swap().
bghughes (Rubicon) marked as duplicate:
Duplicate of#104.
HickupHH3 (judge) commented:
Not a duplicate. This has to do with applying a fee onbuy_amt_mininstead of passing the actual value directly. Lower slippage tolerance means potential loss of funds, hence the high severity.

[H-08] Ineffective ReserveRatio Enforcement
Submitted by xiaoming90, also found by shenwilly and pedroais
https://github.com/code-423n4/2022-05-rubicon/blob/8c312a63a91193c6a192a9aab44ff980fbfd7741/contracts/rubiconPools/BathPair.sol#L324
https://github.com/code-423n4/2022-05-rubicon/blob/8c312a63a91193c6a192a9aab44ff980fbfd7741/contracts/rubiconPools/BathPair.sol#L160
Background
Per whitepaper, ReserveRatio ensures that some amount of pool liquidity is present in the contract at all times. This protects the pools from overutilization by strategists and ensures that a portion of the underlying pool assets are liquid so LPs can withdraw. If the ReserveRatio is set to 50, meaning 50% of a liquidity pool’s assets must remain in the pool at all times.
However, it was possible for the strategists to bypass the Reserve Ratio restriction and utilize all the funds in the pools, causing the pools to be illiquid.
Proof of Concept
Strategists place their market making trades via theBathPair.placeMarketMakingTradesfunction. This function would first check if the pool’s reserveRatio is maintained before proceeding. If true, strategists will be allowed to place their market making trades with orders with arbitrary pay amount. Strategists could place ask and bid orders with large pay amount causing large amount of funds to be withdrawn from the pools. The root cause is that at the end of the transaction, there is no additional validation to ensure the pools are not overutilized by strategists and the reserve ratio of the pools is maintained.
https://github.com/code-423n4/2022-05-rubicon/blob/8c312a63a91193c6a192a9aab44ff980fbfd7741/contracts/rubiconPools/BathPair.sol#L324
functionplaceMarketMakingTrades(address[2]memorytokenPair,// ASSET, Then Quoteuint256askNumerator,// Quote / Assetuint256askDenominator,// Asset / Quoteuint256bidNumerator,// size in ASSETuint256bidDenominator// size in QUOTES)publiconlyApprovedStrategist(msg.sender)returns(uint256id) {// Require at least one order is non-zerorequire((askNumerator>0&&askDenominator>0) ||(bidNumerator>0&&bidDenominator>0),"one order must be non-zero");address_underlyingAsset=tokenPair[0];address_underlyingQuote=tokenPair[1];(addressbathAssetAddress,addressbathQuoteAddress) =enforceReserveRatio(_underlyingAsset,_underlyingQuote);require(bathAssetAddress!=address(0) &&bathQuoteAddress!=address(0),"tokenToBathToken error");..SNIP..// Place new bid and/or ask// Note: placeOffer returns a zero if an incomplete orderuint256newAskID=IBathToken(bathAssetAddress).placeOffer(ask.pay_amt,ask.pay_gem,ask.buy_amt,ask.buy_gem);uint256newBidID=IBathToken(bathQuoteAddress).placeOffer(bid.pay_amt,bid.pay_gem,bid.buy_amt,bid.buy_gem);..SNIP..}
https://github.com/code-423n4/2022-05-rubicon/blob/8c312a63a91193c6a192a9aab44ff980fbfd7741/contracts/rubiconPools/BathPair.sol#L160
/// @notice This function enforces that the Bath House reserveRatio (a % of underlying pool liquidity) is enforced across all pools/// @dev This function should ensure that reserveRatio % of the underlying liquidity always remains on the Bath Token. Utilization should be 1 - reserveRatio in practice assuming strategists use all available liquidity.functionenforceReserveRatio(addressunderlyingAsset,addressunderlyingQuote)internalviewreturns(addressbathAssetAddress,addressbathQuoteAddress){bathAssetAddress=IBathHouse(bathHouse).tokenToBathToken(underlyingAsset);bathQuoteAddress=IBathHouse(bathHouse).tokenToBathToken(underlyingQuote);require((IBathToken(bathAssetAddress).underlyingBalance().mul(IBathHouse(bathHouse).reserveRatio())).div(100) <=IERC20(underlyingAsset).balanceOf(bathAssetAddress),"Failed to meet asset pool reserve ratio");require((IBathToken(bathQuoteAddress).underlyingBalance().mul(IBathHouse(bathHouse).reserveRatio())).div(100) <=IERC20(underlyingQuote).balanceOf(bathQuoteAddress),"Failed to meet quote pool reserve ratio");}
Test Cases
The following is the snippet of the test case result. Reserve Ratio is initialized to 80% in this example, which means only 20% of the funds could be utilized by strategists. The BathWETH and BathDAI pools contained 1 WETH and 100 DAI respectively after users deposited their funds into the pools. At the bottom half of the output, it shows that it was possible for the strategists to utilise 90% of the funds in the pools to place an ask and bid order, which exceeded the 20% limit.
The last two lines of the output show that 90% of the funds in the pools are outstanding.
..SNIP..---------------OrderBook---------------[-]asksindex0:ask_pay_amt=0,ask_buy_amt=0[-]asksindex1:ask_pay_amt=0,ask_buy_amt=0[-]asksindex2:ask_pay_amt=0,ask_buy_amt=0[-]asksindex3:ask_pay_amt=0,ask_buy_amt=0[+]bidsindex0:bid_pay_amt=0,bid_buy_amt=0[+]bidsindex1:bid_pay_amt=0,bid_buy_amt=0[+]bidsindex2:bid_pay_amt=0,bid_buy_amt=0[+]bidsindex3:bid_pay_amt=0,bid_buy_amt=0bathAssetInstance:underlyingBalance() =1WETH,balanceOf=1WETH,OutstandingAmount=0WETHbathQuoteInstance:underlyingBalance() =100DAI,balanceOf=100DAI,OutstandingAmount=0DAIAfterPlacingOrder---------------OrderBook---------------[-]asksindex0:ask_pay_amt=0.9,ask_buy_amt=180[-]asksindex1:ask_pay_amt=0,ask_buy_amt=0[-]asksindex2:ask_pay_amt=0,ask_buy_amt=0[-]asksindex3:ask_pay_amt=0,ask_buy_amt=0[+]bidsindex0:bid_pay_amt=90,bid_buy_amt=0.9[+]bidsindex1:bid_pay_amt=0,bid_buy_amt=0[+]bidsindex2:bid_pay_amt=0,bid_buy_amt=0[+]bidsindex3:bid_pay_amt=0,bid_buy_amt=0bathAssetInstance:underlyingBalance() =1WETH,balanceOf=0.1WETH,OutstandingAmount=0.9WETHbathQuoteInstance:underlyingBalance() =100DAI,balanceOf=10DAI,OutstandingAmount=90DAI..SNIP..
Test Script can be found athttps://gist.github.com/xiaoming9090/c4fcd4e967bd7d6940429e5d8e39004d
Impact
Following are the impacts of this issue:
Underlying pool assets are overutilized by strategists, causing the pools to be illiquid. Users might not be able to withdraw their funds from the pools as the pools might not have sufficient underlying assets remained as their assets have been deployed to the Rubicon Market.Reserve Ratio is one of the key security parameters to safeguard LP’s funds so that the amount of losses the pools could potentially incur is limited. Without effective reserve ratio enforcement, strategists could deploy (“invest”) all the user capital on the Rubicon Market. If the strategist makes a loss from all their orders, the LP would incur significant loss.
Recommended Mitigation Steps
Check that the reserveRatio for each of the underlying liquidity pools (asset and quote bathTokens) is observed before and after function execution.
functionplaceMarketMakingTrades(address[2]memorytokenPair,// ASSET, Then Quoteuint256askNumerator,// Quote / Assetuint256askDenominator,// Asset / Quoteuint256bidNumerator,// size in ASSETuint256bidDenominator// size in QUOTES)publiconlyApprovedStrategist(msg.sender)returns(uint256id) {// Require at least one order is non-zerorequire((askNumerator>0&&askDenominator>0) ||(bidNumerator>0&&bidDenominator>0),"one order must be non-zero");address_underlyingAsset=tokenPair[0];address_underlyingQuote=tokenPair[1];(addressbathAssetAddress,addressbathQuoteAddress) =enforceReserveRatio(_underlyingAsset,_underlyingQuote);require(bathAssetAddress!=address(0) &&bathQuoteAddress!=address(0),"tokenToBathToken error");..SNIP..// Place new bid and/or ask// Note: placeOffer returns a zero if an incomplete orderuint256newAskID=IBathToken(bathAssetAddress).placeOffer(ask.pay_amt,ask.pay_gem,ask.buy_amt,ask.buy_gem);uint256newBidID=IBathToken(bathQuoteAddress).placeOffer(bid.pay_amt,bid.pay_gem,bid.buy_amt,bid.buy_gem);..SNIP..// Ensure that the strategist does not overutilizeenforceReserveRatio(_underlyingAsset,_underlyingQuote);}
bghughes (Rubicon) confirmed and commented:
Good issue! I believe it needs to just be moved to the end of the function. Nice catch and already implemented in practice.

[H-09]BathPair.sol#rebalancePair()can be front run to steal the pending rebalancing amount
Submitted by WatchPug
https://github.com/code-423n4/2022-05-rubicon/blob/8c312a63a91193c6a192a9aab44ff980fbfd7741/contracts/rubiconPools/BathToken.sol#L756-L759
functionunderlyingBalance()publicviewreturns(uint256) {uint256_pool=IERC20(underlyingToken).balanceOf(address(this));return_pool.add(outstandingAmount);}
https://github.com/code-423n4/2022-05-rubicon/blob/8c312a63a91193c6a192a9aab44ff980fbfd7741/contracts/rubiconPools/BathToken.sol#L294-L303
functionremoveFilledTradeAmount(uint256amt)externalonlyPair{outstandingAmount=outstandingAmount.sub(amt);emitLogRemoveFilledTradeAmount(IERC20(underlyingToken),amt,underlyingBalance(),outstandingAmount,totalSupply);}
ForBathToken, there will be non-underlyingToken assets sitting on the contract that have filled to the contract and are awaiting rebalancing by strategists.
We assume the rebalance will happen periodically, between one rebalance to the next rebalance,underlyingBalance()will decrease over time as the orders get filled, so that the price per share will get lower while the actual equity remain relatively stable. This kind of price deviation will later be corrected by rebalancing.
Every time aBathPair.sol#rebalancePair()get called, there will be a surge of price per share for theBathToken, as a certain amount ofunderlyingTokenwill be transferred into the contract.
This enables a well known attack vector, which allows the pending yields to be stolen by front run the strategist’sBathPair.sol#rebalancePair()transaction, deposit and take a large share of the vault, andwithdraw()right after therebalancePair()transaction for instant profit.
Proof of Concept
Given:
CurrentunderlyingBalance()is100,000 USDC;Pending rebalancing amount is1000 USDC;strategistcallsrebalancePair();The attacker sends a deposit tx with a higher gas price to deposit100,000 USDC, take 50% share of the pool;After the transaction in step 1 is mined, the attacker callswithdraw()and retireve100,500 USDC.
As a result, the attacker has stolen half of the pending yields in about 1 block of time.
Recommendation
Consider adding a new variable to track rebalancingAmount onBathToken.
BathTokenshould be notified for any pending rebalancing amount changes viaBathPairin order to avoid sudden surge of pricePerShare overrebalancePair().
rebalancingAmountshould be considered as part ofunderlyingBalance().
bghughes (Rubicon) disputed and marked as duplicate:
Bad issue due to#344#43#74
HickupHH3 (judge) commented:
It’s kinda like the flip side to#341, where an incoming deposit benefits by frontrunning.#221briefly mentions it: “Similar problem also affect the deposit function since it relies on the proper accounting of the underlying balance or outstanding amount too. The amount of BathToken (e.g. BathWETH) that depositer received might affected.”In this case, a depositor can execute the frontrun attack vector existseven if the strategist is actively rebalancing.  Hence, the high severity rating is justified.

[H-10]BathToken.sol#_deposit()attacker can mint more shares with re-entrancy from hookable tokens
Submitted by WatchPug
BathToken.sol#_deposit()calculates the actual transferred amount by comparing the before and after balance, however, since there is no reentrancy guard on this function, there is a risk of re-entrancy attack to mint more shares.
Some token standards, such as ERC777, allow a callback to the source of the funds (thefromaddress) before the balances are updated intransferFrom(). This callback could be used to re-enter the function and inflate the amount.
https://github.com/code-423n4/2022-05-rubicon/blob/8c312a63a91193c6a192a9aab44ff980fbfd7741/contracts/rubiconPools/BathToken.sol#L557-L568
function_deposit(uint256assets,addressreceiver)internalreturns(uint256shares){uint256_pool=underlyingBalance();uint256_before=underlyingToken.balanceOf(address(this));// **Assume caller is depositor**underlyingToken.transferFrom(msg.sender,address(this),assets);uint256_after=underlyingToken.balanceOf(address(this));assets=_after.sub(_before);// Additional check for deflationary tokens...
Proof of Concept
With a ERC777 token by using the ERC777TokensSendertokensToSendhook to re-enter thedeposit()function.
Given:
underlyingBalance():100_000e18 XYZ.totalSupply:1e18
The attacker can create a contract withtokensToSend()function, then:
deposit(1)
-   preBalance  = `100_000e18`;-   `underlyingToken.transferFrom(msg.sender, address(this), 1)`
reenter usingtokensToSendhook for the 2nd call:deposit(1_000e18)preBalance  =100_000e18;underlyingToken.transferFrom(msg.sender, address(this), 1_000e18)postBalance =101_000e18;assets (actualDepositAmount) =101_000e18 - 100_000e18 = 1_000e18;mint1000shares;continue with the firstdeposit()call:underlyingToken.transferFrom(msg.sender, address(this), 1)postBalance =101_000e18 + 1;assets (actualDepositAmount) =(101_000e18 + 1) - 100_000e18 = 1_000e18 + 1;mint1000shares;
As a result, with only1 + 1_000e18transferred to the contract, the attacker minted2_000e18 XYZworth of shares.
Recommendation
Consider addingnonReentrantmodifier from OZ’sReentrancyGuard.
bghughes (Rubicon) marked as duplicate and commented:
Duplicate of#283#410. Note that no ERC777 tokens will be created and this will be patched, making it a non-issue in practice.
HickupHH3 (judge) commented:
Not sure what is meant by “no ERC777 tokens will be created”, since it’s transferring the underlying token which is an arbitrary ERC20, and by extension, ERC777.The best practice is to break the CEI pattern for deposits and perform the interaction first. Or simply add reentrancy guards.
bghughes (Rubicon) confirmed

