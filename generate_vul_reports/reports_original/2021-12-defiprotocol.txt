[H-01] Wrong fee calculation aftertotalSupplywas 0
Submitted by kenzo
handleFeesdoes not updatelastFeeifstartSupply == 0.
This means that wrongly, extra fee tokens would be minted once the basket is resupplied andhandleFeesis called again.
Impact
Loss of user funds.
The extra minting of fee tokens comes on the expense of the regular basket token owners, which upon withdrawal would get less underlying than their true share, due to the dilution of their tokens’ value.
Proof of Concept
Scenario:
All basket token holders are burning their tokens. The last burn would set totalSupply to 0.After 1 day, somebody mints basket tokens.
handleFeeswould be called upon mint, and would just return since totalSupply == 0. Note: It does not updatelastFee.
} else if (startSupply == 0) {return;
Basket.sol#L136:#L137
The next block, somebody else mints a token. NowhandleFeeswill be called and will calculate the fees according to the current supply and the time diff between now andlastFee:
uint256 timeDiff = (block.timestamp - lastFee);
Basket.sol#L139But as we saw,lastFeewasn’t updated in the previous step.lastFeeis still the time of 1 day before - when the last person burned his tokens and the basket supply was 0.
So now the basket will mint fees as if a whole day has passed since the last calculation, but actually it only needs to calculate the fees for the last block, since only then we had tokens in the basket.
Recommended Mitigation Steps
SetlastFee = block.timestampifstartSupply == 0.
frank-beard (Kuiper) confirmed
0xleastwood (judge) commented:
The issue can be outlined as follows:A user interacts with the basket and mints some amount of tokens, which setslastFee = block.timestamp.The same user decides to exit the basket and burn their tokens.Some amount of time passes and another user enters the basket, buthandleFees()did not setlastFee = block.timestamp. As a result, fees are charged on the user’s deposit for the entire time that the basket was inactive for.It seems that the basket is severely flawed in calculating fees on partially inactive baskets. This puts users’ funds at direct risk of being lost. Malicious publishers can setup baskets as a sort of honeypot to abuse this behaviour.This was an interesting find! Kudos to the warden.

