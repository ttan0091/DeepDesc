[H-00] ERC-721 Enumerable Spec mismatch for index oftokenByIndex()function
Index starts at 0 for token array, but the implementation here requires index to be greater than 0. This will prevent querying of tokens at index 0.
Seereference implementation.
This will impact compatibility with NFT platforms that expect full conformity with ERC-721 specification.
Recommend accepting 0 index by changing torequire(index >= 0 && index < TOKEN_LIMIT);.
dangerousfood (Meebits) commented:
Beebots indexes by 1 for whatever reason
[H-01] Signature malleability of EVM’secrecoverinverify()
EVM’secrecoveris susceptible to signature malleability, which allows replay attacks, but that is mitigated here by tracking accepted offers and canceling them (on L645) specifically to prevent replays. However, if any application logic changes, it might make signature malleability a risk for replay attacks.
Seereference.
Recommend usingOpenZeppelin’s ECDSA library
[H-02] Arbitrary Transfer of Unowned NFTs
Due to how the market functions are structured, it is possible to arbitrarily transfer any NFT that is not owned by any address.
The function in question is thetradeValidfunction invoked byacceptTradebefore the trade is performed. It, in turn, validates the signature of a trade viaverify, which does not account for the behavior ofecrecover.
Whenecrecoveris invoked with an invalid signature, the zero-address is returned by it, meaning thatverifywill yieldtruefor the zero-address as long as the signature provided is invalid.
This can be exploited to transfer any NFT whoseidToOwneris zero, including NFTs that have not been minted yet.
Recommend an additional check be imposed withinverifythat ensures the signer is not the zero-address which will alleviate this check. For more details, consult theEIP721 implementation by OpenZeppelin.
[H-03]Beebots.TradeValid()Will Erroneously Return True When Maker Is Set ToAddress(0)andmakerIdsAre Set To TheTokenIdsof Unminted Beebot NFTs
Beebots.TradeValid()will erroneously return true whenmakeris set toaddress(0)andmakerIdsare set to thetokenIdsof unminted beebot NFTs.
Beebots.verify()returns true no matter what signature is given when signer is set toaddress(0). This means thatBeeBots.tradeValid()will erroneously return true whenmakeris set toaddress(0).
Finally, before an NFT has even been minted at all, it is assumed to have an owner ofaddress(0)due to theidToOwnermapping being initialized to zero for all uninitialized slots, so an attacker can calltradeValid()withmakerset toaddress(0)andmakerIdsset to thetokenIdsof any unmintednftIds, andtradeValid()will erroneously return true.
(1)Beebots.verify()returns true no matter what signature is given when signer is set toaddress(0).(1a)BeeBots.verify()does not check to ensure that signer is notaddress(0).(1b) This is a problem becauseecrecoverfails silently if the signature does not match and returns zero.(1c) So if an attacker passes inaddress(0)as the signer, then verify will return true no matter what signature is provided, sinceecrecoverwill returnaddress(0), and the signer isaddress(0), so verify will pass.(1d) This means thatBeeBots.tradeValid()will erroneously return true when maker is set toaddress(0).(2) Before an NFT has even been minted at all, it is assumed to have an owner ofaddress(0)due to theidToOwnermapping being initialized to zero for all uninitialized slots(2a) Solidity initializes all mappings to 0 for all slots that have not yet been set.(2b) So for any NFT ID that has not yet been minted, the corresponding owner in the mappingBeeBots.idToOwnerisaddress(0), even though that NFT should not even exist.(2c) This means that an attacker can calltradeValid()with maker set toaddress(0)and makerIds set to any unminted nftIds, andtradeValid()will erroneously return true.
(1) Recommend adding this check toBeebots.verify():require(signer != address(0), "Cannot verify signatures from 0x0");
(2) Recommend adding this check toBeebots.tradeValid():require(maker != address(0), "Maker 0x0 not allowed");
dangerousfood (Meebits) commented:
Wow, this exploit is absolutely stunning.
[H-04] functiontokenByIndextreats last index as invalid
NFT indexes start from 0:
// Don't allow a zero index, start counting at 1returnvalue.add(1);
So if there are 30 tokens, indexes would be 1-30. However, functiontokenByIndexsets such boundaries:
require(index>0&&index<TOKEN_LIMIT);
This means that the last token (with index 30 in this case) will not be valid.
Recommend using:
require(index>0&&index<=TOKEN_LIMIT);
dangerousfood (Meebits) commented:
Beebots is indexing by 1
[H-05] NFT can be minted for free after sale ended
ThegetPrice()function returned 0 after the sale ended and (SALE_LIMIT - numSales) NFT can be minted for free.
Without documentation, it’s not clear if this is the expected behavior or not. If it’s unexpected, it is recommended to revert instead of returning 0. If it’s expected behavior, it’s possible to create a smart contract and claim all the remaining NFT front-running the regular users.
