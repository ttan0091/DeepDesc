[H-01]IndexLogic: An attacker can mint tokens for himself using assets deposited by other users
Submitted by cccz, also found by hyh, Kenshin, pedroais, and TrungOre
In the mint function of the IndexLogic contract, users are required to transfer assets to vToken in advance, and then call the mint function to mint tokens.
The attacker can monitor the asset balance in the vToken contract. When the balance is greater than lastBalance, the attacker can call the mint function to mint tokens for himself.
Proof of Concept
IndexLogic.sol#L48
Recommended Mitigation Steps
Call the transferfrom function in the mint function of the IndexLogic contract to transfer the user’s assets.
olivermehr (Phuture Finance) disputed
jn-lp (Phuture Finance) commented:
We don’t expect users to directly call the Mint/Burn functions on Index. Instead, they should use the Router contract, as our frontend does.
moose-code (judge) commented:
There is no mention of the router contract in the contest documentation and this is unreasonable for wardens to know about the Router.
We would like wardens to focus on any core functional logic, boundary case errors or similar issues which could be utilized by an attacker to take funds away from clients who have funds deposited in the protocol.
This a core logic error that could be used to take funds away from clients and given there is no mention of the router and only part of the code is submitted, I am siding with the wardens on this and awarding in full.

[H-02]UniswapV2PriceOracle.solcurrentCumulativePrices()will revert whenpriceCumulativeaddition overflow
Submitted by WatchPug
UniswapV2PriceOracle.sol#L62
(uintprice0Cumulative,uintprice1Cumulative,uint32blockTimestamp) =address(pair).currentCumulativePrices();
Because the Solidity version used by the current implementation ofUniswapV2OracleLibrary.solis>=0.8.7, and there are some breaking changes in Solidity v0.8.0:
Arithmetic operations revert on underflow and overflow.
Ref:https://docs.soliditylang.org/en/v0.8.13/080-breaking-changes.html#silent-changes-of-the-semantics
While inUniswapV2OracleLibrary.sol, subtraction overflow is desired atblockTimestamp - blockTimestampLastincurrentCumulativePrices():
https://github.com/Uniswap/v2-periphery/blob/master/contracts/libraries/UniswapV2OracleLibrary.sol#L25-L33
if(blockTimestampLast!=blockTimestamp) {// subtraction overflow is desireduint32timeElapsed=blockTimestamp-blockTimestampLast;// addition overflow is desired// counterfactualprice0Cumulative+=uint(FixedPoint.fraction(reserve1,reserve0)._x) *timeElapsed;// counterfactualprice1Cumulative+=uint(FixedPoint.fraction(reserve0,reserve1)._x) *timeElapsed;}
In another word,Uniswap/v2-periphery/contracts/libraries/UniswapV2OracleLibraryonly works at solidity <0.8.0.
As a result, whenprice0Cumulativeorprice1Cumulativeis big enough,currentCumulativePriceswill revert due to overflow.
Impact
Since the overflow is desired in the original version, and it’s broken because of using Solidity version >0.8. TheUniswapV2PriceOraclecontract will break when the desired overflow happens, and further breaks other parts of the system that relies onUniswapV2PriceOracle.
Recommended Mitigation Steps
Note: this recommended fix requires a fork of the library contract provided by Uniswap.
Change to:
if(blockTimestampLast!=blockTimestamp) {unchecked{// subtraction overflow is desireduint32timeElapsed=blockTimestamp-blockTimestampLast;// addition overflow is desired// counterfactualprice0Cumulative+=uint(FixedPoint.fraction(reserve1,reserve0)._x) *timeElapsed;// counterfactualprice1Cumulative+=uint(FixedPoint.fraction(reserve0,reserve1)._x) *timeElapsed;}}
jn-lp (Phuture Finance) confirmed and resolved

