[H-01] implicit underflows
Submitted by gpersoon, also found by cmichel
There are a few underflows that are converted via a typecast afterwards to the expected value. If solidity 0.8.x would be used, then the code would revert.
int256(a-b)where a and b are uint: For example, ifa=1andb=2, then the intermediate result would beuint(-1) == 2**256-1int256(-x)where x is a uint. For example, ifx=1, then the intermediate result would beuint(-1) == 2**256-1
It’s better not to have underflows by using the appropriate typecasts. This is especially relevant when moving to solidity 0.8.x.
FromExposure.solL178:
functionsortVaultsByDelta(..)..for(uint256i=0;i<N_COINS;i++) {// Get difference between vault current assets and vault targetint256delta=int256(unifiedAssets[i] -unifiedTotalAssets.mul(targetPercents[i]).div(PERCENTAGE_DECIMAL_FACTOR));// underflow in intermediate result
FromPnL.solL112:
functiondecreaseGTokenLastAmount(boolpwrd,uint256dollarAmount,uint256bonus).....emitLogNewGtokenChange(pwrd,int256(-dollarAmount));// underflow in intermediate result
FromBuoy3Pool.solL87:
functionsafetyCheck()externalviewoverridereturns(bool) {..._ratio=abs(int256(_ratio-lastRatio[i]));// underflow in intermediate result
Recommend replacingint256(a-b)withint256(a)-int256(b), and replacingint256(-x)with-int256(x)
kristian-gro (Gro) confirmed but disagreed with severity:
Confirmed and We’ve mitigated this issue in our release version.
ghoul-sol (Judge) commented:
Majority of overflow listed above seems low risk with one exception ofsafetyCheck. Underflow is a real risk here.safetyCheckis run every time a deposit is made. Ratios can change and the change does not need to be substantial for it to overflow. For that reason it’s a high risk.
[H-02]Buoy3Pool.safetyCheckis not precise and has some assumptions
Submitted by cmichel, also found by shw
ThesafetyCheckfunction has several issues that impact how precise the checks are:
Only checks if thea/banda/cratios are withinBASIS_POINTS.
By transitivity,b/cis only within2 * BASIS_POINTSifa/banda/care in range.
For a more precise check whether both USDC and USDT are within range,b/cmust be checked as well.Ifa/bis within range, this does not imply thatb/ais within range.“inverted ratios, a/b bs b/a, while producing different results should both reflect the same change in any one of the two underlying assets, but in opposite directions”Example:lastRatio = 1.0ratio: a = 1.0, b = 0.8=>a/b = 1.25,b/a = 0.8Ifa/bwas used with a 20% range, it’d be out of range, butb/ais in range.The NatSpec for the function states that it checks Curve and an external oracle, but no external oracle calls are checked, both_ratioandlastRatioare only from Curve. Only_updateRatioschecks the oracle.
To address this issue, it is recommended to check ifb/cis withinBASIS_POINTS.
kristian-gro (Gro) confirmed but disagreed with severity:
Makes strong assumption about the range of possible values - small differences between a and b will result in small differences between a/b and b/a - Extreme cases are handled by emergency. Agree on b/c check
kristian-gro (Gro) commented:
medium severity - will only cause stop of deposits/withdrawals against curve, work around to put in emergency mode
kristian-gro (Gro) commented:
Acknowledged, but the differences between variables are in basis points, we’ve simulated flash loan manipulations of curve and come to the conclusion that this approximation has a sufficiently small error margin to not cause issues.
The B/C check (usdc/usdt) has been added in release version.
ghoul-sol (Judge) commented:
A possibility of stopping deposits or withdrawals deserves high risk.
[H-03] Incorrect use of operator leads to arbitrary minting of GVT tokens
Submitted by 0xRajeev, also found by pauliax and gpersoon
ThedistributeStrategyGainLoss()function distributes any gains or losses generated from a harvest and is expected to be called only by valid protocol vault adaptors. It is an externally visible function and the access control is indirectly enforced onmsg.senderby checking thatvaultIndexes[msg.sender]is a valid index range 1-4. However, the operator used in therequire()is||instead of&&, which allows an arbitrarymsg.sender, i.e. attacker, to bypass the check.
Scenario: An arbitrary non-vault address calling this function will get an index of 0 because of default mapping value invaultIndexes[msg.sender], which will fail the> 0check, but pass the<= N_COINS + 1check (N_COINS = 3) because0 <= 4which will allow control to go past this check.
Furthermore, on L362,index=0will underflow the -1 decrement (due to lack ofSafeMath.suband use of < 0.8.0 solc) and the index will be set to(uint256_MAX - 1). This will allow execution to proceed to the “else” part of conditional meant for curve LP vault. Therefore, this will allow any random address to call this function with arbitrary values of gain/loss and distribute arbitrary gain/loss appearing to come from Curve vault.
The attack control flow:
->Controller.distributeStrategyGainLoss(ARBITRARY_HIGH_VALUE_OF_GAIN, 0)->index = 0passes check for theindex <= N_COINS + 1part of predicate on L357 inController.sol->index = uint256_MAXafter L362->gainUsd = ibuoy.lpToUsd(ARBITRARY_HIGH_VALUE_OF_GAIN);on L371 inController.sol->ipnl.distributeStrategyGainLoss(gainUsd, lossUsd, reward);on L376 inController.sol->(gvtAssets, pwrdAssets, performanceBonus) = handleInvestGain(lastGA, lastPA, gain, reward);on L254 inPnL.sol->performanceBonus = profit.mul(performanceFee).div(PERCENTAGE_DECIMAL_FACTOR);on L186 ofPnL.sol->gvt.mint(reward, gvt.factor(gvtAssets), performanceBonus);on L256 inPnL.sol
Recommend changing||to&&inrequire()on L357 ofController.solto prevent arbitrary addresses from going past this check. Or, consider exercising explicit access control for the authorized vault adaptors.
kristian-gro (Gro) confirmed
Confirmed and Fix has been implemented in release version.
[H-04]sortVaultsByDeltadoesn’t work as expected
Submitted by gpersoon, also found by shw
The functionsortVaultsByDeltadoesn’t always work as expected.
Suppose all the delta’s are positive, and delta1 >= delta2 >= delta3 > 0. ThenmaxIndex = 0. And(delta < minDelta (==0) )is never true, sominIndex = 0.
Then (assumingbigFirst==true):
vaultIndexes[0] =maxIndex=0vaultIndexes[2] =minIndex=0vaultIndexes[1] =N_COINS-maxIndex-minIndex=3-0-0=3
This is clearly not what is wanted, allvaultIndexesshould be different and should be in the range [0..2]. This is due to the fact thatmaxDeltaandminDeltaare initialized with the value 0. This all could results in withdrawing from the wrong vaults and reverts (becausevaultIndexes[1]  is out of range).
Exposure.solL178:
functionsortVaultsByDelta(boolbigFirst,uint256unifiedTotalAssets,uint256[N_COINS]calldataunifiedAssets,uint256[N_COINS]calldatatargetPercents)externalpureoverridereturns(uint256[N_COINS]memoryvaultIndexes) {uint256maxIndex;uint256minIndex;int256maxDelta;int256minDelta;for(uint256i=0;i<N_COINS;i++) {// Get difference between vault current assets and vault targetint256delta=int256(unifiedAssets[i] -unifiedTotalAssets.mul(targetPercents[i]).div(PERCENTAGE_DECIMAL_FACTOR));// Establish orderif(delta>maxDelta) {maxDelta=delta;maxIndex=i;}elseif(delta<minDelta) {minDelta=delta;minIndex=i;}}if(bigFirst) {vaultIndexes[0] =maxIndex;vaultIndexes[2] =minIndex;}else{vaultIndexes[0] =minIndex;vaultIndexes[2] =maxIndex;}vaultIndexes[1] =N_COINS-maxIndex-minIndex;}
Recommend the following
InitializingmaxDeltaandminDelta:int256maxDelta= -2**255;// or type(int256).min when using a newer solidity versionint256minDelta=2**255;// or type(int256).max when using a newer solidity versionCheck thatmaxIndexandminIndexare not the samerequire (maxIndex!=minIndex);
kristian-gro (Gro) confirmed:
Confirmed and Fix has been implemented in release version.
