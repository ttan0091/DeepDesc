[H-01] Reentrancy issue with thewithdrawmethod of USDC. All tokens could be drained.
Submitted bySanketKogekar, also found byak1andemerald7017
https://github.com/code-423n4/2023-07-amphora/blob/daae020331404647c661ab534d20093c875483e1/core/solidity/contracts/core/USDA.sol#L147-L157https://github.com/code-423n4/2023-07-amphora/blob/daae020331404647c661ab534d20093c875483e1/core/solidity/contracts/core/USDA.sol#L114
Impact
High: All USDC tokens could be drained from the protocol.
Proof of Concept
There is a reentrancy issue with the ‘withdraw’ methods of USDC.
A user could call either of the external withdraw functions:withdraworwithdrawTo.
Which further calls_withdraw();which basically burns the user’s token and transfers user the_susdAmount. The exchange is 1 to 1.
functionwithdraw(uint256_susdAmount)externaloverride{_withdraw(_susdAmount,_msgSender());}
function_withdraw(uint256_susdAmount,address_target)internalpaysInterestwhenNotPaused{if(reserveAmount==0)revertUSDA_EmptyReserve();if(_susdAmount==0)revertUSDA_ZeroAmount();if(_susdAmount>this.balanceOf(_msgSender()))revertUSDA_InsufficientFunds();// Account for the susd withdrawnreserveAmount-=_susdAmount;sUSD.transfer(_target,_susdAmount);_burn(_msgSender(),_susdAmount);emitWithdraw(_target,_susdAmount);}
The issue is that the_withdraw()function does not follow the CEI pattern and fails to update the state (burning token in this case) before the token transfer.
sUSD.transfer(_target,_susdAmount);_burn(_msgSender(),_susdAmount);
It is possible to re-enter the functionUSDC.withdraw()from the malicious attack contract’s fallback function as soon as it recieves the transfered amount.
This will again hit the attacker contract’s fallback function (with the withdrawn token amount) and repeat the flow until USDA tokens from contract are completely drained.
https://github.com/code-423n4/2023-07-amphora/blob/daae020331404647c661ab534d20093c875483e1/core/solidity/contracts/core/USDA.sol#L147-L157
Recommended Mitigation Steps
This could be prevented by first burning the user’s tokens or using a Mutex / Re-entrancy guard from OpenZeppelin lib.
Assessed type
Reentrancy

[H-02] crvRewardsContractgetRewardcan be called directly, breaking vaultsclaimRewardsfunctionallity
Submitted bysaid, also found byminhtrng
crvRewardsContract of convex can be called by anyone on behalf of Vault, this will allow malicious users to callgetRewardand break the VaultclaimRewardsfunctionality.
Proof of Concept
Convex rewarded allow anyone to callgetRewardon behalf of any users:
https://github.com/convex-eth/platform/blob/main/contracts/contracts/BaseRewardPool.sol#L263-L279
This will break VaultclaimRewardsfunctionality that depends on thisgetReward:
https://github.com/code-423n4/2023-07-amphora/blob/main/core/solidity/contracts/core/Vault.sol#L164-L229
functionclaimRewards(address[]memory_tokenAddresses)externaloverrideonlyMinter{uint256_totalCrvReward;uint256_totalCvxReward;IAMPHClaimer_amphClaimer=CONTROLLER.claimerContract();for(uint256_i;_i<_tokenAddresses.length;) {IVaultController.CollateralInfomemory_collateralInfo=CONTROLLER.tokenCollateralInfo(_tokenAddresses[_i]);if(_collateralInfo.tokenId==0)revertVault_TokenNotRegistered();if(_collateralInfo.collateralType!=IVaultController.CollateralType.CurveLPStakedOnConvex) {revertVault_TokenNotCurveLP();}IBaseRewardPool_rewardsContract=_collateralInfo.crvRewardsContract;uint256_crvReward=_rewardsContract.earned(address(this));if(_crvReward!=0) {// Claim the CRV reward_totalCrvReward+=_crvReward;_rewardsContract.getReward(address(this),false);_totalCvxReward+=_calculateCVXReward(_crvReward);}...}
This will allow malicious users to callgetRewardon behalf of Vaults, and basically prevent them to mint get the rewards and get the deserved AMPH tokens.
Recommended Mitigation Steps
Create another functionality inside Vault that similar toclaimRewards, but used CVX, CRV balance inside the contract, to perform the AMPH claim and claim the rewards.
0xShaito (Amphora) confirmed and commented:
True! We will fix this.Impact of the attack would be the loss of the rewards. No user deposits at risk.

[H-03] Rounding error inWUSDAcan result in loss of user funds, especially when manipulated by an attacker
Submitted bygiovannidisiena, also found bygiovannidisiena,mert_eren,pep7siup,Bauchibred, qpzm (1,2,3), said (1,2), Giorgio (1,2),ljmanini,Musaka, SpicyMeatball (1,2), 0xbranded (1,2),0xComfyCat, 0xWaitress (1,2),erebus, kutugu (1,2),josephdara,adeolu,ak1, andSanketKogekar
Due to floor rounding in Solidity, it is possible for rounding errors to affect functions in theWUSDAcontract.
Specifically, whenWUSDA::_usdaToWUSDAis invoked internally, if_usdaAmountis sufficiently small compared withMAX_wUSDA_SUPPLY(10M) and the total USDA supply then it is possible for the_wusdaAmountreturn value to round down to 0.
function_usdaToWUSDA(uint256_usdaAmount,uint256_totalUsdaSupply)privatepurereturns(uint256_wusdaAmount) {_wusdaAmount= (_usdaAmount*MAX_wUSDA_SUPPLY) /_totalUsdaSupply;}
When calling theWUSDA::deposit/depositTofunctions, which call the internalWUSDA::_depositfunction with this rounded_wusdaAmountvalue, the implication is that depositors could receive little/no WUSDA for their USDA. Additionally, calls to theWUSDA::withdraw/withdrawTofunctions could be process without actually burning any WUSDA. This is clearly not desirable as USDA can be subsequently redeemed for sUSD (at the expense of the protocol reserves and its other depositors).
functiondeposit(uint256_usdaAmount)externaloverridereturns(uint256_wusdaAmount) {_wusdaAmount=_usdaToWUSDA(_usdaAmount,_usdaSupply());_deposit(_msgSender(),_msgSender(),_usdaAmount,_wusdaAmount);}functionwithdraw(uint256_usdaAmount)externaloverridereturns(uint256_wusdaAmount) {_wusdaAmount=_usdaToWUSDA(_usdaAmount,_usdaSupply());_withdraw(_msgSender(),_msgSender(),_usdaAmount,_wusdaAmount);}
Even when the USDA supply is sufficiently small to avoid this issue, an attacker could still utilize a sUSD flash loan to artificially inflate the USDA total supply which causes the down rounding, potentially front-running a victim such that their deposit is processed without minting any WUSDA and then withdrawing the inflated USDA supply to repay the flash loan.
Proof of Concept
normal case:
Total USDA supply is 10B.Alice callsWUSDA::depositwith_usdaAmountof 1e23 (10_000 tokens)._wusdaAmountis rounded down to 1e20/100 tokens (1e23 * 1e25 / 1e28 = 1e20).Alice receives 100 WUSDA rather than 10_000.In reality, the total supply of sUSD is around 40M, so a more realistic scenario assuming 10M total USDA supply may be that Alice deposits 10e18 and receives 1 WUSDA or 1/10th the expected amount (10e18 * 1e25 / 1e26 = 1e18).
flash loan & attacker front-running case:
Total USDA supply is 1M.Alice callsWUSDA::depositwith_usdaAmountof 9.9e22 (99_000 tokens).Attacker front-runs this transaction and callsWUSDA::depositwith_usdaAmountof 3.3e22 (33_000 tokens).Attacker receives 33_000 WUSDA.Attacker takes out a sUSD flash loan of 39M.Attacker deposits 39M sUSD into USDA.Alice’s transaction is included here, but_wusdaAmountis rounded down to 24_750 tokens (9.9e22 * 1e25 / 4e25 = 2.475e22).Alice receives 24_750 WUSDA rather than 99_000 (only 1/4 of the expected amount).Attacker backruns Alice’s transaction and callsWUSDA::withdrawwith_usdaAmountof 132e21 (132_000 tokens).Using the same rounding logic,_wusdaAmountis rounded down to 33_000 tokens (132e21 * 1e25 / 4e25 = 33e22).Attacker withdraws 132_000 WUSDA and receives the 99_000 USDA deposited by Alice in addition to their original 33_000.Attacker redeems USDA, repays the flash loan and profits 90_000 USDA/sUSD at the expense of Alice.
Recommended Mitigation Steps
Consider reverting if eitherWUSDA::_usdaToWUSDAorWUSDA::_wUSDAToUSDAreturn a zero value. Also consider multiplication by some scalar precision amount. Protections against manipulation of USDA total supply within a single block would also be desirable, perhaps achievable by implementing some multi-block delay.
0xShaito (Amphora) confirmed

