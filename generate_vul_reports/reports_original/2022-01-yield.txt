[H-01] Malicious Users Can Duplicate Protocol Earned Yield By TransferringwCVXTokens To Another Account
Submitted by leastwood, also found by kenzo
ConvexYieldWrapper.solis a wrapper contract for staking convex tokens on the user’s behalf, allowing them to earn rewards on their deposit. Users will interact with theLadle.solcontract’sbatch()function which:
Approves Ladle to move the tokens.Transfers the tokens toConvexYieldWrapper.sol.Wraps/stakes these tokens.Updates accounting and produces debt tokens withinLadle.sol.
Duringwrap()andunwrap()actions,_checkpoint()is used to update the rewards for thefrom_andto_accounts. However, thereferencecontract implements a_beforeTokenTransfer()function which has been removed from Yield Protocol’s custom implementation.
As a result, it is possible to transferwCVXtokens to another account after an initial checkpoint has been made. By manually callinguser_checkpoint()on the new account, this user is able to update its deposited balance of the new account while the sender’s balance is not updated. This can be repeated to effectively replicate a user’s deposited balance over any number of accounts. To claim yield generated by the protocol, the user must only make sure that the account callinggetReward()holds the tokens for the duration of the call.
Proof of Concept
The exploit can be outlined through the following steps:
Alice receives 100wCVXtokens from the protocol after wrapping their convex tokens.At that point in time,_getDepositedBalance()returns 100 as its result. A checkpoint has also been made on this balance, giving Alice claim to her fair share of the rewards.Alice transfers her tokens to her friend Bob who then manually callsuser_checkpoint()to update his balance.Now from the perspective of the protocol, both Alice and Bob have 100wCVXtokens as calculated by the_getDepositedBalance()function.If either Alice or Bob wants to claim rewards, all they need to do is make sure the 100wCVXtokens are in their account upon callinggetReward(). Afterwards, the tokens can be transferred out.
Tools Used
Manual code review.
Discussion/confirmation with the Yield Protocol team.
Recommended Mitigation Steps
Consider implementing the_beforeTokenTransfer()function as shown in thereferencecontract. However, it is important to ensure the wrapper contract and collateral vaults are excluded from the checkpointing so they are not considered in the rewards calculations.
alcueca (Yield) confirmed and commented:
Confirmed. The fact that rewards can be drained also means that users lose on their expected rewards, so I think that Sev 3 is right.
iamsahu (Yield) resolved
Alex the Entreprenerd (judge) commented:
In systems that track growing rewards, anytime a user balances changes, it’s important to recalculate their balances as to properly distribute pending rewards and to influence the future-rate at which rewards will be distributed (process generally calledaccruing)In the case of the ConvexYieldWrapper, the warden has shown that because thewCVXtoken doesn’t perform a_checkpointon each transfer, a malicious attacker could repeatedly transfer their tokens in order to reuse the same balance in multiple accounts, effectively sybil attacking the protocol.The fix seems to be straightforward, however the impact of the finding breaks the accounting of the protocol, as such I believe High Severity to be appropraite
Alex the Entreprenerd (judge) commented:
The sponsor has mitigated in a subsequent PR by overriding the_transferfunction

[H-02] Malicious Users Can Transfer Vault Collateral To Other Accounts To Extract Additional Yield From The Protocol
Submitted by leastwood
ConvexYieldWrapper.solis a wrapper contract for staking convex tokens on the user’s behalf, allowing them to earn rewards on their deposit. Users will interact with theLadle.solcontract’sbatch()function which:
Approves Ladle to move the tokens.Transfers the tokens toConvexYieldWrapper.sol.Wraps/stakes these tokens.Updates accounting and produces debt tokens withinLadle.sol.
_getDepositedBalance()takes into consideration the user’s total collateral stored in all of their owned vaults. However, as a vault owner, you are allowed to give the vault to another user, move collateral between vaults and add/remove collateral. Therefore, it is possible to manipulate the result of this function by checkpointing one user’s balance at a given time, transferring ownership to another user and then create a new checkpoint with this user.
As a result, a user is able to generate protocol yield multiple times over on a single collateral amount. This can be abused to effectively extract all protocol yield.
Proof of Concept
Consider the following exploit scenario:
Alice owns a vault which has 100 tokens worth of collateral.At that point in time,_getDepositedBalance()returns 100 as its result. A checkpoint has also been made on this balance, giving Alice claim to her fair share of the rewards.Alice then callsLadle.give(), transferring the ownership of the vault to Bob and callsConvexYieldWrapper.addVault().Bob is able to calluser_checkpoint()and effectively update their checkpointed balance.At this point in time, both Alice and Bob have claim to any yield generated by the protocol, however, there is only one vault instance that holds the underlying collateral.
https://github.com/code-423n4/2022-01-yield/blob/main/contracts/ConvexYieldWrapper.sol#L100-L120
function_getDepositedBalance(addressaccount_)internalviewoverridereturns(uint256) {if(account_==address(0) ||account_==collateralVault) {return0;}bytes12[]memoryuserVault=vaults[account_];//add up all balances of all vaults registered in the wrapper and owned by the accountuint256collateral;DataTypes.Balancesmemorybalance;uint256userVaultLength=userVault.length;for(uint256i=0;i<userVaultLength;i++) {if(cauldron.vaults(userVault[i]).owner==account_) {balance=cauldron.balances(userVault[i]);collateral=collateral+balance.ink;}}//add to balance of this tokenreturn_balanceOf[account_] +collateral;}
Tools Used
Manual code review.
Discussion/confirmation with the Yield Protocol team.
Recommended Mitigation Steps
Ensure that any change to a vault will correctly checkpoint the previous and new vault owner. The affected actions include but are not limited to; transferring ownership of a vault to a new account, transferring collateral to another vault and adding/removing collateral to/from a vault.
iamsahu (Yield) confirmed
Alex the Entreprenerd (judge) commented:
The warden identified a way to sidestep the accounting in theConvexYieldWrapper.BecauseConvexYieldWrappertakes lazy accounting, transferring vaults at theLadlelevel allows to effectively register the same vault under multiple accounts, which ultimately allow to steal more yield than expected.While the loss of yield can be classified as a medium severity, the fact that the warden was able to break the accounting invariants of theConvexYieldWrapperleads me to raise the severity to highUltimately mitigation will require to_checkpointalso when vault operations happen (especially transfer), this may require a rethinking at the Ladle level as the reason why the warden was able to sidestep the checkpoint is because theLadledoesn’t notify theWrapperof any vault transfers
alcueca (Yield) commented:
Yes, that’s right. To fix this issue we will deploy a separate Ladle to deal specifically with convex tokens. The fix will probably involve removingstirandgiveinstead of notifying the wrapper, but we’ll see.

