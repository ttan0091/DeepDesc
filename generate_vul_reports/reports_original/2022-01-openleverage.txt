[H-01] OpenLevV1Lib’s and LPool’sdoTransferOutfunctions call nativepayable.transfer, which can be unusable for smart contract calls
Submitted by hyh
When OpenLev operations use a wrapped native token, the whole user withdraw is being handled with apayable.transfer()call.
This is unsafe astransferhas hard coded gas budget and can fail when the user is a smart contract. This way any programmatical usage of OpenLevV1 and LPool is at risk.
Whenever the user either fails to implement the payable fallback function or cumulative gas cost of the function sequence invoked on a native token transfer exceeds 2300 gas consumption limit the native tokens sent end up undelivered and the corresponding user funds return functionality will fail each time.
As OpenLevV1closeTradeis affected this includes user’s principal funds freeze scenario, so marking the issue as a high severity one.
Proof of Concept
OpenLevV1Lib and LPool havedoTransferOutfunction that calls native token payable.transfer:
OpenLevV1Lib.doTransferOut
https://github.com/code-423n4/2022-01-openleverage/blob/main/openleverage-contracts/contracts/OpenLevV1Lib.sol#L253
LPool.doTransferOut
https://github.com/code-423n4/2022-01-openleverage/blob/main/openleverage-contracts/contracts/liquidity/LPool.sol#L297
LPool.doTransferOut is used in LPool redeem and borrow, while OpenLevV1Lib.doTransferOut is used in OpenLevV1 trade manipulation logic:
closeTrade
https://github.com/code-423n4/2022-01-openleverage/blob/main/openleverage-contracts/contracts/OpenLevV1.sol#L204
https://github.com/code-423n4/2022-01-openleverage/blob/main/openleverage-contracts/contracts/OpenLevV1.sol#L215
liquidate
https://github.com/code-423n4/2022-01-openleverage/blob/main/openleverage-contracts/contracts/OpenLevV1.sol#L263
https://github.com/code-423n4/2022-01-openleverage/blob/main/openleverage-contracts/contracts/OpenLevV1.sol#L295
https://github.com/code-423n4/2022-01-openleverage/blob/main/openleverage-contracts/contracts/OpenLevV1.sol#L304
References
The issues withtransfer()are outlined here:
https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/
Recommended Mitigation Steps
OpenLevV1’scloseTradeandliquidateas well as LPool’sredeem,redeemUnderlying,borrowBehalf,repayBorrowBehalf,repayBorrowEndByOpenLevare allnonReentrant, so reentrancy isn’t an issue andtransfer()can be just replaced.
Using low-levelcall.value(amount)with the corresponding result check or using the OpenZeppelinAddress.sendValueis advised:
https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/Address.sol#L60
ColaM12 (OpenLeverage) confirmed and resolved
0xleastwood (judge) commented:
Awesome find! Completely agree with the warden here. This would prevent users from calling sensitive functions which withdraw their funds in some way.

