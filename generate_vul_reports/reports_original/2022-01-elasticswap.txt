[H-01] In the case of Single Asset Entry, new liquidity providers will suffer fund loss due to wrong formula of ΔRo
Submitted by WatchPug
Current Implementation
WhenbaseTokenrebase up
Per the document:https://github.com/ElasticSwap/elasticswap/blob/a90bb67e2817d892b517da6c1ba6fae5303e9867/ElasticSwapMath.md#:~:text=When%20there%20is%20alphaDecay
and related code:https://github.com/code-423n4/2022-01-elasticswap/blob/d107a198c0d10fbe254d69ffe5be3e40894ff078/elasticswap/src/libraries/MathLib.sol#L227-L283
Gammais the ratio of shares received by the new liquidity provider whenaddLiquidity()(ΔRo) to the new totalSupply (total shares = Ro’ = Ro + ΔRo).
ΔRo = (Ro/(1 - γ)) * γRo * Gamma= --------------1 - Gamma⟺ΔRo * ( 1 - Gamma ) = Gamma * RoΔRo - Gamma * ΔRo = Gamma * RoΔRo = Gamma * Ro + Gamma * ΔRoΔRoGamma = ---------Ro + ΔRo
In the current implementation:
γ = ΔY / Y' / 2 * ( ΔX / α^ )
ΔY is thequoteTokenadded by the new liquidity provider. See:
https://github.com/code-423n4/2022-01-elasticswap/blob/d107a198c0d10fbe254d69ffe5be3e40894ff078/elasticswap/src/libraries/MathLib.sol#L277
Y’ is the new Y afteraddLiquidity(),Y' = Y + ΔY. See:
https://github.com/code-423n4/2022-01-elasticswap/blob/d107a198c0d10fbe254d69ffe5be3e40894ff078/elasticswap/src/libraries/MathLib.sol#L272https://github.com/code-423n4/2022-01-elasticswap/blob/d107a198c0d10fbe254d69ffe5be3e40894ff078/elasticswap/src/libraries/MathLib.sol#L278
ΔX isΔY * Omega. See:
https://github.com/code-423n4/2022-01-elasticswap/blob/d107a198c0d10fbe254d69ffe5be3e40894ff078/elasticswap/src/libraries/MathLib.sol#L259-L263https://github.com/code-423n4/2022-01-elasticswap/blob/d107a198c0d10fbe254d69ffe5be3e40894ff078/elasticswap/src/libraries/MathLib.sol#L279
α^ isAlpha - X. See:
https://github.com/code-423n4/2022-01-elasticswap/blob/d107a198c0d10fbe254d69ffe5be3e40894ff078/elasticswap/src/libraries/MathLib.sol#L234-L235https://github.com/code-423n4/2022-01-elasticswap/blob/d107a198c0d10fbe254d69ffe5be3e40894ff078/elasticswap/src/libraries/MathLib.sol#L280
For instance:
Given:
Original State: X = Alpha = 1, Y = Beta = 1, Omega = X/Y = 1WhenbaseTokenrebase up: Alpha becomes 10Current State: Alpha = 10, X = 1, Y = Beta = 1, Omega = 1
When: new liquidity provideraddLiquidity()with 4 quoteToken:
4          4 * Omega      16Gamma = ------------ * ------------ = ----(1+4) * 2       10 - 1        90
AfteraddLiquidity():
baseToken belongs to the newLP: 10 * 16 / 90 = 160 / 90 = 1.7777777777777777quoteToken belongs to the newLP: (1+4) * 16 / 90 = 80 / 90 = 0.8888888888888888In the terms ofquoteToken, the total value is: 160 / 90 / Omega + 80 / 90 = 240 / 90 = 2.6666666666666665
As a result, the new liquidity provider suffers a fund loss of4 - 240 / 90 = 1.3333333333333333 in the terms of quoteToken
The case above can be reproduced by changing the numbers inthis test unit.
WhenbaseTokenrebase down
Per the document:https://github.com/ElasticSwap/elasticswap/blob/a90bb67e2817d892b517da6c1ba6fae5303e9867/ElasticSwapMath.md#:~:text=When%20there%20is%20betaDecay
and related code:https://github.com/code-423n4/2022-01-elasticswap/blob/d107a198c0d10fbe254d69ffe5be3e40894ff078/elasticswap/src/libraries/MathLib.sol#L297-L363
Gammais the ratio of shares received by the new liquidity provider whenaddLiquidity()(ΔRo) to the new totalSupply (total shares = Ro’ = Ro + ΔRo).
ΔRo = (Ro/(1 - γ)) * γRo * Gamma= --------------1 - Gamma⟺ΔRo * ( 1 - Gamma ) = Gamma * RoΔRo - Gamma * ΔRo = Gamma * RoΔRo = Gamma * Ro + Gamma * ΔRoΔRoGamma = ---------Ro + ΔRo
In the current implementation:
γ = ΔX / X / 2 * ( ΔXByQuoteTokenAmount / β^ )
ΔX is the amount ofbaseTokenadded by the new liquidity provider. See:
https://github.com/code-423n4/2022-01-elasticswap/blob/d107a198c0d10fbe254d69ffe5be3e40894ff078/elasticswap/src/libraries/MathLib.sol#L357
X is the balanceOfbaseToken. See:
https://github.com/code-423n4/2022-01-elasticswap/blob/d107a198c0d10fbe254d69ffe5be3e40894ff078/elasticswap/src/libraries/MathLib.sol#L358
ΔXByQuoteTokenAmount is ΔX / Omega, the value of ΔX in the terms ofquoteToken. See:
https://github.com/code-423n4/2022-01-elasticswap/blob/d107a198c0d10fbe254d69ffe5be3e40894ff078/elasticswap/src/libraries/MathLib.sol#L318-L322https://github.com/code-423n4/2022-01-elasticswap/blob/d107a198c0d10fbe254d69ffe5be3e40894ff078/elasticswap/src/libraries/MathLib.sol#L329-L333https://github.com/code-423n4/2022-01-elasticswap/blob/d107a198c0d10fbe254d69ffe5be3e40894ff078/elasticswap/src/libraries/MathLib.sol#L359
β^ is maxΔX / Omega, the value of maxΔX in the terms ofquoteToken.maxΔX = X - Alpha. See:
https://github.com/code-423n4/2022-01-elasticswap/blob/d107a198c0d10fbe254d69ffe5be3e40894ff078/elasticswap/src/libraries/MathLib.sol#L304-L305https://github.com/code-423n4/2022-01-elasticswap/blob/d107a198c0d10fbe254d69ffe5be3e40894ff078/elasticswap/src/libraries/MathLib.sol#L318-L322https://github.com/code-423n4/2022-01-elasticswap/blob/d107a198c0d10fbe254d69ffe5be3e40894ff078/elasticswap/src/libraries/MathLib.sol#L341-L342https://github.com/code-423n4/2022-01-elasticswap/blob/d107a198c0d10fbe254d69ffe5be3e40894ff078/elasticswap/src/libraries/MathLib.sol#L360
For instance:
Given:
Original State: X = Alpha = 10, Y = Beta = 10, Omega = X/Y = 1WhenbaseTokenrebase down, Alpha becomes 1Current State: Alpha = 1, X = 10, Y = Beta = 10, Omega = 1
When: new liquidity provideraddLiquidity()with4 baseToken
4          4 / Omega       8Gamma = -------- * ---------------- = ----10 * 2    (10-1) / Omega     90
AfteraddLiquidity():
baseToken belongs to the newLP: (1 + 4) * 8 / 90 = 40 / 90 = 0.4444444444444444quoteToken belongs to the newLP: 10 * 8 / 90 = 80 / 90 = 0.8888888888888888In the terms of quoteToken, the total value is: 40 / 90 + 80 / 90 * Omega = 120 / 90 = 1.3333333333333333 < 4
As a result, the new liquidity provider suffers a fund loss of4 - 120 / 90 = 2.6666666666666665 in the terms of quoteToken
The case above can be reproduced by changing the numbers inthis test unit.
The correct formula for ΔRo
See issue page for details.
Recommendation
Update code and document using the correct formula for ΔRo.
0xean (ElasticSwap) confirmed and commented:
Finding is valid - solution seems to be partially correct and we are working on the fully correct version.It seems that the suggested formula doesn’t cover a rebase down correctly and this is where our efforts are focused now.
Alex the Entreprenerd (judge) commented:
The warden has identified an issue with the math that reliably will provide a less-than-expected value to single-sided liquidity providers.
The warden showed a consistent way for this to occur and while the recommended fix may not be completely correct, I believe the finding to be valid.Because the warden found a set of cases that reliably make the protocol return less value than expected when compared to the goals of the protocol, I believe High Severity to be appropriate.
0xean (ElasticSwap) resolved

[H-02] TransferringquoteTokento the exchange pool contract will cause future liquidity providers to lose funds
Submitted by WatchPug
In the current implementation, the amount of LP tokens to be minted whenaddLiquidity()is calculated based on the ratio between the amount of newly addedquoteTokenand the current wallet balance ofquoteTokenin theExchangecontract.
However, since anyone can transferquoteTokento the contract, and make the balance ofquoteTokento be larger than_internalBalances.quoteTokenReserveQty, existing liquidity providers can take advantage of this by donatingquoteTokenand make future liquidity providers receive fewer LP tokens than expected and lose funds.
https://github.com/code-423n4/2022-01-elasticswap/blob/d107a198c0d10fbe254d69ffe5be3e40894ff078/elasticswap/src/libraries/MathLib.sol#L578-L582
liquidityTokenQty=calculateLiquidityTokenQtyForDoubleAssetEntry(_totalSupplyOfLiquidityTokens,quoteTokenQty,_quoteTokenReserveQty// IERC20(quoteToken).balanceOf(address(this)));
PoC
Given:
TheExchangepool is new;AliceaddLiquidity()with1e18 baseTokenand1e18 quoteToken, recived1e18LP token;Alice transfer99e18 quoteTokento theExchangepool contract;BobaddLiquidity()with1e18 baseTokenand1e18 quoteToken;BobremoveLiquidity()with all the LP token in balance.
Expected Results: Bob recived1e18 baseTokenand >=1e18 quoteToken.
Actual Results: Bob recived ~0.02e18 baseTokenand ~1e18 quoteToken.
Alice can nowremoveLiquidity()and recive ~1.98e18 baseTokenand ~100e18 quoteToken.
As a result, Bob suffers a fund loss of0.98e18 baseToken.
Recommendation
Change to:
liquidityTokenQty=calculateLiquidityTokenQtyForDoubleAssetEntry(_totalSupplyOfLiquidityTokens,quoteTokenQty,_internalBalances.quoteTokenReserveQty);
0xean (ElasticSwap) confirmed and commented:
This does appear to be correct after attempting a POC. Thank you WatchPug!
Alex the Entreprenerd (judge) commented:
The warden identified a way to exploit the protocol math to devalue future liquidity provision at the advantage of early liquidity providers.The exploit is extractive in nature, however, because this is reliably performable and effectively breaks the protocol’s goals and mechanics, I believe High Severity to be appropriate.
0xean (ElasticSwap) resolved

