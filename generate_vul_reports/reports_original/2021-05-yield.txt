[H-01] Duplication of Balance
It is possible to duplicate currently heldinkorartwithin a Cauldron, thereby breaking the contract’s accounting system and minting units out of thin air.
Thestirfunction of theCauldron, which can be invoked via aLadleoperation, caches balances in memory before decrementing and incrementing. As a result, if a transfer to self is performed, the assignmentbalances[to] = balancesTowill contain the added-to balance instead of the neutral balance.
This allows one to duplicate any number ofinkorartunits at will, thereby severely affecting the protocol’s integrity. A similar attack was exploited in the third bZx hack resulting in a roughly 8 million loss.
Recommend that arequirecheck should be imposed prohibiting thefromandtovariables to be equivalent.
albertocuestacanada (Yield) confirmed:
It is a good finding and a scary one. It will be fixed. Duplicated with #7.
[H-02] auth collision possible
The auth mechanism ofAccessControl.soluses function selectors(msg.sig)as a(unique)role definition. Also the_moduleCallallows the code to be extended.
Suppose an attacker wants to add the innocent-looking function ”left_branch_block(uint32)“in a new module. Suppose this module is added via_moduleCall, and the attacker gets authorization for the innocent function.
This function happens to have a signature of 0x00000000, which is equal to the root authorization. In this way, the attacker could get authorization for the entire project.
Note: it’s pretty straightforward to generate function names for any signature value; you can just brute force it because it’s only 4 bytes.
Recommend not allowing third parties to define or suggest new modules and double-checking the function signatures of new functions of a new module for collisions.
albertocuestacanada (Yield) confirmed:
The execution of anyauthfunction will only happen after a governance process or by a contract that has gone through a thorough review and governance process.We are aware that new modules can have complete control of the Ladle, and for that reason, the addition of new modules would be subject to the highest level of scrutiny. Checking for signature collisions is a good item to add to that process.In addition to that, I would implement two changes inAccessControl.solso that giving ROOT access is explicit.
functiongrantRole(bytes4role,addressaccount)externalvirtualadmin(role) {require(role!=ROOT,"Not ROOT role");_grantRole(role,account);}>functiongrantRoot(addressaccount)externalvirtualadmin(ROOT) {_grantRole(ROOT,account);}
However, given that this could be exploited only through a malicious governance exploit, I would reduce the risk to “Low.”
albertocuestacanada (Yield) acknowledged:
After further thinking, instead of preventing auth collisions in the smart contracts, we will add CI checks for this specific issue instead.
[H-03] YieldMath.sol / Log2: >= or > ?
The V1 version ofYieldMath.solcontains ”>=” (larger or equal), while the V2 version ofYieldMath.solcontains ”>” (larger) in the log_2 function.
This change doesn’t seem logical and might lead to miss calculations.
The difference is present in several adjacent lines.
functionlog_2(uint128x)...b=b*b>> 127;if(b>=0x100000000000000000000000000000000) {b>>=1;l|=0x1000000000000000000000000000000;}
and
functionlog_2(uint128x)...b=b*b>> 127;if(b>0x100000000000000000000000000000000) {b>>=1;l|=0x1000000000000000000000000000000;}
Recommend checking which version is the correct version and fix the incorrect version.
albertocuestacanada (Yield) confirmed:
That’s entirely my fault, and this is a scary one. We might be having a slightly different or impredictable curve in Pool.sol, and we might notice only after a long while with the Pools being slowly drained. We might never even have found this was the issue.I would suggest increasing the severity of this issue to High.
albertocuestacanada (Yield) Resolved:
Fix
