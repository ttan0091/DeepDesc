[H-01] The formula of number of prizes for a degree is wrong
Submitted by WatchPug, also found by cmichel.
The formula of the number of prizes for a degree per the document:https://v4.docs.pooltogether.com/protocol/concepts/prize-distribution/#splitting-the-prizesis:
Number of prizes for a degree = (2^bit range)^degree - (2^bit range)^(degree-1) - (2^bit range)^(degree-2) - ...
Should be changed to:
Number of prizes for a degree = (2^bit range)^degree - (2^bit range)^(degree-1)
or
Number of prizes for a degree = 2^(bit range * degree) - 2^(bit range * (degree-1))
Impact
Per the document:
prize for a degree = total prize * degree percentage / number of prizes for a degree
Due to the miscalculation ofnumber of prizes for a degree, it will be smaller than expected, as a result,prize for a degreewill be larger than expected. Making the protocol giving out more prizes than designed.
Proof
We will usef(bitRange, degree)to representnumberOfPrizesForDegree(bitRangeSize, degree).
Proof: (method 1)
2 ^ {bitRange \times n} = f(bitRange, n) + f(bitRange, n-1) + f(bitRange, n-2) + ... + f(bitRange, 1) + f(bitRange, 0)f(bitRange, n) = 2 ^ {bitRange \times n} - ( f(bitRange, n-1) + f(bitRange, n-2) + ... + f(bitRange, 1) + f(bitRange, 0) )f(bitRange, n) = 2 ^ {bitRange \times n} - f(bitRange, n-1) - ( f(bitRange, n-2) + ... + f(bitRange, 1) + f(bitRange, 0) )Because:2 ^ {bitRange \times (n-1)} = f(bitRange, n-1) + f(bitRange, n-2) + ... + f(bitRange, 1) + f(bitRange, 0)2 ^ {bitRange \times (n-1)} - f(bitRange, n-1) = f(bitRange, n-2) + ... + f(bitRange, 1) + f(bitRange, 0)Therefore:f(bitRange, n) = 2 ^ {bitRange \times n} - f(bitRange, n-1) - ( 2 ^ {bitRange \times (n-1)} - f(bitRange, n-1) )f(bitRange, n) = 2 ^ {bitRange \times n} - f(bitRange, n-1) - 2 ^ {bitRange \times (n-1)} + f(bitRange, n-1)f(bitRange, n) = 2 ^ {bitRange \times n} - 2 ^ {bitRange \times (n-1)}
Because2^x = 1 << x
Therefore, whenn > 0:
f(bitRange, n) = ( 1 << bitRange * n ) - ( 1 << bitRange * (n - 1) )
QED.
Proof: (method 2)
By definition,degree nis constructed by 3 chunks:
The first N numbers, must equal the matching numbers. Number of possible values:1;The N-th number, must not equal the N-th matching number. Number of possible values:2^bitRange - 1From N (not include) until the end. Number of possible values:2 ^ (bitRange * (n-1))
Therefore, totalnumberOfPrizesForDegreewill be:
f(bitRange, n) = (2 ^ {bitRange} - 1) \times 2 ^ {bitRange \times (n - 1)}f(bitRange, n) = 2 ^ {bitRange} \times 2 ^ {bitRange \times (n - 1)} - 2 ^ {bitRange \times (n - 1)}f(bitRange, n) = 2 ^ {bitRange + bitRange \times (n - 1)} - 2 ^ {bitRange \times (n - 1)}f(bitRange, n) = 2 ^ {bitRange + bitRange \times n - bitRange} - 2 ^ {bitRange \times (n - 1)}f(bitRange, n) = 2 ^ {bitRange \times n} - 2 ^ {bitRange \times (n - 1)}
QED.
Recommendation
https://github.com/pooltogether/v4-core/blob/055335bf9b09e3f4bbe11a788710dd04d827bf37/contracts/DrawCalculator.sol#L423-L431
/***@noticeCalculates the number of prizes for a given prizeDistributionIndex*@param_bitRangeSizeBit range size for Draw*@param_prizeTierIndexIndex of the prize tier array to calculate*@returnreturns the fraction of the total prize (base 1e18)*/function_numberOfPrizesForIndex(uint8_bitRangeSize,uint256_prizeTierIndex)internalpurereturns(uint256){uint256bitRangeDecimal=2**uint256(_bitRangeSize);uint256numberOfPrizesForIndex=bitRangeDecimal**_prizeTierIndex;while(_prizeTierIndex>0) {numberOfPrizesForIndex-=bitRangeDecimal**(_prizeTierIndex-1);_prizeTierIndex--;}returnnumberOfPrizesForIndex;}
L423-431 should change to:
if(_prizeTierIndex>0) {return(1<<_bitRangeSize*_prizeTierIndex) - (1<<_bitRangeSize* (_prizeTierIndex-1) );}else{return1;}
BTW, the comment on L416 is wrong:
seems like it’s copied from\_calculatePrizeTierFraction()plus, it’s not base 1e18 but base 1e9
PierrickGT (PoolTogether) confirmed and patched:
PR:https://github.com/pooltogether/v4-core/pull/242
Alex the Entreprenerd (judge) commented:
The warden found the usage of an incorrect formula that would cause the protocol to give out larger prizes than expected, the sponsor has mitigated in a following PR
[H-02] Miners Can Re-Roll the VRF Output to Game the Protocol
Submitted by leastwood.
Impact
Miners are able to rewrite a chain’s history if they dislike the VRF output used by the protocol. Consider the following example:
A miner or well-funded user is participating in the PoolTogether protocol.A VRF request is made and fulfilled in the same block.The protocol participant does not benefit from the VRF output and therefore wants to increase their chances of winning by including the output in another block, producing an entirely new VRF output. This is done by re-orging the chain, i.e. following a new canonical chain where the VRF output has not been included in a block.This attack can be continued as long as the attacker controls 51% of the network. The miner itself could control a much smaller proportion of the network and still be able to mine a few blocks in succession, although this is of low probability but entirely possible.A well-funded user could also pay miners to re-org the chain on their behalf in the form of MEV to achieve the same benefit.
The PoolTogether team is aware of this issue but is yet to mitigate this attack vector fully.
Proof of Concept
https://docs.chain.link/docs/vrf-security-considerations/#choose-a-safe-block-confirmation-time-which-will-vary-between-blockchainshttps://github.com/pooltogether/pooltogether-rng-contracts/blob/master/contracts/RNGChainlink.solhttps://github.com/pooltogether/v4-core/blob/master/contracts/DrawBeacon.sol#L311-L324https://github.com/pooltogether/v4-core/blob/master/contracts/DrawBeacon.sol#L218-L232https://github.com/pooltogether/blockhash-analysis-simulation
Tools Used
Manual code reviewDiscussions with Brendan
Recommended Mitigation Steps
Consider adding a confirmation time between when the actual VRF request was made and when it was later fulfilled on-chain. This could be as few as 5 blocks, reducing the probability of an effective chain reorganization to extremely close to 0.
asselstine (PoolTogether) acknowledged:
Yes, this is something I’ve known for awhile.  The VRF operator whose signature we are requestingcouldcollude with a miner to manipulate the blockhash that is being fed to the VRF.We’re using the original VRF implementation by Chainlink.  VRF 2.0 is rolling out soon, and we’ll explore confirmation times with their team.
Alex the Entreprenerd (judge) commented:
The warden has identified a “supply chain” attack on the VRF, while the finding may seem innocuous, it does pose the fundamental question as to whether Chainlink’s VRF is a source of truly verifiable randomness that won’t be gamed for personal gains.The sponsor does agree on the attack vector, the miner and the chainlink provider could collude with the purpose of gaming the system.I find it hard to leave this as a High Severity finding, because it implies that Chainlink’s VRF Service is flawed in it’s designHowever, if trace of proof of collusion between miners and chainlink operators where to be found, this would question the impartiality of their service.
Alex the Entreprenerd (judge) commented:
After a day of thinking I’ve decided to leave the finding as high risk.
Not as a statement to Chainlink’s security model, as that’s outside of scope, but because the finding is objectively true.A malicious operator can, in conjunction with a miner, re-roll the VRF to pursue their own gains.I’m not sure what could be done to mitigate this at the chain level, it seems to me that at this time, there may be no source of true randomness that can be achieved on-chain without assuming a degree of counter-party risk
