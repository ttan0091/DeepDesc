[H-01] The design ofwibBTCis not fully compatible with the current Curve StableSwap pool
Submitted by WatchPug, also found by gzeon
Per the documentation,wibBTCis designed for a Curve StableSwap pool. However, the design ofwibBTCmakes the balances change dynamically and automatically. This is unusual for an ERC20 token, and it’s not fully compatible with the current Curve StableSwap pool.
Specifically, a Curve StableSwap pool will maintain the balances of itscoinsbased on the amount of tokens added, removed, and exchanged each time. In another word, it can not adopt the dynamic changes of the balances that happened automatically.
The pool’s actual dynamic balance ofwibBTCwill deviate from the recorded balance in the pool contract as thepricePerShareincreases.
Furthermore, there is no such way in Curve StableSwap similar to thesync()function of UNI v2, which will force sync the storedreservesto match the balances.
PoC
Given:
The currentpricePerShareis:1;The Curve pool is newly created with 0 liquidity;Alice added100 wibBTCand100 wBTCto the Curve pool; Alice holds 100% of the pool;After 1 month with no activity (no other users, no trading), and thepricePerShareofibBTCincreases to1.2;Alice removes all the liquidity from the Curve pool.
While it’s expected to receive150 wibBTCand100 wBTC, Alice actually can only receive100 wibBTCand100 wBTC.
Recommended Mitigation Steps
Consider creating a revised version of the Curve StableSwap contract that can handle dynamic balances properly.
dapp-whisperer (BadgerDAO) confirmed:
We will be creating a custom pool that takes this into account based on the rate_multiplier variable on the MetaPools.Draft implementation
[H-02] Approved spender can spend too many tokens
Submitted by cmichel, also found by WatchPug, jonah1005, gzeon, and TomFrenchTheapprovefunction has not been overridden and therefore uses the internalshares, whereastransfer(From)uses the rebalanced amount.
Impact
The approved spender may spend more tokens than desired. In fact, the approved amount that can be transferred keeps growing withpricePerShare.
Many contracts also use the same amount for theapprovecall as for the amount they want to have transferred in a subsequenttransferFromcall, and in this case, they approve an amount that is too large (as the approvedsharesamount yields a higher rebalanced amount).
Recommended Mitigation Steps
The_allowancesfield should track the rebalanced amounts such that the approval value does not grow. (This does not actually require overriding theapprovefunction.)
IntransferFrom, the approvals should then be subtracted by thetransferredamount, not theamountInShares:
// _allowances are in rebalanced amounts such that they don't grow// need to subtract the transferred amount_approve(sender,_msgSender(),_allowances[sender][_msgSender()].sub(amount,"ERC20: transfer amount exceeds allowance"));
tabshaikh (Badger) confirmed and resolved:
Fix here:https://github.com/Badger-Finance/rebasing-ibbtc/pull/7
[H-03]WrappedIbbtcEthcontract will use stalled price for mint/burn ifupdatePricePerSharewasn’t run properly
Submitted by hyh, also found by cmichel, gpersoon, leastwood, hack3r-0m, kenzo, WatchPug, and loop
Impact
Malicious user can monitorSetPricePerShareevent and, if it was run long enough time ago and market moved, but, since there were noSetPricePerSharefired, the contract’spricePerShareis outdated, so a user canmint()withpricePerSharethat is current for contract, but outdated for market, then wait for price update andburn()with updatedpricePerShare, yielding risk-free profit at expense of contract holdings.
Proof of Concept
WrappedIbbtcEthupdatespricePerSharevariable by externally runupdatePricePerSharefunction. The variable is then used in mint/burn/transfer functions without any additional checks, even if outdated/stalled. This can happen if the external function wasn’t run for any reason.
The variable is used viabalanceToSharesfunction:WrappedIbbtcEth.solL155
This is feasible asupdatePricePerShareto be run by off-chain script being a part of the system, and malfunction of this script leads to contract exposure by stalling the price. The malfunction can happen both by internal reasons (bugs) and by external ones (any system-level dependencies, network outrages).updatePricePerSharefunction:WrappedIbbtcEth.solL72
Recommended Mitigation Steps
The risk comes with system design. Wrapping price updates with contract level variable for gas costs minimization is a viable approach, but it needs to be paired with corner cases handling. One of the ways to reduce the risk is as follows:
Introduce a threshold variable for maximum time elapsed since lastpricePerShareupdate toWrappedIbbtcEthcontract.
Then 2 variants oftransferFromandtransferfunctions can be introduced, both check condition {now - time since last price update < threshold}. If condition holds both variants, do the transfer. If it doesn’t, then the first variant reverts, while the second do costly price update.
I.e. it will be cheap transfer (that works only if price is recent) and full transfer (that is similar to the first when price is recent, but do price update on its own when price is stalled). This way, this full transfer is guaranteed to run and is usually cheap, costing more if price is stalled and it does the update.
After this, whenever scheduled price update malfunctions (for example because of network conditions), the risk will be limited by market volatility during threshold time at maximum, i.e. capped.
Seeissue pagefor example code:
dapp-whisperer (BadgerDAO) confirmed:
Agreed, appreciate the thorough breakdown. We will add a “max staleness” to the ppfs update.I do see some merit in the idea of “updating when needed” at expense of the next user, but due to interface considerations we’d like to keep that consistent for users. In practice, we will run a bot to ensure timely updates.The pps updates are small and infrequent.
[H-04]WrappedIbbtcandWrappedIbbtcEthcontracts do not filter out price feed outliers
Submitted by hyh
Impact
If price feed is manipulated in any way or there is any malfunction based volatility on the market, both contracts will pass it on a user.
In the same time it’s possible to construct mitigation mechanics for such cases, so user economics would be affected by sustainable price movements only.
As price outrages provide a substantial attack surface for the project it’s worth adding some complexity to the implementation.
Proof of Concept
InWrappedIbbtcEthpricePerSharevariable is updated by externally runupdatePricePerSharefunction (WrappedIbbtcEth.sol L72), and then used in mint/burn/transfer functions without additional checks viabalanceToSharesfunction:WrappedIbbtcEth.solL155
InWrappedIbbtcprice is requested viapricePerSharefunction(WrappedIbbtc.solL123), and used in the same way without additional checks viabalanceToSharesfunction.
Recommended Mitigation Steps
Introduce a minting/burning query that runs on a schedule, separating user funds contribution and actual mint/burn. With user deposit or burn, the corresponding action to be added to commitment query, which execution for mint or redeem will later be sparked by off-chain script according to fixed schedule.
This also can be open to public execution with gas compensation incentive, for example as it’s done in Tracer protocol:PoolKeeper.solL131
Full code of an implementation is too big to include in the report, but viable versions are available publicly (Tracer protocol version can be found at the same repo,implementation/PoolCommittersol).
Once the scheduled mint/redeem query is added, the additional logic to control for price outliers will become possible there, as in this case mint/redeem execution can be conditioned to happen on calm market only, where various definitions of calm can be implemented.
One of the approaches is to keep track of recent prices and require that new price each time be within a threshold from median of their array.
Example:
// Introduce small price tracking arrays:uint256\[]privatetimes;uint256\[]privateprices;// Current position in arrayuint8curPos;// Current length, grows from 0 to totalMaxPos as prices are being addeduint8curMaxPos;// Maximum length, we track up to totalMaxPos pricesuint8totalMaxPos=10;// Price movement thresholduint256moveThreshold=0.1\*1e18;
We omit the full implementation here as it is lengthy enough and can vary.
The key steps are:
Run query for scheduled mint/redeem with logic: if next price is greater than median of currently recorded prices by threshold, add it to the records, but do not mint/redeem.That is, when scheduled mint/redeem is run, on new price request, WrappedIbbtcEth.core.pricePerShare() or WrappedIbbtc.oracle.pricePerShare(), get newPrice and calculate current price array median, curMedprices[curPos] = newPriceif (curMaxPos < totalMaxPos) {curMaxPos += 1}if (curPos == curMaxPos) {curPos = 0} else {curPos += 1}if (absolutevalueof(newPrice - curMed) < moveThreshold * curMed / 1e18) {domint/redeem; return\0_status}else {return_1_status}
Schedule should be frequent enough, say once per 30 minutes, which is kept while returned status is 0. While threshold condition isn’t met and returned status is 1, it runs once per 10 minutes. The parameters here are subject to calibration.
This way if the price movement is sustained the mint/redeem happens after price array median comes to a new equilibrium. If price reverts, the outbreak will not have material effect mint/burn operations. This way the contract vulnerability is considerably reduced as attacker would need to keep distorted price for period long enough, which will happen after the first part of deposit/withdraw cycle. I.e. deposit and mint, burn and redeem operations will happen not simultaneously, preventing flash loans to be used to elevate the quantities, and for price to be effectively distorted it would be needed to keep it so for substantial amount of time.
dapp-whisperer (BadgerDAO) confirmed:
Minting and burning happens atomically within larger function calls and our current approach isn’t amenable to this change.
