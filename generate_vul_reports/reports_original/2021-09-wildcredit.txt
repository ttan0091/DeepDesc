[H-01] Use of tokenB’s price instead of tokenA in determining account health will lead to protocol mis-accounting and insolvency
Submitted by 0xRajeev, also found by WatchPug.
Impact
In_supplyCreditUni(), the last argument of_convertTokenValues()onL674 being _priceBinstead of_priceAin the calculation ofsupplyBis a typo (should be_priceA) and therefore miscalculatessupplyB,creditB,creditUniand thereforetotalAccountSupplyin functionaccountHealth()which affects the health of account/protocol determination that is used across all borrows/withdrawals/transfers/liquidations in the protocol. This miscalculation significantly affects all calculations in protocol and could therefore cause protocol insolvency.
Proof of Concept
https://github.com/code-423n4/2021-09-wildcredit/blob/c48235289a25b2134bb16530185483e8c85507f8/contracts/LendingPair.sol#L674https://github.com/code-423n4/2021-09-wildcredit/blob/c48235289a25b2134bb16530185483e8c85507f8/contracts/LendingPair.sol#L340https://github.com/code-423n4/2021-09-wildcredit/blob/c48235289a25b2134bb16530185483e8c85507f8/contracts/LendingPair.sol#L398-L401https://github.com/code-423n4/2021-09-wildcredit/blob/c48235289a25b2134bb16530185483e8c85507f8/contracts/LendingPair.sol#L532https://github.com/code-423n4/2021-09-wildcredit/blob/c48235289a25b2134bb16530185483e8c85507f8/contracts/LendingPair.sol#L544https://github.com/code-423n4/2021-09-wildcredit/blob/c48235289a25b2134bb16530185483e8c85507f8/contracts/LendingPair.sol#L119https://github.com/code-423n4/2021-09-wildcredit/blob/c48235289a25b2134bb16530185483e8c85507f8/contracts/LendingPair.sol#L266https://github.com/code-423n4/2021-09-wildcredit/blob/c48235289a25b2134bb16530185483e8c85507f8/contracts/LendingPair.sol#L289
Tools Used
Manual Analysis
Recommended Mitigation Steps
Change the last argument of\_convertTokenValues()from\_priceBto\_priceAon L674.
talegift (Wild Credit) confirmed
[H-02] Liquidation can be escaped by depositing a Uni v3 position with 0 liquidity
Submitted by WatchPug.
When the liquidator is trying to liquidate a undercolldarezed loan by callingliquidateAccount(), it calls_unwrapUniPosition()->uniV3Helper.removeLiquidity()->positionManager.decreaseLiquidity().
However, when the Uni v3 position has 0 liquidity,positionManager.decreaseLiquidity()will fail.
See:https://github.com/Uniswap/v3-periphery/blob/main/contracts/NonfungiblePositionManager.sol#L265
Based on this, a malicious user can escaped liquidation by depositing a Uni v3 position with 0 liquidity.
Impact
Undercollateralized debts cannot be liquidated and it leads to bad debts to the protocol.
A malicious user can take advantage of this by creating long positions on the collateral assets and take profit on the way up, and keep taking more debt out of the protocol, while when the price goes down, the debt can not be liquidated and the risks of bad debt are paid by the protocol.
Proof of Concept
A malicious user deposits some collateral assets and borrow the max amount of debt;The user deposits a Uni v3 position with 0 liquidity;When the market value of the collateral assets decreases, the liquadation will fail aspositionManager.decreaseLiquidity()reverts.
Recommendation
Check if liquidity > 0 when removeLiquidity.
talegift (Wild Credit) confirmed:
Valid issue. Good catch.Severity should be lowered to 2 as it doesn’t allow direct theft of funds and the loss would only occur under specific external conditions.2 — Med: Assets not at direct risk, but the function of the protocol or its availability could be impacted, or leak value with a hypothetical attack path with stated assumptions, but external requirementshttps://docs.code4rena.com/roles/wardens/judging-criteria#estimating-risk-tl-dr
ghoul-sol (judge) commented:
To my understanding, bad position would affect the whole protocol and a loss would have to be paid by other participans which means funds can be drained. For that reason, I’m keeping high risk.
