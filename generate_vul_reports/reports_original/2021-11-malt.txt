[H-01] Timelock can be bypassed
Submitted by WatchPug, also found by 0x0x0x and gzeon
The purpose of a Timelock contract is to put a limit on the privileges of thegovernor, by forcing a two step process with a preset delay time.
However, we found that the current implementation actually won’t serve that purpose as it allows thegovernorto execute any transactions without any constraints.
To do that, the current governor can callTimelock#setGovernor(address _governor)and set a newgovernoreffective immediately.
And the newgovernorcan then callTimelock#setDelay()and change the delay to0, also effective immediately.
The newgovernorcan now use all the privileges without a delay, including granting minter role to any address and mint unlimited amount of MALT.
In conclusion, a Timelock contract is supposed to guard the protocol from lost private key or malicious actions. The current implementation won’t fulfill that mission.
https://github.com/code-423n4/2021-11-malt/blob/c3a204a2c0f7c653c6c2dda9f4563fd1dc1cecf3/src/contracts/Timelock.sol#L98-L105
functionsetGovernor(address_governor)publiconlyRole(GOVERNOR_ROLE,"Must have timelock role"){_swapRole(_governor,governor,GOVERNOR_ROLE);governor=_governor;emitNewGovernor(_governor);}
https://github.com/code-423n4/2021-11-malt/blob/c3a204a2c0f7c653c6c2dda9f4563fd1dc1cecf3/src/contracts/Timelock.sol#L66-L77
functionsetDelay(uint256_delay)publiconlyRole(GOVERNOR_ROLE,"Must have timelock role"){require(_delay>=0&&_delay<gracePeriod,"Timelock::setDelay: Delay must not be greater equal to zero and less than gracePeriod");delay=_delay;emitNewDelay(delay);}
Recommendation
Consider makingsetGovernorandsetDelayonly callable from the Timelock contract itself.
Specificaly, changing fromonlyRole(GOVERNOR_ROLE, "Must have timelock role")torequire(msg.sender == address(this), "...").
Also, consider changing_adminSetup(_admin)inTimelock#initialize()to_adminSetup(address(this)), so that all roles are managed by the timelock itself as well.
0xScotch (sponsor) confirmed
Alex the Entreprenerd (judge) commented:
The warden has identified an exploit that allows to sidestep the delay for the timelock, effectively bypassing all of the timelock’s security guarantees. Because of the gravity of this, I agree with the high risk severity.Mitigation can be achieved by ensuring that all operations run under a time delay
[H-02] Unable to remove liquidity in Recovery Mode
Submitted by gzeon
According tohttps://github.com/code-423n4/2021-11-malt#high-level-overview-of-the-malt-protocol
When the Malt price TWAP drops below a specified threshold (eg 2% below peg) then the protocol will revert any transaction that tries to remove Malt from the AMM pool (ie buying Malt or removing liquidity). Users wanting to remove liquidity can still do so via the UniswapHandler contract that is whitelisted in recovery mode.
However, inhttps://github.com/code-423n4/2021-11-malt/blob/c3a204a2c0f7c653c6c2dda9f4563fd1dc1cecf3/src/contracts/DexHandlers/UniswapHandler.sol#L236liquidity removed is directly sent to msg.sender, which would revert if it is not whitelistedhttps://github.com/code-423n4/2021-11-malt/blob/c3a204a2c0f7c653c6c2dda9f4563fd1dc1cecf3/src/contracts/PoolTransferVerification.sol#L53
Recommended Mitigation Steps
Liquidity should be removed to UniswapHandler contract, then the proceed is sent to msg.sender
0xScotch (sponsor) confirmed
Alex the Entreprenerd (judge) commented:
I believe this finding to be correct, because of the whitelisting onverifyTransfer, during recovery mode the removal of liquidity from UniSwapV2Pair will perform safeTransfers:https://github.com/Uniswap/v2-core/blob/4dd59067c76dea4a0e8e4bfdda41877a6b16dedc/contracts/UniswapV2Pair.sol#L148This means that the_beforeTokenTransferwill be called which eventually will callverifyTransferwhich, if the price is below peg will revert.Transfering the funds to the whitelisted contract should avoid this issue.I’d like to remind the sponsor that anyone could deploy similar swapping contracts (or different ones such as curve), so if a person is motivate enough, all the whitelisting could technically be sidestepped.That said, given the condition of LPing on Uniswap, the check and the current system would make it impossible to withdraw funds.Because this does indeed compromises the availability of funds (effectively requiring the admin to unstock them manually via Whitelisting each user), I agree with High Severity
[H-03] getAuctionCore function returns wrong values out of order
Submitted by jayjonah8
Impact
In theAuctionEscapeHatch.solfile bothearlyExitReturn()and\_calculateMaltRequiredForExitcall thegetAuctionCore()function which has 10 possible return values most of which are not used.  It gets the wrong value back for the “active”  variable since it’s the 10th argument but both functions have it as the 9th return value where “preAuctionReserveRatio” should be because of one missing comma.  This is serious because these both are functions which deal with allowing a user to exit their arbitrage token position early.  This can result in a loss of user funds.
Proof of Concept
https://github.com/code-423n4/2021-11-malt/blob/main/src/contracts/AuctionEscapeHatch.sol#L100https://github.com/code-423n4/2021-11-malt/blob/main/src/contracts/AuctionEscapeHatch.sol#L174https://github.com/code-423n4/2021-11-malt/blob/main/src/contracts/Auction.sol#L527
Tools Used
Manual code review
Recommended Mitigation Steps
InAuctionEscapeHatch.solchange the following in\_calculateMaltRequiredForExit()and earlyExitReturn() functions:
From:
(,,,,,
uint256 pegPrice,
,
uint256 auctionEndTime,
bool active
) = auction.getAuctionCore(_auctionId);
To:
(,,,,,
uint256 pegPrice,
,
uint256 auctionEndTime,
,
bool active
) = auction.getAuctionCore(_auctionId);
0xScotch (sponsor) confirmed
Alex the Entreprenerd (judge) commented:
The warden identified a mistake in programming where the code would use the wrong returned value.
Because of this, the entire protocol functionality can be compromised.
As such I agree with High Severity
[H-04]AuctionBurnReserveSkew.getPegDeltaFrequency()Wrong implementation can result in an improper amount of excess Liquidity Extension balance to be used at the end of an auction
Submitted by WatchPug
https://github.com/code-423n4/2021-11-malt/blob/c3a204a2c0f7c653c6c2dda9f4563fd1dc1cecf3/src/contracts/AuctionBurnReserveSkew.sol#L116-L132
functiongetPegDeltaFrequency()publicviewreturns(uint256) {uint256initialIndex=0;uint256index;if(count>auctionAverageLookback) {initialIndex=count-auctionAverageLookback;}uint256total=0;for(uint256i=initialIndex;i<count; ++i) {index=_getIndexOfObservation(i);total=total+pegObservations[index];}returntotal*10000/auctionAverageLookback;}
Whencount < auctionAverageLookback, at L131, it should bereturn total * 10000 / count;. The current implementation will return a smaller value than expected.
The result ofgetPegDeltaFrequency()will be used for calculatingrealBurnBudgetfor auctions. With the result ofgetPegDeltaFrequency()being inaccurate, can result in an improper amount of excess Liquidity Extension balance to be used at the end of an auction.
0xScotch (sponsor) confirmed and disagreed with severity:
I actually think this should be higher severity. This bug could manifest in liquidity extension being depleted to zero which could have catastrophic consequences downstream.
Alex the Entreprenerd (judge) commented:
Agree with the finding, this is an incorrect logic in the protocol, which can limit it’s functionality and as the sponsor says:could have catastrophic consequences downstreamas such I’ll increase the severity to high.Mitigation seems to be straightforward
[H-05] AuctionEschapeHatch.sol#exitEarly updates state of the auction wrongly
Submitted by 0x0x0x
AuctionEschapeHatch.sol#exitEarlytakes as inputamountto represent how much of the
When the user exits an auction with profit, to apply the profit penalty lessmaltQuantityis liquidated compared to how much malt token the liquidated amount corresponds to. The problem isauction.amendAccountParticipation()simply subtracts the malt quantity with penalty and fullamountfrom users auction stats. This causes a major problem, since in_calculateMaltRequiredForExitthose values are used for calculation by calculating maltQuantity as follow:
uint256 maltQuantity = userMaltPurchased.mul(amount).div(userCommitment);
The ratio ofuserMaltPurchased / userCommitmentgets higher after each profit taking (since penalty is applied to substractedmaltQuantityfromuserMaltPurchased), by doing so a user can earn more than it should. Since after each profit taking users commitment corresponds to proportionally more malt, the user can even reduce profit penalties by dividingexitEarlycalls in several calls.
In other words, the ratio ofuserMaltPurchased / userCommitmentgets higher after each profit taking and user can claim more malt with less commitment. Furthermore after alluserMaltPurchasedis claimed the user can haveuserCommitmentleft over, which can be used toclaimArbitrage, when possible.
Mitigation Step
Make sure which values are used for what and update values which doesn’t create problems like this. Rethink about how to track values of an auction correctly.
0xScotch (sponsor) confirmed
Alex the Entreprenerd (judge) commented:
The warden has identified an exploit that allows early withdrawers to gain more rewards than expected.
Anytime “points” and rewards need to be earned over time, it’s ideal to accrue points in order to distribute them (see how Compound or AAVE tokens work)
Because the warden showed a flow in the accounting logic for the protocol, I agree with high severity.
