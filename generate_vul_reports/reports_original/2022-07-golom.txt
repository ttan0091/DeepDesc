[H-01] Owner can not set theveaddress viaRewardDistributor.addVoteEscrow
Submitted by berndartmueller, also found by 0x1f8b, 0x52, 0xA5DF, 0xsanson, auditor0517, CRYP70, GimelSec, hansfriese, hyh, Krow10, panprog, rajatbeladiya, rbserver, teddav, and TrungOre
https://github.com/code-423n4/2022-07-golom/blob/e5efa8f9d6dda92a90b8b2c4902320acf0c26816/contracts/rewards/RewardDistributor.sol#L300
https://github.com/code-423n4/2022-07-golom/blob/e5efa8f9d6dda92a90b8b2c4902320acf0c26816/contracts/rewards/RewardDistributor.sol#L173
On the initialRewardDistributor.addVoteEscrowcall, the owner of the contract can set theveaddress without a timelock (which is as intended according to the function documentation). However, as the function parameter_voteEscrowis not used for the assignment, instead the storage variablependingVoteEscrow(which is not initialized, henceaddress(0)) is used, thevestorage variable can not be set to the provided_voteEscrowaddress.
This prevents setting theveaddress (veis set toaddress(0)) and therefore preventsveNFTholders to claim reward tokens and Ether rewards viaRewardDistributor.multiStakerClaim.
Proof of Concept
RewardDistributor.sol#L300
functionaddVoteEscrow(address_voteEscrow)externalonlyOwner{if(address(ve) ==address(0)) {ve=VE(pendingVoteEscrow);// @audit-info The wrong variable is used. It should be `_voteEscrow`}else{voteEscrowEnableDate=block.timestamp+1days;pendingVoteEscrow=_voteEscrow;}}
RewardDistributor.sol#L173
functionmultiStakerClaim(uint256[]memorytokenids,uint256[]memoryepochs)public{require(address(ve) !=address(0),' VE not added yet');// @audit-info reverts if `ve` is not initialized...}
Recommended Mitigation Steps
Use the correct function parameter_voteEscrow:
functionaddVoteEscrow(address_voteEscrow)externalonlyOwner{if(address(ve) ==address(0)) {ve=VE(_voteEscrow);}else{voteEscrowEnableDate=block.timestamp+1days;pendingVoteEscrow=_voteEscrow;}}
0xsaruman (Golom) confirmed
0xsaruman (Golom) resolved and commented:
Resolved by removing the manually added timelocks and setting the Vote escrow in constructor and a function to change voteescrow by ownerhttps://github.com/golom-protocol/contracts/commit/366c0455547041003c28f21b9afba48dc33dc5c7#diff-359fa403a6143105216e07c066e06ebb7ef2ba2d02f9d5465b042465d3f5bffbR297

[H-02]VoteEscrowDelegation._writeCheckpointfails whennCheckpointsis 0
Submitted by GimelSec, also found by 0x52, 0xA5DF, 0xsanson, 0xSky, arcoun, Bahurum, berndartmueller, CertoraInc, cryptphi, ElKu, GalloDaSballo, hansfriese, JohnSmith, kenzo, kyteg, Lambda, MEP, panprog, rajatbeladiya, scaraven, simon135, Twpony, and zzzitron
https://github.com/code-423n4/2022-07-golom/blob/main/contracts/vote-escrow/VoteEscrowDelegation.sol#L101
https://github.com/code-423n4/2022-07-golom/blob/main/contracts/vote-escrow/VoteEscrowDelegation.sol#L82-L86
When a user callVoteEscrowDelegation.delegateto make a delegation, it callsVoteEscrowDelegation._writeCheckpointto update the checkpoint oftoTokenId. However, ifnCheckpointsis 0,_writeCheckpointalways reverts. What’s worse,nCheckpointswould be zero before any delegation has been made. In conclusion, users cannot make any delegation.
Proof of Concept
When a user callVoteEscrowDelegation.delegateto make a delegation, it callsVoteEscrowDelegation._writeCheckpointto update the checkpoint oftoTokenId.https://github.com/code-423n4/2022-07-golom/blob/main/contracts/vote-escrow/VoteEscrowDelegation.sol#L82-L86
function delegate(uint256 tokenId, uint256 toTokenId) external {require(ownerOf(tokenId) == msg.sender, 'VEDelegation: Not allowed');require(this.balanceOfNFT(tokenId) >= MIN_VOTING_POWER_REQUIRED, 'VEDelegation: Need more voting power');delegates[tokenId] = toTokenId;uint256 nCheckpoints = numCheckpoints[toTokenId];if (nCheckpoints > 0) {Checkpoint storage checkpoint = checkpoints[toTokenId][nCheckpoints - 1];checkpoint.delegatedTokenIds.push(tokenId);_writeCheckpoint(toTokenId, nCheckpoints, checkpoint.delegatedTokenIds);} else {uint256[] memory array = new uint256[](1);array[0] = tokenId;_writeCheckpoint(toTokenId, nCheckpoints, array);}emit DelegateChanged(tokenId, toTokenId, msg.sender);}
ifnCheckpointsis 0,_writeCheckpointalways reverts.Becausecheckpoints[toTokenId][nCheckpoints - 1]will trigger underflow in Solidity 0.8.11https://github.com/code-423n4/2022-07-golom/blob/main/contracts/vote-escrow/VoteEscrowDelegation.sol#L101
function _writeCheckpoint(uint256 toTokenId,uint256 nCheckpoints,uint256[] memory _delegatedTokenIds) internal {require(_delegatedTokenIds.length < 500, 'VVDelegation: Cannot stake more');Checkpoint memory oldCheckpoint = checkpoints[toTokenId][nCheckpoints - 1];…}
Recommended Mitigation Steps
Fix_writeCheckpoint
function _writeCheckpoint(uint256 toTokenId,uint256 nCheckpoints,uint256[] memory _delegatedTokenIds) internal {require(_delegatedTokenIds.length < 500, 'VVDelegation: Cannot stake more');if (nCheckpoints > 0 && oldCheckpoint.fromBlock == block.number) {Checkpoint memory oldCheckpoint = checkpoints[toTokenId][nCheckpoints - 1];oldCheckpoint.delegatedTokenIds = _delegatedTokenIds;} else {checkpoints[toTokenId][nCheckpoints] = Checkpoint(block.number, _delegatedTokenIds);numCheckpoints[toTokenId] = nCheckpoints + 1;}}
zeroexdead (Golom) confirmed
zeroexdead (Golom) resolved and commented:
Fixed.
Ref:https://github.com/golom-protocol/contracts/commit/95e83a1abead683083b7ddf07853a26803c70b88

[H-03] GolomTrader’s_settleBalancesdouble counts protocol fee, reducing taker’s payout for a NFT sold
Submitted by hyh, also found by 0x52, 0xSky, auditor0517, ElKu, kaden, Krow10, Lambda, Limbooo, obront, rbserver, rotcivegaf, RustyRabbit, scaraven, wastewa, and zzzitron
Currently(o.totalAmt * 50) / 10000)protocol fee share is multiplied byamounttwice when being accounted for as a deduction from the total in amount due to themsg.sendertaker calculations in _settleBalances(), which is called by fillBid() and fillCriteriaBid() to handle the payouts.
Setting the severity to be high as reduced payouts is a fund loss impact for taker, which receives less than it’s due wheneveramount > 1.
Notice that the amount lost to the taker is left on the contract balance and currently is subject to other vulnerabilities, i.e. can be easily stolen by an attacker that knowns these specifics and tracks contract state. When these issues be fixed this amount to be permanently frozen on the GolomTrader’s balance as it’s unaccounted for in all subsequent calculations (i.e. all the transfers are done with regard to the accounts recorded, this extra sum is unaccounted, there is no general native funds rescue function, so when all other mechanics be fixed the impact will be permanent freeze of the part of taker’s funds).
Proof of Concept
_settleBalances() uses(o.totalAmt - protocolfee - ...) * amount, which iso.totalAmt * amount - ((o.totalAmt * 50) / 10000) * amount * amount - ..., counting protocol fee extraamount - 1times:
https://github.com/code-423n4/2022-07-golom/blob/e5efa8f9d6dda92a90b8b2c4902320acf0c26816/contracts/core/GolomTrader.sol#L389-L399
payEther((o.totalAmt-protocolfee-o.exchange.paymentAmt-o.prePayment.paymentAmt-o.refererrAmt) *amount-p.paymentAmt,msg.sender);}else{payEther((o.totalAmt-protocolfee-o.exchange.paymentAmt-o.prePayment.paymentAmt) *amount-p.paymentAmt,msg.sender);
https://github.com/code-423n4/2022-07-golom/blob/e5efa8f9d6dda92a90b8b2c4902320acf0c26816/contracts/core/GolomTrader.sol#L375-L400
function_settleBalances(Ordercalldatao,uint256amount,addressreferrer,Paymentcalldatap)internal{uint256protocolfee= ((o.totalAmt*50) /10000) *amount;WETH.transferFrom(o.signer,address(this),o.totalAmt*amount);WETH.withdraw(o.totalAmt*amount);payEther(protocolfee,address(distributor));payEther(o.exchange.paymentAmt*amount,o.exchange.paymentAddress);payEther(o.prePayment.paymentAmt*amount,o.prePayment.paymentAddress);if(o.refererrAmt>0&&referrer!=address(0)) {payEther(o.refererrAmt*amount,referrer);payEther((o.totalAmt-protocolfee-o.exchange.paymentAmt-o.prePayment.paymentAmt-o.refererrAmt) *amount-p.paymentAmt,msg.sender);}else{payEther((o.totalAmt-protocolfee-o.exchange.paymentAmt-o.prePayment.paymentAmt) *amount-p.paymentAmt,msg.sender);}
Say, ifamount = 6, while((o.totalAmt * 50) / 10000) = 1 ETH,6 ETHis totalprotocolfeeand needs to be removed fromo.totalAmt * 6to calculate taker’s part, while1 ETH * 6 * 6 = 36 ETHis actually removed in the calculation, i.e.36 - 6 = 30 ETHof taker’s funds will be frozen on the contract balance.
Recommended Mitigation Steps
Consider accounting foramountonce, for example:
https://github.com/code-423n4/2022-07-golom/blob/e5efa8f9d6dda92a90b8b2c4902320acf0c26816/contracts/core/GolomTrader.sol#L375-L403
function_settleBalances(Ordercalldatao,uint256amount,addressreferrer,Paymentcalldatap)internal{-uint256protocolfee= ((o.totalAmt*50) /10000) *amount;+uint256protocolfee= ((o.totalAmt*50) /10000);WETH.transferFrom(o.signer,address(this),o.totalAmt*amount);WETH.withdraw(o.totalAmt*amount);-payEther(protocolfee,address(distributor));+payEther(protocolfee*amount,address(distributor));payEther(o.exchange.paymentAmt*amount,o.exchange.paymentAddress);payEther(o.prePayment.paymentAmt*amount,o.prePayment.paymentAddress);if(o.refererrAmt>0&&referrer!=address(0)) {payEther(o.refererrAmt*amount,referrer);payEther((o.totalAmt-protocolfee-o.exchange.paymentAmt-o.prePayment.paymentAmt-o.refererrAmt) *amount-p.paymentAmt,msg.sender);}else{payEther((o.totalAmt-protocolfee-o.exchange.paymentAmt-o.prePayment.paymentAmt) *amount-p.paymentAmt,msg.sender);}payEther(p.paymentAmt,p.paymentAddress);-distributor.addFee([msg.sender,o.exchange.paymentAddress],protocolfee);+distributor.addFee([msg.sender,o.exchange.paymentAddress],protocolfee*amount);}
0xsaruman (Golom) confirmed
0xsaruman (Golom) resolved and commented:
Resolvedhttps://github.com/golom-protocol/contracts/commit/366c0455547041003c28f21b9afba48dc33dc5c7#diff-63895480b947c0761eff64ee21deb26847f597ebee3c024fb5aa3124ff78f6ccR390

[H-04] Old delegatee not deleted when delegating to new tokenId
Submitted by Lambda, also found by 0x52, 0xA5DF, 0xDjango, 0xpiglet, 0xsanson, arcoun, Bahurum, berndartmueller, cccz, dipp, GalloDaSballo, GimelSec, GiveMeTestEther, Green, kenzo, kyteg, MEP, neumo, obront, panprog, rajatbeladiya, scaraven, and Twpony
VoteEscrowDelegation.sol#L80
Indelegate, when a user delegates to a new tokenId, the tokenId is not removed from the current delegatee. Therefore, one user can easily multiply his voting power, which makes the toking useless for voting / governance decisions.
Proof Of Concept
Bob owns the token with ID 1 with a current balance of 1000. He also owns tokens 2, 3, 4, 5. Therefore, he callsdelegate(1, 2),delegate(1, 3),delegate(1, 4),delegate(1, 5). Now, if there is a governance decision andgetVotesis called, Bobs balance of 1000 is included in token 2, 3, 4, and 5. Therefore, he quadrupled the voting power of token 1.
Recommended Mitigation Steps
Remove the entry indelegatedTokenIdsof the old delegatee or simply callremoveDelegationfirst.
zeroexdead (Golom) confirmed
zeroexdead (Golom) commented:
Fixed.Ref:https://github.com/golom-protocol/contracts/commit/c74d95b4105eeb878d2781982178db5ca08a1a9b

[H-05]addFeewill stop accumulating fee oncerewardTokenhas reached max supply
Submitted by shenwilly, also found by 0x52, berndartmueller, GimelSec, GiveMeTestEther, kaden, Lambda, M0ndoHEHE, obront, Picodes, rbserver, reassor, rokinot, and scaraven
RewardDistributorwill stop accumulating fees for staker rewards oncerewardTokensupply has reached the maximum supply (1 billion).
Vulnerability Details
RewardDistributor.sol#L98-L138
function addFee(address[2] memory addr, uint256 fee) public onlyTrader {if (rewardToken.totalSupply() > 1000000000 * 10**18) {// if supply is greater then a billion dont mint anything, dont add tradesreturn;}...feesTrader[addr[0]][epoch] = feesTrader[addr[0]][epoch] + fee;feesExchange[addr[1]][epoch] = feesExchange[addr[1]][epoch] + fee;epochTotalFee[epoch] = epochTotalFee[epoch] + fee;}
The check at the beginning ofaddFeeis supposed to stopRewardDistributorfrom minting additional rewardToken once it has reached 1 billion supply. However, the current implementation has a side effect of causing the function to skip recording accumulated trading fees (the last 3 lines of the function). This will cause stakers to lose their trading fee rewards once the max supply has been reached, and the funds will be permanently locked in the contract.
Proof of Concept
Alice stakedGOLOMto receive fee rewards fromRewardDistributor.GOLOMsupply reaches 1 billion token.Traders keep trading onGolomTrader, sending protocol fees toRewardDistributor. However,RewardDistributor.addFeedoes not update the fee accounting.Alice won’t receive any fee reward and protocol fees are stuck in the contract.
Recommended Mitigation Steps
ModifyaddFeeso that the check won’t skip accruing trade fees:
function addFee(address[2] memory addr, uint256 fee) public onlyTrader {if (block.timestamp > startTime + (epoch) * secsInDay) {uint256 previousEpochFee = epochTotalFee[epoch];epoch = epoch + 1;if (rewardToken.totalSupply() > 1000000000 * 10**18) {emit NewEpoch(epoch, 0, 0, previousEpochFee);} else {uint256 tokenToEmit = (dailyEmission * (rewardToken.totalSupply() - rewardToken.balanceOf(address(ve)))) /rewardToken.totalSupply();uint256 stakerReward = (tokenToEmit * rewardToken.balanceOf(address(ve))) / rewardToken.totalSupply();rewardStaker[epoch] = stakerReward;rewardTrader[epoch] = ((tokenToEmit - stakerReward) * 67) / 100;rewardExchange[epoch] = ((tokenToEmit - stakerReward) * 33) / 100;rewardToken.mint(address(this), tokenToEmit);epochBeginTime[epoch] = block.number;if (previousEpochFee > 0) {if (epoch == 1){epochTotalFee[0] =  address(this).balance; // staking and trading rewards start at epoch 1, for epoch 0 all contract ETH balance is converted to staker rewards rewards.weth.deposit{value: address(this).balance}();}else{weth.deposit{value: previousEpochFee}();}}emit NewEpoch(epoch, tokenToEmit, stakerReward, previousEpochFee);}}feesTrader[addr[0]][epoch] = feesTrader[addr[0]][epoch] + fee;feesExchange[addr[1]][epoch] = feesExchange[addr[1]][epoch] + fee;epochTotalFee[epoch] = epochTotalFee[epoch] + fee;return;}
0xsaruman (Golom) confirmed
0xsaruman (Golom) resolved and commented:
Resolved inhttps://github.com/golom-protocol/contracts/commit/192e152dde2eed6c01a3945aa5fd223ff786ca5e

[H-06] NFT transferring won’t work because of the external call toremoveDelegation.
Submitted by CertoraInc, also found by 0xA5DF, 0xsanson, Bahurum, carlitox477, cryptphi, GalloDaSballo, kenzo, MEP, and TrungOre
https://github.com/code-423n4/2022-07-golom/blob/e5efa8f9d6dda92a90b8b2c4902320acf0c26816/contracts/vote-escrow/VoteEscrowDelegation.sol#L242
https://github.com/code-423n4/2022-07-golom/blob/e5efa8f9d6dda92a90b8b2c4902320acf0c26816/contracts/vote-escrow/VoteEscrowDelegation.sol#L211
TheVoteEscrowDelegation._transferFromfunction won’t work because it callsthis.removeDelegation(_tokenId). TheremoveDelegationfunction is external, so when the call is done bythis.removeDelegation(_tokenId)msg.sender changes to the contract address.
This causes the check in the `` function to (most likely) fail because the contract is not the owner of the NFT, and that will make the function revert.require(ownerOf(tokenId) == msg.sender, 'VEDelegation: Not allowed');
Recommended Mitigation Steps
Make theremoveDelegationfunction public and call it without changing the context (i.e. without changing msg.sender to the contract’s address).
zeroexdead (Golom) confirmed
zeroexdead (Golom) commented:
Fixed.Ref:https://github.com/golom-protocol/contracts/commit/10ec920765a5ee2afc2fe269d32ea9138d1156b6
0xsaruman (Golom) resolved

[H-07]_writeCheckpointdoes not write to storage on same block
Submitted by async, also found by 0xA5DF, 0xpiglet, 0xsanson, ak1, DimitarDimitrov, Dravee, ElKu, IllIllI, JohnSmith, kenzo, and scaraven
VoteEscrowDelegation.sol#L101-L108
InVoteEscrowDelegation._writeCheckpoint, when the checkpoint is overwritten in the same block the new value is set withmemory oldCheckpointand thus is never written to storage.
CheckpointmemoryoldCheckpoint=checkpoints[toTokenId][nCheckpoints-1];if(nCheckpoints>0&&oldCheckpoint.fromBlock==block.number) {oldCheckpoint.delegatedTokenIds=_delegatedTokenIds;}
Users that remove and delegate a token (or calldelegateon the same token twice) in the same block will only have their first delegation persisted.
Proof of Concept
User delegates atokenIdby callingdelegate.In the same block, the user decides to delgate the same token to a different token ID and callsdelegateagain which calls_writeCheckpoint.  Since this is the second transaction in the same block the if statement in the code block above executes and stores_delegatedTokenIdsinmemory oldCheckpoint, thus not persisting the array of_delegatedTokenIdsin the checkpoint.
Recommended Mitigation Steps
Define theoldCheckpointvariable as astoragepointer:
Checkpoint storage oldCheckpoint = checkpoints[toTokenId][nCheckpoints - 1];
0xA5DF (warden) commented:
Just want to add to the impact (in case the judges consider to decrease severity), in my report of this bug (#625) I’ve mentioned a more severe impact:An attacker can use this to multiplying his delegation power endlessly, by adding a delegation and removing it in the same block (using a contract to run those 2 functions in the same tx). The delegation will succeed but the removal will fail, this way each time this runs the user delegates again the same token.
zeroexdead (Golom) confirmed
zeroexdead (Golom) commented:
Fixed.
Ref:https://github.com/golom-protocol/contracts/commit/74b2e718f6ae9da815b52242a44451527d60d1ae
0xsaruman (Golom) resolved

[H-08]  Users can avoid paying fees while trading trustlessly & using Golom’s network effects
Submitted by kankodu
If a maker makes below mentionedAvoidsFeesContractareservedAddressand hides the info about how much they want their NFT inorder.root, they can avoid paying fees while trading trustlessly and using the nework effects of golom maketplace with 0o.totalAmt. See POC to get a better idea.Here the maker uses order.root to hide the amount they want to get paid because it is much cleaner for a POC.But since golom does not have an API where user can submit a signature without using the frontend, they will use something like deadline to hide the amount they want to get paid.Reason they would use deadline is because that is something they can control in the golom NFT frontendThey can pack the information about deadline and amount they want to get paid, in one uint256 as a deadline and then the check in the contract would look a different
Proof of Concept
Clone therepoand runyarnCreate aAvoidsFeesContract.solcontract incontracts/test/folder with following code
//contract that avoids paying fees everytimepragma solidity 0.8.11;import "../core/GolomTrader.sol";//A maker will be gurranteed a payout if it makes this contract the reservedAddress and hide the payment info about how much they want in Oder.root//Users will use this every time to trade to avoid paying fees//They use the networking effects of the golom marketplace without paying the feescontract AvoidsFeesContract {GolomTrader public immutable golomTrader;constructor(GolomTrader _golomTrader) {golomTrader = _golomTrader;}function fillAsk(GolomTrader.Order calldata o,uint256 amount,address referrer,GolomTrader.Payment calldata p,address receiver) public payable {require(o.reservedAddress == address(this),"not allowed if signer has not reserved this contract"); //the signer will only allow this contract to execute the trade and since it has following checks, they will be guranteed a payout they want without paying the feesrequire(p.paymentAddress == o.signer,"signer needs to be the payment address");//I am using root as an example because it is much cleaner for a POC.//but since golom does not have an API where user can submit a signature without using the frontend, they will use something like deadline to hide the amount they want to get paid.//Reason they would use deadline is because that is something they can control in the golom NFT frontend//They can pack the information about deadline and amount they want to get paid, in one uint256 as a deadline and then the check below would look a little differentrequire(p.paymentAmt == uint256(o.root),"you need to pay what signer wants"); //the maker will hide the payment info in oder.rootgolomTrader.fillAsk{value: msg.value}(o,amount,referrer,p,receiver = msg.sender);}}
Add following test intest/GolomTrader.specs.tshere.Also, addconst AvoidsFeesContractArtifacts = ethers.getContractFactory('AvoidsFeesContract');afterthisline andimport { AvoidsFeesContract as AvoidsFeesContractTypes } from '../typechain/AvoidsFeesContract';afterthisline.Runnpx hardhat compile && npx hardhat test
it.only('should allow malicious contract to execute the trade while bypassing the fees', async () => {//deploy the malicious contractconst avoidsFeesContract: AvoidsFeesContractTypes = (await (await AvoidsFeesContractArtifacts).deploy(golomTrader.address)) as AvoidsFeesContractTypes;//here the frontend calculates exchangeAmount and prePaymentAmt as a percentage of how much the make wants to receive for their NFT.//as far as the frontend is concerned, the maker inputs 0 for their NFT value which in turn makes the exchangeAmount and prePaymentAmt 0let exchangeAmount = ethers.utils.parseEther('0'); // nothing to the exchangelet prePaymentAmt = ethers.utils.parseEther('0'); // no royalty cutlet totalAmt = ethers.utils.parseEther('0');let tokenId = await testErc721.current();let nftValueThatMakerWants = ethers.utils.parseEther('10.25');const order = {collection: testErc721.address,tokenId: tokenId,signer: await maker.getAddress(),orderType: 0,totalAmt: totalAmt,exchange: { paymentAmt: exchangeAmount, paymentAddress: await exchange.getAddress() },prePayment: { paymentAmt: prePaymentAmt, paymentAddress: await prepay.getAddress() },isERC721: true,tokenAmt: 1,refererrAmt: 0,root: ethers.utils.hexZeroPad(nftValueThatMakerWants.toHexString(), 32), //convert Bignumber to bytes32reservedAddress: avoidsFeesContract.address,nonce: 0,deadline: Date.now() + 100000,r: '',s: '',v: 0,};let signature = (await maker._signTypedData(domain, types, order)).substring(2); //a valid signature as far as your frontend goesorder.r = '0x' + signature.substring(0, 64);order.s = '0x' + signature.substring(64, 128);order.v = parseInt(signature.substring(128, 130), 16);let makerBalanceBefore = await ethers.provider.getBalance(await maker.getAddress());await avoidsFeesContract.connect(taker).fillAsk(order,1,'0x0000000000000000000000000000000000000000',{paymentAmt: nftValueThatMakerWants,paymentAddress: order.signer,},receiver,{value: nftValueThatMakerWants,});let makerBalanceAfter = await ethers.provider.getBalance(await maker.getAddress());expect(await testErc721.balanceOf(await taker.getAddress())).to.be.equals('1');expect(makerBalanceAfter.sub(makerBalanceBefore)).to.be.equals(nftValueThatMakerWants);//maker is guaranteed a payout});
Tools Used
Therepoitself. (hardhat)
Recommended Mitigation Steps
Make sure that o.totalAmt is greater than p.paymentAmt in addition tothischeck
0xsaruman (Golom) confirmed
0xsaruman (Golom) resolved and commented:
Circumvented by putting this line in the coderequire(o.totalAmt * amount * 15/100 >= p.paymentAmt, 'can only pay 15% extra');

[H-09] Repeated calls tomultiStakerClaimin the same block leads to loss of funds
Submitted by Krow10
https://github.com/code-423n4/2022-07-golom/blob/e5efa8f9d6dda92a90b8b2c4902320acf0c26816/contracts/rewards/RewardDistributor.sol#L172-L210
https://github.com/code-423n4/2022-07-golom/blob/e5efa8f9d6dda92a90b8b2c4902320acf0c26816/contracts/rewards/RewardDistributor.sol#L185
A malicious user can repeatedly claim the same staker reward for an epoch, provided the transactions all happen in the same block. This can effectively be done using services likeFlashbots bundlesand will result in the draining of the WETH balance of theRewardDistributorcontract.
The idea is to bypass the require statementline 185which checks if a claim has been already done for the epoch,for a specific token ID. By moving the locked tokens in a new lock, a new token ID will be generated and can be used to claim the rewards again,if the transaction happens in the same block for which the epoch is updated.
Indeed, whenmultiStakerClaim()is called, therewardETHwill be calculated from the amount of tokens locked intokenids[tindex]at the block that triggered the epoch change (variableepochBeginTime). If, during this time, an attacker transfers its staked tokens to a new vault using themergefunction of the VE token, the function will calculate the amount of staked tokens for the newly created tokenIDas the same as the original tokenID reward.
A example abuse will look like this (pseudo-code adapted from the PoC) :
lockID=voteEscrow.create_lock(amount,1week);// Create lock #1 before// IN THE BLOCK OF EPOCH CHANGErewardDistributor.multiStakerClaim([lockId], [0]);// Claim epoch 0 rewards for lock #1voteEscrow.create_lock(1,1week);// Create lock #2 (requires 1 Golom token, could be created in advance)voteEscrow.merge(lockId,lockId+1);// Transfer lock #1 tokens to lock #2rewardDistributor.multiStakerClaim([lockId+1], [0]);// Claim same epoch rewards for lock #2// repeat ...
To abuse this, the attacker needs to follow this steps:
Have some locked Golom tokens.Wait for aaddFeecall that will trigger an epoch change (this can be monitored by looking at the mempool or predicted from block timestamps). Services like Flashbots alsoallows for specifying a range of blocks for bundlesfor better targeting.Send a bundle of transactions to be included with the block containing the epoch changing transaction (see the PoC for an example of transactions).
Note that this needs to succeed only once to allow an attacker to drain all WETH funds so if the bundle isn’t included for a particular epoch, given the frequency of epoch changes, the bundle will eventually be included and trigger the exploit.
Proof of Concept
See warden’soriginal submissionfor full proof of concept.
Recommended Mitigation Steps
I initially thought about a few possible solutions:
Checking a lock creation time to prevent claiming from locks created in the same blockbut the attacker can just create the blocks beforehand.Tracking themsg.senderortx.originfor preventing multiple calls tomultiStakerClaimin the same blockbut the attacker can just send transactions from different addresses.Preventing the merging of locksbut the attacker can just create locks in advance and withdraw/add funds continuously between old/new locks.
None really fixes the vulnerability as it comes from the feature oflocks being tradablemeaning it’s not practically feasable to know if a lock has already be claimed by an individualjust by looking at the lock ID.
A possible solution would be to find a way to prevent multiple calls to the same function within a block or better, make a checkpoint of the locks balances for eachepochBeginTimeand uses these values for calculating the rewards (instead of querying the VE contract in the loop).
0xsaruman (Golom) confirmed
0xsaruman (Golom) resolved and commented:
Removedmerge()Ref:https://github.com/golom-protocol/contracts/commit/b987077f2a227273bc7051e382bd55264162a77e

[H-10] Upon changing of delegate,VoteDelegationupdates both the previous and the current checkpoint
Submitted by kenzo, also found by 0xA5DF, 0xpiglet, 0xsanson, arcoun, Bahurum, and IllIllI
https://github.com/code-423n4/2022-07-golom/blob/main/contracts/vote-escrow/VoteEscrowDelegation.sol#L79
https://github.com/code-423n4/2022-07-golom/blob/main/contracts/vote-escrow/VoteEscrowDelegation.sol#L213
The contract is accidently editing both the previous and current checkpoint when changing/removing a delegate.
Impact
Incorrect counting of votes.
Proof of Concept
If indelegatethe delegate already has checkpoints, the function will grab the latest checkpoint, and add thetokenIdto it. Note that it changes the storage variable.
if(nCheckpoints>0) {Checkpointstoragecheckpoint=checkpoints[toTokenId][nCheckpoints-1];checkpoint.delegatedTokenIds.push(tokenId);_writeCheckpoint(toTokenId,nCheckpoints,checkpoint.delegatedTokenIds);
It then calls_writeCheckpoint, whichwill adda new checkpoint if there’s no checkpoint created for this block yet:
CheckpointmemoryoldCheckpoint=checkpoints[toTokenId][nCheckpoints-1];if(nCheckpoints>0&&oldCheckpoint.fromBlock==block.number) {oldCheckpoint.delegatedTokenIds=_delegatedTokenIds;}else{checkpoints[toTokenId][nCheckpoints] =Checkpoint(block.number,_delegatedTokenIds);numCheckpoints[toTokenId] =nCheckpoints+1;}
Therefore, if this function has created a new checkpoint with the passed_delegatedTokenIds, we already saw that the previous function has already addedtokenIdto the previous checkpoint, so now both the new checkpoint and the previous checkpoint will havetokenIdin them.This is wrong as it updates an earlier checkpoint with the latest change.
The same situation happens inremoveDelegation.
Recommended Mitigation Steps
When reading the latest checkpoint:
Checkpointstoragecheckpoint=checkpoints[toTokenId][nCheckpoints-1];
Change thestoragetomemory. This way it will not affect the previous checkpoint, but will pass the correct updated array to_writeCheckpoint, which will then write/update the correct checkpoint.
zeroexdead (Golom) confirmed and commented:
Fixeddelegate():https://github.com/golom-protocol/contracts/commit/8a8c89beea22cd57f4ffaf3d0defcce863e9657fFixedremoveDelegation():https://github.com/golom-protocol/contracts/commit/72350b0a3bdae4f21e2f015327037080f6bab867
LSDan (judge) increased severity to High and commented:
I went back and forth on if this was a duplicate ofH-04 (#169)or not. The two issues are so similar it’s hard to pull them apart. Ultimately I do see the difference, mainly that this version of the issue results in a retroactive manipulation of voting power whereas the other issue allows the creation of infinite voting power. I’m upgrading this to high risk because it effectively destroys the integrity of the voting system which impacts every aspect of the protocol which is subject to vote.

[H-11] Cannot remove delegation from a token to another token
Submitted by Bahurum, also found by 0x52, 0xA5DF, 0xsanson, berndartmueller, cccz, CertoraInc, dipp, GalloDaSballo, GimelSec, Green, IllIllI, kenzo, MEP, panprog, and scaraven
VoteEscrowDelegation.sol#L213
A user who has delegated the vote of a veGolom token (that he/she owns) to another veGolom token cannot remove the delegation, so the delegatee token will permanently hold the voting power of the delegator token.
Proof of Concept
A user tries to remove the delegation fromtokenIdhe/she owns to the delegated token, callingremoveDelegation(uint256 tokenId).The delegation should be removed at the lines:
Checkpointstoragecheckpoint=checkpoints[tokenId][nCheckpoints-1];removeElement(checkpoint.delegatedTokenIds,tokenId);
but the arraycheckpoint.delegatedTokenIdsis the list ofdelegatorstotokenIditself. So, unless the delegation was from the token to itself,removeDelegationdoes nothing.
Recommended Mitigation Steps
Two fixes are proposed:
Add the delegatee as an argument toremoveDelegationand removetokenIdfrom its list of delegators:
-   function removeDelegation(uint256 tokenId) external {+   function removeDelegation(uint256 tokenId, uint256 toTokenId) external {require(ownerOf(tokenId) == msg.sender, 'VEDelegation: Not allowed');uint256 nCheckpoints = numCheckpoints[tokenId];-       Checkpoint storage checkpoint = checkpoints[tokenId][nCheckpoints - 1];+       Checkpoint storage checkpoint = checkpoints[toTokenId][nCheckpoints - 1];removeElement(checkpoint.delegatedTokenIds, tokenId);_writeCheckpoint(tokenId, nCheckpoints, checkpoint.delegatedTokenIds);}
or
Load the delegatee from the mappingdelegateswhich maps each delegator to its current delegatee:
function removeDelegation(uint256 tokenId) external {require(ownerOf(tokenId) == msg.sender, 'VEDelegation: Not allowed');+       uint256 toTokenId = delegates[tokenId];uint256 nCheckpoints = numCheckpoints[tokenId];-       Checkpoint storage checkpoint = checkpoints[tokenId][nCheckpoints - 1];+       Checkpoint storage checkpoint = checkpoints[toTokenId][nCheckpoints - 1];removeElement(checkpoint.delegatedTokenIds, tokenId);_writeCheckpoint(tokenId, nCheckpoints, checkpoint.delegatedTokenIds);}
kenzo (warden) commented:
Note that in the mitigation,nCheckpointsshould accesstoTokenIdinstead oftokenId.
zeroexdead (Golom) confirmed
zeroexdead (Golom) commented:
Fixed.https://github.com/golom-protocol/contracts/commit/4b19fce83ad53bc56b1bad058e1e88d90acda444
0xsaruman (Golom) resolved
LSDan (judge) increased severity to High and commented:
I agree with the other wardens who rated this high risk. It has a direct impact on the functioning of the protocol and allows for a myriad of governance attacks.

