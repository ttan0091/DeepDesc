[H-01]VaderPoolV2minting synths & fungibles can be frontrun
Submitted by cmichel, also found by cccz, Critical, danb, leastwood, and TomFrenchBlockchain
TheVaderPoolV2mintFungibleandmintSynthfunctions perform an unsafenativeAsset.safeTransferFrom(from, address(this), nativeDeposit)with a parameter-specifiedfromaddress.
Note that these functions are not called by the Router, they are directly called on the pool.
Therefore, users will usually be required to send two transactions, a first one approving the pool, and then a second one for the actualmintSynth.
An attacker can frontrun themintSynth(IERC20 foreignAsset, uint256 nativeDeposit, address from, address to)function, use the samefrom=victimparameter but change thetoparameter to the attacker.
Impact
It’s possible to frontrun victims stealing their native token deposits and receiving synths / fungible tokens.
Recommended Mitigation Steps
Remove thefromparameter and always perform thesafeTransferFromcall withfrom=msg.sender.
SamSteinGG (Vader) acknowledged

[H-02]VaderPoolV2owner can steal all user assets which are approvedVaderPoolV2
Submitted by TomFrenchBlockchain
Possible theft of all user assets with an ERC20 approval on VaderPoolV2.
Proof of Concept
The owner ofVaderPoolV2can call thesetTokenSupportfunction which allows the caller to supply any address from which to take the assets to provide the initial liquidity, the owner can also specify who shall receive the resulting LP NFT and so can take ownership over these assets. This call will succeed for any address which has an ERC20 approval onVaderPoolV2for USDV andforeignAsset.
https://github.com/code-423n4/2021-12-vader/blob/00ed84015d4116da2f9db0c68db6742c89e73f65/contracts/dex-v2/pool/VaderPoolV2.sol#L442-L474
This in effect gives custody over all assets in user wallets which are approved onVaderPoolV2to Vader Protocol governance. This is especially problematic in the case of Vader Protocol as there’s a single entity (i.e. the Council) which can force through a proposal to steal these assets for themselves with only the timelock giving protection to users, for this reason I give this high severity.
Recommended Mitigation Steps
Enforce that the initial liquidity is provided by the VaderPoolV2 owner.

[H-03] Oracle doesn’t calculate USDV/VADER price correctly
Submitted by TomFrenchBlockchain, also found by danb and leastwood
Invalid values returned from oracle for USDV and VADER prices in situations where the oracle uses more than one foreign asset.
Proof of Concept
The USDV price is calculated as so (for simplicity we’ll consider a two pairs):
https://github.com/code-423n4/2021-12-vader/blob/fd2787013608438beae361ce1bb6d9ffba466c45/contracts/lbt/LiquidityBasedTWAP.sol#L393-L409
totalUSD =  (PriceForeign0InUSD * liquidityWeights[0] + PriceForeign1InUSD * liquidityWeights[1]) / totalUSDVLiquidityWeight;
totalUSDis then the average price of the foreign assets paired against USDV in terms of USD, weighted by the TVL of the relevant liquidity pool
totalUSDV =(pairData0.nativeTokenPriceAverage.mul(pairData0.foreignUnit).decode144() * liquidityWeights[0] +pairData1.nativeTokenPriceAverage.mul(pairData1.foreignUnit).decode144() * liquidityWeights[1]) /totalUSDVLiquidityWeight;// in pseudocode for readabilitytotalUSDV = (USDVPriceInForeign0 * liquidityWeights[0] + USDVPriceInForeign1 * liquidityWeights[1]) /  totalUSDVLiquidityWeight
totalUSDVis then the average price of USDV in terms of each of the foreign assets, weighted by the TVL of the relevant liquidity pool.
It should be fairly clear that this is the incorrect calculation as all the terms intotalUSDVare in different units - you can’t average the price of USDV in ETH with the price of USDV in BTC and get a meaningful result.
It appears that the VADER team intended to calculate the price of USDV in terms of USD through a number of different paired assets and then average them at the end based on the liquidity in each pair but have started averaging too early.
High severity issue as the oracle is crucial for determining the exchange rate between VADER and USDV to be used for IL protection and minting/burning of USDV - an incorrect value will result in the protocol losing significant funds.
Recommended Mitigation Steps
Review the algorithm used for calculating the prices of assets and ensure that it’s calculating what you expect.
SamSteinGG (Vader) acknowledged

[H-04] Vader TWAP averages wrong
Submitted by cmichel
The vader price inLiquidityBasedTWAP.getVaderPriceis computed using thepastLiquidityWeightsandpastTotalLiquidityWeightreturn values of thesyncVaderPrice.
ThesyncVaderPricefunction does not initialize all weights and the total liquidity weight does not equal the sum of the individual weights because it skips initializing the pair with the previous data if the TWAP update window has not been reached yet:
functionsyncVaderPrice()publicoverridereturns(uint256[]memorypastLiquidityWeights,uint256pastTotalLiquidityWeight){uint256_totalLiquidityWeight;uint256totalPairs=vaderPairs.length;pastLiquidityWeights=newuint256[](totalPairs);pastTotalLiquidityWeight=totalLiquidityWeight[uint256(Paths.VADER)];for(uint256i;i<totalPairs; ++i) {IUniswapV2Pairpair=vaderPairs[i];ExchangePairstoragepairData=twapData[address(pair)];// @audit-info lastMeasurement is set in _updateVaderPrice to block.timestampuint256timeElapsed=block.timestamp-pairData.lastMeasurement;// @audit-info update period depends on pair// @audit-issue if update period not reached => does not initialize pastLiquidityWeights[i]if(timeElapsed<pairData.updatePeriod)continue;uint256pastLiquidityEvaluation=pairData.pastLiquidityEvaluation;uint256currentLiquidityEvaluation=_updateVaderPrice(pair,pairData,timeElapsed);pastLiquidityWeights[i] =pastLiquidityEvaluation;pairData.pastLiquidityEvaluation=currentLiquidityEvaluation;_totalLiquidityWeight+=currentLiquidityEvaluation;}totalLiquidityWeight[uint256(Paths.VADER)] =_totalLiquidityWeight;}
POC
This bug leads to several different issues. A big one is that an attacker can break the price functions and make them revert.
Observe what happens if an attacker callssyncVaderPricetwice in the same block:
The first time any pairs that need to be updated are updatedOn the second call_totalLiquidityWeightis initialized to zero and all pairs have already been updated and thus skipped._totalLiquidityWeightnever increases and the storage variabletotalLiquidityWeight[uint256(Paths.VADER)] = _totalLiquidityWeight = 0;is set to zero.DoS because calls togetStaleVaderPrice/getVaderPricewill revert in_calculateVaderPricewhich divides bytotalLiquidityWeight = 0.
Attacker keeps double-callingsyncVaderPriceevery time an update window of one of the pairs becomes eligible to be updated.
Impact
This bug leads to using wrong averaging and ignoring entire pairs due to their weights being initialized to zero and never being changed if the update window is not met.
This in turn makes it easier to manipulate the price as potentially only a single pair needs to be price-manipulated.
It’s also possible to always set thetotalLiquidityWeightto zero by callingsyncVaderPricetwice which in turn reverts all transactions making use of the price because of a division by zero in_caluclateVaderPrice.
An attacker can break theUSDV.mintminting forever and any router calls toVaderReserve.reimburseImpermanentLossalso fail as they perform a call to the reverting price function.
Recommended Mitigation Steps
Even iftimeElapsed < pairData.updatePeriod, the old pair weight should still contribute to the total liquidity weight and be set inpastLiquidityWeights.
Move the_totalLiquidityWeight += currentLiquidityEvaluationand thepastLiquidityWeights[i] = pastLiquidityEvaluationassignments before thecontinue.
SamSteinGG (Vader) confirmed

[H-05] Oracle returns an improperly scaled USDV/VADER price
Submitted by TomFrenchBlockchain
Invalid values returned from oracle in vast majority of situations.
Proof of Concept
The LBT oracle does not properly scale values when calculating prices for VADER or USDV. To show this we consider the simplest case where we expect USDV to return a value of $1 and show that the oracle does not return this value.
Consider the case of the LBT oracle tracking a single USDV-DAI pair where USDV trades 1:1 for DAI and Chainlink reports that DAI is exactly $1. We then work through the lines linked below:
https://github.com/code-423n4/2021-12-vader/blob/00ed84015d4116da2f9db0c68db6742c89e73f65/contracts/lbt/LiquidityBasedTWAP.sol#L393-L409
For L397 we get a value of 1e8 as Chainlink reports the price of DAI with 8 decimals of accuracy.
foreignPrice = getChainlinkPrice(address(foreignAsset));foreignPrice = 1e8
We can setliquidityWeights[i]andtotalUSDVLiquidityWeightboth to 1 as we only consider a single pair so L399-401 becomes
totalUSD = foreignPrice;totalUSD = 1e8;
L403-408 is slightly more complex but from looking at the links below we can calculatetotalUSDVas shownhttps://github.com/code-423n4/2021-12-vader/blob/00ed84015d4116da2f9db0c68db6742c89e73f65/contracts/dex-v2/pool/VaderPoolV2.sol#L81-L90https://github.com/code-423n4/2021-12-vader/blob/00ed84015d4116da2f9db0c68db6742c89e73f65/contracts/external/libraries/FixedPoint.sol#L137-L160
totalUSDV = pairData.nativeTokenPriceAverage.mul(pairData.foreignUnit).decode144()// pairData.nativeTokenPriceAverage == 2**112// pairData.foreignUnit = 10**18// decode144(x) = x >> 112totalUSDV = (2**112).mul(10**18).decode144()totalUSDV = 10**18
UsingtotalUSDandtotalUSDVwe can then calculate the return value of_calculateUSDVPrice
returnValue = (totalUSD * 1 ether) / totalUSDV;returnValue = 1e8 * 1e18 / 1e18returnValue = 1e8
For the oracle implementation to be correct we then expect that the Vader protocol to treat values of 1e8 from the oracle to mean USDV is worth $1. However from the lines of code linked below we can safely assume that it is intended to be that values of 1e18 represent$1 rather than 1e8.
https://github.com/code-423n4/2021-12-vader/blob/00ed84015d4116da2f9db0c68db6742c89e73f65/contracts/tokens/USDV.sol#L76https://github.com/code-423n4/2021-12-vader/blob/00ed84015d4116da2f9db0c68db6742c89e73f65/contracts/tokens/USDV.sol#L109
High severity issue as the oracle is crucial for determining the exchange rate between VADER and USDV to be used for IL protection and minting/burning of USDV - an incorrect value will result in the protocol losing significant funds.
Recommended Mitigation Steps
Go over oracle calculation again to ensure that various scale factors are properly accounted for. Some handling of the difference in the number of decimals between the chainlink oracle and the foreign asset should be added.
Build a test suite to ensure that the oracle returns the expected values for simple situations.
SamSteinGG (Vader) confirmed

[H-06] LPs ofVaderPoolV2can manipulate pool reserves to extract funds from the reserve.
Submitted by TomFrenchBlockchain, also found by hyh
Impermanent loss protection can be exploited to drain the reserve.
Proof of Concept
InVaderPoolV2.burnwe calculate the current losses that the LP has made to impermanent loss.
https://github.com/code-423n4/2021-12-vader/blob/fd2787013608438beae361ce1bb6d9ffba466c45/contracts/dex-v2/pool/VaderPoolV2.sol#L265-L296
These losses are then refunded to the LP in VADER tokens from the reserve.
https://github.com/code-423n4/2021-12-vader/blob/fd2787013608438beae361ce1bb6d9ffba466c45/contracts/dex-v2/router/VaderRouterV2.sol#L220
This loss is calculated by the current reserves of the pool so if an LP can manipulate the pool’s reserves they can artificially engineer a huge amount of IL in order to qualify for a payout up to the size of their LP position.
https://github.com/code-423n4/2021-12-vader/blob/fd2787013608438beae361ce1bb6d9ffba466c45/contracts/dex/math/VaderMath.sol#L72-L92
The attack is then as follows.
Be an LP for a reasonable period of time (IL protection scales linearly up to 100% after a year)Flashloan a huge amount of one of the pool’s assets.Trade against the pool with the flashloaned funds to unbalance it such that your LP position has huge IL.Remove your liquidity and receive compensation from the reserve for the IL you have engineered.Re-add your liquidity back to the pool.Trade against the pool to bring it back into balance.
The attacker now holds the majority of their flashloaned funds (minus slippage/swap fees) along with a large fraction of the value of their LP position in VADER paid out from the reserve. The value of their LP position is unchanged. Given a large enough LP position, the IL protection funds extracted from the reserve will exceed the funds lost to swap fees and the attacker will be able to repay their flashloan with a profit.
This is a high risk issue as after a year any large LP is incentivised and able to perform this attack and drain reserve funds.
Recommended Mitigation Steps
Use a manipulation resistant oracle for the relative prices of the pool’s assets (TWAP, etc.)

[H-07] Redemption value of synths can be manipulated to drainVaderPoolV2of all native assets in the associated pair
Submitted by TomFrenchBlockchain, also found by certora
Draining of funds fromVaderPoolV2.
Proof of Concept
See theVaderPool.mintSynthfunction:https://github.com/code-423n4/2021-12-vader/blob/fd2787013608438beae361ce1bb6d9ffba466c45/contracts/dex-v2/pool/VaderPoolV2.sol#L153-L194
As the pool’s reserves can be manipulated through flashloans similar to on UniswapV2 (the slip mechanism can be mitigated by splitting the manipulation over a number of trades), an attacker may set the exchange rate betweennativeAssetand synths (calculated from the reserves). An attacker can exploit this to drain funds from the pool.
The attacker first flashloans and sells a huge amount offoreignAssetto the pool. The pool now thinksnativeAssetis extremely valuable.The attacker now uses a relatively small amount ofnativeAssetto mint synths usingVaderPool.mintSynth. As the pool thinksnativeAssetis very valuable the attacker will receive a huge amount of synths.The attacker can now manipulate the pool in the opposite direction by buying up theforeignAssetthey sold to the pool.nativeAssetis now back at its normal price, or perhaps artificially low if the attacker wishes.The attacker now burns all of their synths. AsnativeAssetis considered much less valuable than at the point the synths were minted it takes a lot more ofnativeAssetin order to pay out for the burned synths.
For the price of a flashloan and some swap fees, the attacker has now managed to extract a large amount ofnativeAssetfrom the pool. This process can be repeated as long as it is profitable.
Recommended Mitigation Steps
Tie the exchange rate use for minting/burning synths to a manipulation resistant oracle.
SamSteinGG (Vader) acknowledged

[H-08] Reserve does not properly apply prices of VADER and USDV tokens
Submitted by TomFrenchBlockchain
Reserve pays out vastly higher (or lower) IL protection than it should.
Proof of Concept
Consider the lines 98 and 102 as shown on the link below:
https://github.com/code-423n4/2021-12-vader/blob/00ed84015d4116da2f9db0c68db6742c89e73f65/contracts/reserve/VaderReserve.sol#L95-L103
Here we multiply the IL experienced by the LP by a price for USDV or VADER as returned by the LBT. However the price from the oracle is a fixed point number (scaled up by 1e8 or 1e18 depending on the resolution of finding “Oracle returns an improperly scaled USDV/VADER price”) and so a fixed scaling factor should be applied to convert back from a fixed point number to a standard integer.
As it stands depending on the branch which is executed, the amount to be reimbursed will be 1e18 times too large or too small. Should the “else” branch be executed the reserve will pay out much in terms of IL protection resulting in severe loss of funds. High severity.
Recommended Mitigation Steps
Apply similar logic to as displayed here:
https://github.com/code-423n4/2021-12-vader/blob/00ed84015d4116da2f9db0c68db6742c89e73f65/contracts/tokens/USDV.sol#L109

[H-09]USDV.solMint and Burn Amounts Are Incorrect
Submitted by leastwood, also found by TomFrenchBlockchain
TheUSDV.mintfunction queries the price ofVaderfrom theLiquidityBasedTwapcontract. The calculation to determineuAmountinmintis actually performed incorrectly.uAmount = (vPrice * vAmount) / 1e18;will return theUSDamount for the providedVaderasvPriceis denominated inUSD/Vader. ThisuAmountis subsequently used when minting tokens for the user (locked for a period of time) and fee to the contract owner.
This same issue also applies to howvAmount = (uPrice * uAmount) / 1e18;is calculated inUSDV.burn.
This is a severe issue, as themintandburnfunctions will always use an incorrect amount of tokens, leading to certain loss by either the protocol (if the user profits) or the user (if the user does not profit).
Proof of Concept
https://github.com/code-423n4/2021-12-vader/blob/main/contracts/tokens/USDV.sol#L66-L98
function mint(uint256 vAmount)externalonlyWhenNotLockedreturns (uint256 uAmount){uint256 vPrice = lbt.getVaderPrice();vader.transferFrom(msg.sender, address(this), vAmount);vader.burn(vAmount);uAmount = (vPrice * vAmount) / 1e18;if (cycleTimestamp <= block.timestamp) {cycleTimestamp = block.timestamp + 24 hours;cycleMints = uAmount;} else {cycleMints += uAmount;require(cycleMints <= dailyLimit,"USDV::mint: 24 Hour Limit Reached");}if (exchangeFee != 0) {uint256 fee = (uAmount * exchangeFee) / _MAX_BASIS_POINTS;uAmount = uAmount - fee;_mint(owner(), fee);}_mint(address(this), uAmount);_createLock(LockTypes.USDV, uAmount);}
https://github.com/code-423n4/2021-12-vader/blob/main/contracts/tokens/USDV.sol#L100-L120
function burn(uint256 uAmount)externalonlyWhenNotLockedreturns (uint256 vAmount){uint256 uPrice = lbt.getUSDVPrice();_burn(msg.sender, uAmount);vAmount = (uPrice * uAmount) / 1e18;if (exchangeFee != 0) {uint256 fee = (vAmount * exchangeFee) / _MAX_BASIS_POINTS;vAmount = vAmount - fee;vader.mint(owner(), fee);}vader.mint(address(this), vAmount);_createLock(LockTypes.VADER, vAmount);}
Recommended Mitigation Steps
Consider utilising bothgetVaderPriceandgetUSDVPricewhen calculating the expecteduAmountandvAmountto mint or burn. To calculateuAmountinmint,vPriceshould be denominated inUSDV/Vader. To calculatevAmountinburn,uPriceshould be denominated inVader/USDV. It would be useful to add unit tests to test this explicitly as it is expected that users will interact with theUSDV.solcontract frequently.
0xstormtrooper (Vader) disputed and commented:
Mint / burn calculation with USD is intentional, modeled after LUNA / UST.Mint USDV1 USD worth of Vader should mint 1 USDVBurn USDV1 USDV should mint 1 USD worth of Vaderhttps://docs.terra.money/Concepts/Protocol.html#expansion-and-contraction

[H-10]previousPricesIs Never Updated Upon Syncing Token Price
Submitted by leastwood
TheLiquidityBasedTWAPcontract attempts to accurately track the price ofVADERandUSDVwhile still being resistant to flash loan manipulation and short-term volatility. ThepreviousPricesarray is meant to track the last queried price for the two available paths, namelyVADERandUSDV.
ThesetupVaderfunction configures theVADERtoken by settingpreviousPricesand adding a token pair. However,syncVaderPricedoes not updatepreviousPricesafter syncing, causingcurrentLiquidityEvaluationto be dependent on the initial price forVADER. As a result, liquidity weightings do not accurately reflect the current and most up to date price forVADER.
This same issue also affects howUSDVcalculatescurrentLiquidityEvaluation.
This issue is of high risk and heavily impacts the accuracy of the TWAP implementation as the set price forVADER/USDVdiverges from current market prices. For example, as the Chainlink oracle price and initial price forVADERdiverge,currentLiquidityEvaluationwill begin to favour either on-chain or off-chain price data depending on which price result is greater. The following calculation forcurrentLiquidityEvaluationoutlines this behaviour.
currentLiquidityEvaluation =(reserveNative * previousPrices[uint256(Paths.VADER)]) +(reserveForeign * getChainlinkPrice(pairData.foreignAsset));
Proof of Concept
https://github.com/code-423n4/2021-12-vader/blob/main/contracts/lbt/LiquidityBasedTWAP.sol#L150-L189
function _updateVaderPrice(IUniswapV2Pair pair,ExchangePair storage pairData,uint256 timeElapsed) internal returns (uint256 currentLiquidityEvaluation) {bool isFirst = pair.token0() == vader;(uint256 reserve0, uint256 reserve1, ) = pair.getReserves();(uint256 reserveNative, uint256 reserveForeign) = isFirst? (reserve0, reserve1): (reserve1, reserve0);(uint256 price0Cumulative,uint256 price1Cumulative,uint256 currentMeasurement) = UniswapV2OracleLibrary.currentCumulativePrices(address(pair));uint256 nativeTokenPriceCumulative = isFirst? price0Cumulative: price1Cumulative;unchecked {pairData.nativeTokenPriceAverage = FixedPoint.uq112x112(uint224((nativeTokenPriceCumulative -pairData.nativeTokenPriceCumulative) / timeElapsed));}pairData.nativeTokenPriceCumulative = nativeTokenPriceCumulative;pairData.lastMeasurement = currentMeasurement;currentLiquidityEvaluation =(reserveNative * previousPrices[uint256(Paths.VADER)]) +(reserveForeign * getChainlinkPrice(pairData.foreignAsset));}
https://github.com/code-423n4/2021-12-vader/blob/main/contracts/lbt/LiquidityBasedTWAP.sol#L221-L235
function setupVader(IUniswapV2Pair pair,IAggregatorV3 oracle,uint256 updatePeriod,uint256 vaderPrice) external onlyOwner {require(previousPrices[uint256(Paths.VADER)] == 0,"LBTWAP::setupVader: Already Initialized");previousPrices[uint256(Paths.VADER)] = vaderPrice;_addVaderPair(pair, oracle, updatePeriod);}
Recommended Mitigation Steps
Consider updatingpreviousPrices[uint256(Paths.VADER)]andpreviousPrices[uint256(Paths.USDV)]after syncing the respective prices for the two tokens. This will ensure the most up to date price is used when evaluating liquidity for all available token pairs.
SamSteinGG (Vader) acknowledged

[H-11]totalLiquidityWeightIs Updated When Adding New Token Pairs Which Skews Price Data ForgetVaderPriceandgetUSDVPrice
Submitted by leastwood
The_addVaderPairfunction is called by theonlyOwnerrole. The relevant data in thetwapDatamapping is set by querying the respective liquidity pool and Chainlink oracle.totalLiquidityWeightfor theVADERpath is also incremented by thepairLiquidityEvaluationamount (calculated within_addVaderPair). If a user then callssyncVaderPrice, the recently updatedtotalLiquidityWeightwill be taken into consideration when iterating through all token pairs eligible for price updates to calculate the liquidity weight for each token pair. This data is stored inpastTotalLiquidityWeightandpastLiquidityWeightsrespectively.
As a result, newly added token pairs will increasepastTotalLiquidityWeightwhile leavingpastLiquidityWeightsunderrepresented. This only occurs ifsyncVaderPriceis called before the update period for the new token has not been passed.
This issue also affects how the price forUSDVis synced.
Proof of Concept
https://github.com/code-423n4/2021-12-vader/blob/main/contracts/lbt/LiquidityBasedTWAP.sol#L299
function _addVaderPair(IUniswapV2Pair pair,IAggregatorV3 oracle,uint256 updatePeriod) internal {require(updatePeriod != 0,"LBTWAP::addVaderPair: Incorrect Update Period");require(oracle.decimals() == 8, "LBTWAP::addVaderPair: Non-USD Oracle");ExchangePair storage pairData = twapData[address(pair)];bool isFirst = pair.token0() == vader;(address nativeAsset, address foreignAsset) = isFirst? (pair.token0(), pair.token1()): (pair.token1(), pair.token0());oracles[foreignAsset] = oracle;require(nativeAsset == vader, "LBTWAP::addVaderPair: Unsupported Pair");pairData.foreignAsset = foreignAsset;pairData.foreignUnit = uint96(10**uint256(IERC20Metadata(foreignAsset).decimals()));pairData.updatePeriod = updatePeriod;pairData.lastMeasurement = block.timestamp;pairData.nativeTokenPriceCumulative = isFirst? pair.price0CumulativeLast(): pair.price1CumulativeLast();(uint256 reserve0, uint256 reserve1, ) = pair.getReserves();(uint256 reserveNative, uint256 reserveForeign) = isFirst? (reserve0, reserve1): (reserve1, reserve0);uint256 pairLiquidityEvaluation = (reserveNative *previousPrices[uint256(Paths.VADER)]) +(reserveForeign * getChainlinkPrice(foreignAsset));pairData.pastLiquidityEvaluation = pairLiquidityEvaluation;totalLiquidityWeight[uint256(Paths.VADER)] += pairLiquidityEvaluation;vaderPairs.push(pair);if (maxUpdateWindow < updatePeriod) maxUpdateWindow = updatePeriod;}
https://github.com/code-423n4/2021-12-vader/blob/main/contracts/lbt/LiquidityBasedTWAP.sol#L113-L148
function syncVaderPrice()publicoverridereturns (uint256[] memory pastLiquidityWeights,uint256 pastTotalLiquidityWeight){uint256 _totalLiquidityWeight;uint256 totalPairs = vaderPairs.length;pastLiquidityWeights = new uint256[](totalPairs);pastTotalLiquidityWeight = totalLiquidityWeight[uint256(Paths.VADER)];for (uint256 i; i < totalPairs; ++i) {IUniswapV2Pair pair = vaderPairs[i];ExchangePair storage pairData = twapData[address(pair)];uint256 timeElapsed = block.timestamp - pairData.lastMeasurement;if (timeElapsed < pairData.updatePeriod) continue;uint256 pastLiquidityEvaluation = pairData.pastLiquidityEvaluation;uint256 currentLiquidityEvaluation = _updateVaderPrice(pair,pairData,timeElapsed);pastLiquidityWeights[i] = pastLiquidityEvaluation;pairData.pastLiquidityEvaluation = currentLiquidityEvaluation;_totalLiquidityWeight += currentLiquidityEvaluation;}totalLiquidityWeight[uint256(Paths.VADER)] = _totalLiquidityWeight;}
As shown above,pastTotalLiquidityWeight = totalLiquidityWeight[uint256(Paths.VADER)]loads in the total liquidity weight which is updated when_addVaderPairis called. However,pastLiquidityWeightsis calculated by iterating through each token pair that is eligible to be updated.
Recommended Mitigation Steps
Consider removing the linetotalLiquidityWeight[uint256(Paths.VADER)] += pairLiquidityEvaluation;in_addVaderPairso that newly added tokens do not impact upcoming queries forVADER/USDVprice data. This should ensuresyncVaderPriceandsyncUSDVPricecannot be manipulated when adding new tokens.
SamSteinGG (Vader) confirmed

[H-12] Using single total native reserve variable for synth and non-synth reserves ofVaderPoolV2can lead to losses for synth holders
Submitted by hyh, also found by certora
Users that mint synths do provide native assets, increasing native reserve pool, but do not get any liquidity shares issued.
In the same time, an exit of non-synth liquidity provider yields releasing a proportion of all current reserves to him.
Whenever an exit of non-synth LP is substantial enough, the system will have much less native asset regarding the cumulative deposit of synth holders. That is, when a LP entered he provided a share of current reserves, both native and foreign, and got the corresponding liquidity shares in return. Suppose then big enough amounts of synths were minted, providing correspondingly big enough amount of native assets. If the LP now wants to exit, he will obtain a part of total native assets, including a part of the amount that was provided by synth minter. If the exit is big enough there will be substantially less native assets left to reimburse the synth minter than he initially provided. This is not reversible: the synth minters lost their native assets to LP that exited.
Proof of Concept
There are three types of mint/burn: NFT, fungible and synths. First two get LP shares, the latter gets synths. Whenever NFT or fungible LP exits, it gets a proportion of combined reserves. That is, some of native reserves were deposited by synth minters, but it is not accounted anyhow, only one total reserve number per asset is used.
Suppose the following scenario, Alice wants to provide liquidity, while Bob wants to mint synths:
Alice deposits both sides to a pool, 100 USDV and 100 foreign.Bob deposit 100 USDV and mints some foreign Synth.LP withdraws 95% of her liquidity shares. As she owns the pool liquidity, she gets 95% of USDV and foreign total reserves, 190 USDV and 95 foreign. Alice received almost all of her and Bob’s USDV.If Bob burn his synth and withdraw, he will get a tiny fraction of USDV he deposited (calculated by VaderMath.calculateSwap, we use its terms):
https://github.com/code-423n4/2021-12-vader/blob/main/contracts/dex/math/VaderMath.sol#L98x = 100, X = 0.05 * 200 = 10, Y = 0.05 * 100 = 5.
Swap outcome, how much USDV will Bob get, is x * Y * X / (x + X) ^ 2 = 100 * 5 * 10 / (110^2) = 0.4 (rounded).
The issue is that synth provided and LP provided USDV aren’t accounted separately, total reserves number if used everywhere instead:
Synth minters provide native asset, say USDV, to the system:https://github.com/code-423n4/2021-12-vader/blob/main/contracts/dex-v2/pool/VaderPoolV2.sol#L187
Synth minters get synths and no LP shares, while to account for their deposit, the total USDV balance is increased:https://github.com/code-423n4/2021-12-vader/blob/main/contracts/dex-v2/pool/VaderPoolV2.sol#L187
When LP enters, it gets liquidity shares proportionally to current reserves (NFT mint, notice the reserveNative, which is BasePoolV2’s pair.reserveNative, total amount of native asset in the Pool):https://github.com/code-423n4/2021-12-vader/blob/main/contracts/dex-v2/pool/BasePoolV2.sol#L497
When LP exits, it gets a proportion of current reserves back (NFT burn):https://github.com/code-423n4/2021-12-vader/blob/main/contracts/dex-v2/pool/BasePoolV2.sol#L223
The same happens when fungible LP mints (same reserveNative):https://github.com/code-423n4/2021-12-vader/blob/main/contracts/dex-v2/pool/VaderPoolV2.sol#L336And burns:https://github.com/code-423n4/2021-12-vader/blob/main/contracts/dex-v2/pool/VaderPoolV2.sol#L401
Recommended Mitigation Steps
Account for LP provided liquidity separately from total amount variables, i.e. use only LP provided native reserves variables in LP shares mint and burn calculations.
That should suffice as total amount of native assets is still to be used elsewhere, whenever the whole pool is concerned, for example, in rescue function, swap calculations and so forth.
SamSteinGG (Vader) acknowledged

[H-13] Council veto protection does not work
Submitted by TomFrenchBlockchain
Council can veto proposals to remove them to remain in power.
Proof of Concept
The Vader governance contract has the concept of a “council” which can unilaterally accept or reject a proposal. To prevent a malicious council preventing itself from being replaced by the token holders, the veto function checks the calldata for any proposal action directed atGovernorAlphato see if it matches thechangeCouncilfunction selector.
Note this is done by reading from theproposal.calldatasarray.
https://github.com/code-423n4/2021-12-vader/blob/fd2787013608438beae361ce1bb6d9ffba466c45/contracts/governance/GovernorAlpha.sol#L568-L603
If we look at the structure of a proposal however we can see that the function selector is held (in the form of the signature) in thesignaturesarray rather than being included in the calldata. Thecalldataarray then holds just the function arguments for the call rather than specifying which function to call.
https://github.com/code-423n4/2021-12-vader/blob/fd2787013608438beae361ce1bb6d9ffba466c45/contracts/governance/GovernorAlpha.sol#L71-L72
https://github.com/code-423n4/2021-12-vader/blob/fd2787013608438beae361ce1bb6d9ffba466c45/contracts/governance/GovernorAlpha.sol#L356-L362
Indeed if we look at theTimeLockcontract we see that the signature is hashed to calculate the function selector and is prepended onto the calldata.
https://github.com/code-423n4/2021-12-vader/blob/fd2787013608438beae361ce1bb6d9ffba466c45/contracts/governance/Timelock.sol#L292-L299
Looking at the function signature of thechangeCouncilwe can see that the value that thevetofunction will check againstthis.changeCouncil.signaturewill be the first 4 bytes of an abi encoded address and so will always be zero no matter what function is being called.
https://github.com/code-423n4/2021-12-vader/blob/fd2787013608438beae361ce1bb6d9ffba466c45/contracts/governance/GovernorAlpha.sol#L623
High risk as this issue gives the council absolute control over the DAO such that they cannot be removed.
Recommended Mitigation Steps
Hash the function signatures to calculate function selectors and then check those rather than the calldata.
This is something that should be picked up by a test suite however, I’d recommend writing tests to ensure that protections you add to the code have any affect and more broadly check that the code behaves as expected.
SamSteinGG (Vader) acknowledged

[H-14] Denial of service
Submitted by danb
https://github.com/code-423n4/2021-12-vader/blob/main/contracts/dex-v2/pool/VaderPoolV2.sol#L334on the first deposit, the total liquidity is set tonativeDeposit.
this might be a very low number compared toforeignDeposit.
It can cause a denial of service of the pair.
Impact
A pair can enter a denial of service state.
Proof of Concept
consider the following scenario:
the owner of the pool callssetFungibleTokenSupportfor a new token, for example weth.
a malicious actor callsmintFungible,  withnativeDeposit == 1andforeignDeposit == 10 ether.totalLiquidityUnitswill be 1.
the pool can be arbitraged, even by the attacker, buttotalLiquidityUnitswill still be 1.
this means that 1 liquidity token is equal to all of the pool reserves, which is a lot of money.
It will cause a very high rounding error for anyone trying to mint liquidity.
then, anyone who will try to mint liquidity will either:
fail, because they can’t mint 0 liquidity if their amount is too small.get less liquidity tokens than they should, because there is a very high rounding error, and its against new liquidity providers.
The rounding error losses will increase the pool reserves, which will increase value of liquidity tokens, so the hacker can even profit from this.
after this is realised, no one will want to provide liquidity, and since the pair cannot be removed or replaced, it will cause denial of service for that token forever.
SamSteinGG (Vader) acknowledged

