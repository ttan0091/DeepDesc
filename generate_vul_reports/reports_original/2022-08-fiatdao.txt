[H-01] Unsafe usage of ERC20 transfer and transferFrom
Submitted by CertoraInc, also found by 0x1f8b, 0xSky, CodingNameKiki, DecorativePineapple, jonatascm, Noah3o6, oyc_109, pedr02b2, peritoflores, and Waze
https://github.com/code-423n4/2022-08-fiatdao/blob/fece3bdb79ccacb501099c24b60312cd0b2e4bb2/contracts/VotingEscrow.sol#L425-L428https://github.com/code-423n4/2022-08-fiatdao/blob/fece3bdb79ccacb501099c24b60312cd0b2e4bb2/contracts/VotingEscrow.sol#L485-L488https://github.com/code-423n4/2022-08-fiatdao/blob/fece3bdb79ccacb501099c24b60312cd0b2e4bb2/contracts/VotingEscrow.sol#L546https://github.com/code-423n4/2022-08-fiatdao/blob/fece3bdb79ccacb501099c24b60312cd0b2e4bb2/contracts/VotingEscrow.sol#L657https://github.com/code-423n4/2022-08-fiatdao/blob/fece3bdb79ccacb501099c24b60312cd0b2e4bb2/contracts/VotingEscrow.sol#L676
Some ERC20 tokens functions don’t return a boolean, for example USDT, BNB, OMG. So theVotingEscrowcontract simply won’t work with tokens like that as thetoken.
Proof of Concept
The USDT’stransferandtransferFromfunctions doesn’t return a bool, so the call to these functions will revert although the user has enough balance and theVotingEscrowcontract won’t work, assuming that token is USDT.
Tools Used
Manual auditing - VS Code, some hardhat tests and me :)
Recommended Mitigation Steps
Use the OpenZepplin’ssafeTransferandsafeTransferFromfunctions.
lacoop6tu (FIAT DAO) disputed and commented:
In our case the token is a BalancerV2 Pool Token which returns the boolean
Justin Goro (judge) commented:
This should be acknowledged, not disputed, since there is nothing in documentation suggesting the token is inherently safe to use.
elnilz (FIAT DAO) commented:
@Justin Goro it’s a no-issue in our specific case bc we will use VotingEscrow in combination withtokenwhich returns bool upon transfer/transferFrom. So at best this is a QA issue bc we should document that. some wardens actually asked us about what token we will be using pointing out the issue.Now even if you’d want to award wardens who reported the issue it should then be a Med Risk bc if VotingEscrow is deployed with an unsafetokenppl would simply not be able to deposit into the contract but no funds would be at risk.
elnilz (FIAT DAO) commented:
Fyi, even though we don’t think this is an issue, we will make use of safeTransfer and safeTransferFrom so its a helpful submission nonetheless.
Justin Goro (judge) commented:
It’s tokens like BNB that led me to maintain the high risk rating. For BNB, transferFrom returns a bool but transfer doesn’t. In other words, users can stake but not unstake on any protocol that doesn’t use safeTransfer.I agree that wardens should contact sponsors but it’s not a channel we can really monitor. So although the net result is a documentation fix rather than a bug fix, it’s a documentation fix informed by the identification of a potentially show stopping bug rather than something like “Comment typo: it should be Bitcoin, not bit coin”.
IllIllI (warden) reviewed mitigation:
The sponsor disputed the issue because the token it’s planned to be used with does correctly return a boolean. However, the sponsor decided to make a change to address the finding asIssue 18. The fix properly replaces therequire()statements that check for successful transfers, with calls to OpenZeppelin’ssafeTransfer(). The PR also replaces the internal definition of theIERC20interface with OpenZeppelin’s version. The prior version of the code’sIERC20included the functiondecimals(), which is not one of the required functions for the interface, so it’s possible for the code to encounter a token without this function, but it would be immediately apparent what happened because the constructor is the function that callsdecimals(). The change to using OpenZeppelin required making this distinction more visible due to the fact that they’re defined separately asIERC20andIERC20Metadata. The new code is not checking that the token actually supports the function (e.g. using asafeDecimals()-like function), but it is not any worse off that it had been prior to the change.

[H-02] Delegators can Avoid Lock Commitments if they can Reliably get Themselves Blocked when Needed
Submitted by Respx
https://github.com/code-423n4/2022-08-fiatdao/blob/fece3bdb79ccacb501099c24b60312cd0b2e4bb2/contracts/VotingEscrow.sol#L526-L625
Users can enjoy the voting power of long lock times whilst not committing their tokens. This could cause the entire system to break down as the incentives don’t work any more.
Exploit Method
This exploit only works if a user is able to use the system and reliably get themselves blocked. Blocking policies are not in scope, so I am assuming there would be a list of bannable offences, and thus this condition could be fulfilled.Consider a user with two accounts, called Rider and Horse.Rider has 100,000 tokens.Horse has 1 token.Rider is a smart contract (required for an account to be bannable).Rider locks for 1 week.Horse locks for 52 weeks.Rider delegates to Horse.Horse can continue to extend its lock period and enjoy the maximised voting power.Whenever the user wants their tokens back, they simply need to get the Rider account blocked.When Rider is blocked,Blocklist.block(RiderAddress)is called, which in turn callsve.forceUndelegate(RiderAddress).Rider is now an undelegated account with an expired lock. It can callve.withdraw()to get its tokens back.The user can repeat this process with a fresh account taking the role of Rider.
Recommended Mitigation Steps
forceUndelegate()could be made to setlocked_.end = fromLocked.end. This would mean that blocked users are still locked into the system for the period they delegated for. However, this does have the downside of tokens being locked in the system without the full rights of the system which other users enjoy.Alternatively, this might be addressable through not blocking users that seem to be doing this, but of course that might have other undersirable consequences.
Proof of Concept
Please see warden’sfull reportfor proof of concept.
lacoop6tu (FIAT DAO) confirmed, but disagreed with severity and commented:
2 — Med: Assets not at direct risk, but the function of the protocol or its availability could be impacted, or leak value with a hypothetical attack path with stated assumptions, but external requirements.
Justin Goro (judge) commented:
Well spotted by warden! The inflation of voting points may lead to an exploit, depending on possible proposals. Severity maintained.
IllIllI (warden) reviewed mitigation:
The sponsor disagreed with the severity and the judge updated the issue to be of Medium risk, and I agree with that severity. The finding was addressed via the fix forIssue 6where the sponsor implemented the suggestion of the warden, to use the delegatee’s lock endpoint in the re-delegation to self, rather than using the delegator’s existing endpoint, since that endpoint may be far in the past. The delegate() and undelegate() functions have checks to ensure that the target for the votes always has at least as long a duration as the source of the votes. The fix enforces the same requirement forforceUndelegate()by assigning a longer duration.
There are only two places in the code that changeLockedBalance.endto a smaller value, which could possibly violate the contract invariants: inquitLock()where the struct is never written back to storage, and inwithdraw()where it is indeed written back to storage. However, if the delegatee was able to withdraw, that means the delegator already would have been able to withdraw (since the delegatee’s timestamp must always be greater than or equal to the delegator’s whendelegatingorincreasing), and therefore the mitigation is correct. The only extra wrinkle that the change makes, is that it now allows a malicious delegatee to front-run a delegator’s block with anincreaseUnlock(MAXTIME), but it’s not clear what advantage that would give the delegatee, and furthermore, the delegator already put his/her trust in the delegatee, so it’s something that could have occurred anyway, even without a call toforceUndelegate().

