[H-01] Reentrancy inMessageProxyForSchainleads to replay attacks
Submitted by cmichel
ThepostIncomingMessagesfunction calls_callReceiverContract(fromChainHash, messages[i], startingCounter + 1)which gives control to a contract that is potentially attacker controlledbeforeupdating theincomingMessageCounter.
for(uint256i=0;i<messages.length;i++) {// @audit re-entrant, can submit same postIncomingMessages again_callReceiverContract(fromChainHash,messages[i],startingCounter+1);}connectedChains[fromChainHash].incomingMessageCounter+=messages.length;
The attacker can re-enter into thepostIncomingMessagesfunction and submit the same messages again, creating a replay attack.
Note that thestartingCounteris the way how messages are prevented from replay attacks here, there are no further nonces.
Proof of Concept
Attacker can submit two cross-chain messages to be executed:
Transfer 1000 USDCA call to their attacker-controlled contract, could be masked as a token contract that allows re-entrance ontransfer.
Some node submits thepostIncomingMessages(params)transaction, transfers 1000 USDC, then calls the attackers contract, who can themself callpostIncomingMessages(params)again, receive 1000 USDC a second time, and stop the recursion.
Recommended Mitigation Steps
Add amessageInProgressLockermodifier topostIncomingMessagesas was done inMessageProxyForMainnet.
cstrangedk (SKALE) resolved:
Resolved viahttps://github.com/skalenetwork/IMA/pull/1054

[H-02] Gas pricing can be used to extort funds from users of SChain owner
Submitted by kirk-baird, also found by leastwood
https://github.com/skalenetwork/ima-c4-audit/blob/main/contracts/mainnet/CommunityPool.sol#L82-L112
https://github.com/skalenetwork/ima-c4-audit/blob/main/contracts/mainnet/MessageProxyForMainnet.sol#L235-L250
Impact
The functionrefundGasByUser()can be exploited by the message sender to drain nodes and SChain owners of their balances when processing incoming messages.
When a node collates a set of exits from an SChain to Ethereum, they are submitted on-chain viaMessageProxyForMainnet.sol.  For each message to a registered contract the user is required to pay for the refund viaCommunityPool.refundGasByUser().
The issue occurs inCommunityPool.refundGasByUser()as the amount to be refunded is calculated asuint amount = tx.gasprice * gas;, wheregasis the gas used by the message. Sincetx.gaspriceis set by the node and there is no upper bounds on the price. Since EIP1559 the gas price isBaseFee + Tipand althoughBaseis predeterminedTipis any arbitrary non-zero integer.
The attack is for a node to set an excessively hightx.gaspricewhich will be refunded out of the balance of the user who initiated the outgoing transaction or if that user has insufficient balance then from the SChain owner.  Since the node submitting the transaction is refunded for their gas they do not lose from setting a higher gas price.
The impact of the attack is that the user requesting the exit and/or the SChain owner may have their ETH balances depleted to refund the submitter. The impact is worsened as if the user has insufficient balance a message will be sent to the SChain preventing them from making further exits until they have sufficient balance.
Note a similar issue may be seen inIWallets.refundGasBySchain()depending on how the gas calculations are performed (they are not in scope but theTestWalletalso usestx.gaspricein the same manner).
Proof of Concept
Processing incoming messages inMessageProxyForMainnet.sol
for(uint256i=0;i<messages.length;i++) {gasTotal=gasleft();if(isContractRegistered(bytes32(0),messages[i].destinationContract)) {addressreceiver=_getGasPayer(fromSchainHash,messages[i],startingCounter+i);_callReceiverContract(fromSchainHash,messages[i],startingCounter+i);notReimbursedGas+=communityPool.refundGasByUser(fromSchainHash,payable(msg.sender),receiver,gasTotal-gasleft() +additionalGasPerMessage);}else{_callReceiverContract(fromSchainHash,messages[i],startingCounter+i);notReimbursedGas+=gasTotal-gasleft() +additionalGasPerMessage;}}
Refunding gas inCommunityPool.sol
functionrefundGasByUser(bytes32schainHash,addresspayablenode,addressuser,uintgas)externaloverrideonlyMessageProxyreturns(uint){require(node!=address(0),"Node address must be set");if(!activeUsers[user][schainHash]) {returngas;}uintamount=tx.gasprice*gas;if(amount>_userWallets[user][schainHash]) {amount=_userWallets[user][schainHash];}_userWallets[user][schainHash] =_userWallets[user][schainHash] -amount;if(!_balanceIsSufficient(schainHash,user,0)) {activeUsers[user][schainHash] =false;messageProxy.postOutgoingMessage(schainHash,schainLinks[schainHash],Messages.encodeLockUserMessage(user));}node.sendValue(amount);return(tx.gasprice*gas-amount) /tx.gasprice;}
Recommended Mitigation Steps
One solution to avoid excessive over refunding of gas fees is to use a gas price oracle rather thantx.gasprice.
An alternate solution is to set a maximum gas price and have some incentives for the node submitting at a gas price below the maximum.
cstrangedk (SKALE) resolved:
Resolved viahttps://github.com/skalenetwork/IMA/pull/1165/

