[H-01] UniswapConfig getters return wrong token config if token config does not exist
TheUniswapConfig.getTokenConfigBySymbolHashfunction does not work asgetSymbolHashIndexreturns0if there is no config token for that symbol (uninitialized map value), but the outer function implements the non-existence check with-1.
The same issue occurs also for:
getTokenConfigByCTokengetTokenConfigByUnderlying
When encountering a non-existent token config, it will always return the token config of thefirst index(index 0) which is a valid token config for a completely different token.
This leads to wrong oracle prices for the actual token which could in the worst case be used to borrow more tokens at a lower price or borrow more tokens by having a higher collateral value, essentially allowing undercollateralized loans that cannot be liquidated.
Recommend fixing the non-existence check.
ghoul-sol (Based Loans) confirmed:
Addressed inthis PR

[H-02] uint(-1) index for not found
FunctionsgetTokenConfigBySymbolHash,getTokenConfigByCTokenandgetTokenConfigByUnderlyingcheck returned index against max uint:
index != uint(-1)
-1 should indicate that the index is not found, however, a default value for an uninitialized uint is 0, so it is impossible to get -1. What is even weirder is that 0 will be returned for non-existing configs but 0 is a valid index for the 1st config.
One of the solutions would be to reserve 0 for a not found index and use it when searching in mappings. Then normal indexes should start from 1. Another solution would be to introduce a new mapping with a boolean value that indicates if this index is initialized or not but this may be a more gas costly way.
ghoul-sol (Based Loans) confirmed:
UniswapConfighas been refactored. Index 0 is considered a non-existent config and all comparison are against that value.

