[H-01] ERC721Checkpointable: delegateBySig allows the user to vote to address 0, which causes the user to permanently lose his vote and cannot transfer his NFT.
Submitted by cccz, also found by berndartmueller, bin2chen, csanuragjain, IEatBabyCarrots, jayphbee, KIntern_NA, Lambda, and zzzitron
In the ERC721Checkpointable contract, when the user votes with the delegate function, the delegatee will not be address 0.
function delegate(address delegatee) public {if (delegatee == address(0)) delegatee = msg.sender;return _delegate(msg.sender, delegatee);}
However, there is no such restriction in the delegateBySig function, which allows the user to vote to address 0.
function delegateBySig(address delegatee,uint256 nonce,uint256 expiry,uint8 v,bytes32 r,bytes32 s) public {bytes32 domainSeparator = keccak256(abi.encode(DOMAIN_TYPEHASH, keccak256(bytes(name())), getChainId(), address(this)));bytes32 structHash = keccak256(abi.encode(DELEGATION_TYPEHASH, delegatee, nonce, expiry));bytes32 digest = keccak256(abi.encodePacked('\x19\x01', domainSeparator, structHash));address signatory = ecrecover(digest, v, r, s);require(signatory != address(0), 'ERC721Checkpointable::delegateBySig: invalid signature');require(nonce == nonces[signatory]++, 'ERC721Checkpointable::delegateBySig: invalid nonce');require(block.timestamp <= expiry, 'ERC721Checkpointable::delegateBySig: signature expired');return _delegate(signatory, delegatee);}
If user A votes to address 0 in the delegateBySig function, _delegates[A] will be address 0, but the delegates function will return the address of user A and getCurrentVotes(A) will return 0.
function _delegate(address delegator, address delegatee) internal {/// @notice differs from `_delegate()` in `Comp.sol` to use `delegates` override method to simulate auto-delegationaddress currentDelegate = delegates(delegator);_delegates[delegator] = delegatee;...function delegates(address delegator) public view returns (address) {address current = _delegates[delegator];return current == address(0) ? delegator : current;}
Later, if user A votes to another address or transfers NFT, the _moveDelegates function will fail due to overflow, which makes user A lose votes forever and cannot transfer NFT.
function _moveDelegates(address srcRep,address dstRep,uint96 amount) internal {if (srcRep != dstRep && amount > 0) {if (srcRep != address(0)) {uint32 srcRepNum = numCheckpoints[srcRep];uint96 srcRepOld = srcRepNum > 0 ? checkpoints[srcRep][srcRepNum - 1].votes : 0;uint96 srcRepNew = sub96(srcRepOld, amount, 'ERC721Checkpointable::_moveDelegates: amount underflows'); // auditor : overflow here_writeCheckpoint(srcRep, srcRepNum, srcRepOld, srcRepNew);}
On the other hand, since the burn function also fails, this can also be used to prevent the NFT from being burned by the minter
function burn(uint256 nounId) public override onlyMinter {_burn(nounId);emit NounBurned(nounId);}...function _burn(uint256 tokenId) internal virtual {address owner = ERC721.ownerOf(tokenId);_beforeTokenTransfer(owner, address(0), tokenId);...function _beforeTokenTransfer(address from,address to,uint256 tokenId) internal override {super._beforeTokenTransfer(from, to, tokenId);/// @notice Differs from `_transferTokens()` to use `delegates` override method to simulate auto-delegation_moveDelegates(delegates(from), delegates(to), 1);}
Proof of Concept
https://github.com/code-423n4/2022-08-nounsdao/blob/45411325ec14c6d747b999a40367d3c5109b5a89/contracts/base/ERC721Checkpointable.sol#L126-L144
https://github.com/code-423n4/2022-08-nounsdao/blob/45411325ec14c6d747b999a40367d3c5109b5a89/contracts/base/ERC721Checkpointable.sol#L88-L91
https://github.com/code-423n4/2022-08-nounsdao/blob/45411325ec14c6d747b999a40367d3c5109b5a89/contracts/base/ERC721Checkpointable.sol#L97-L106
https://github.com/code-423n4/2022-08-nounsdao/blob/45411325ec14c6d747b999a40367d3c5109b5a89/contracts/base/ERC721Checkpointable.sol#L197-L208
Recommended Mitigation Steps
Consider requiring in thedelegateBySigfunction that delegatee cannot be address 0.
function delegateBySig(address delegatee,uint256 nonce,uint256 expiry,uint8 v,bytes32 r,bytes32 s) public {+ require(delegatee != address(0));
eladmallel (Nouns DAO) confirmed and commented:
We agree this is a bug that has existed since Nouns launched, and plan to fix the bug with the suggested requirement that delegatee should not be address(0).Worth noting that this fix will not have a positive effect on Nouns, as the token is already deployed and not upgradable.

