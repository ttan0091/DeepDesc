[H-01] There is a vulnerability in theexecuteFlashloanfunction of thePeUSDMainnetcontract. Hackers can use this vulnerability to burn other people’s eUSD token balance without permission
Submitted byNeon2835, also found byMohammedRizwan,Arz,DedOhWale,0xcm,0xRobocop,azhar,HE1M,zaevlad, andkankodu
Lines of code
https://github.com/code-423n4/2023-06-lybra/blob/7b73ef2fbb542b569e182d9abf79be643ca883ee/contracts/lybra/token/PeUSDMainnetStableVision.sol#L129-L139
https://github.com/code-423n4/2023-06-lybra/blob/7b73ef2fbb542b569e182d9abf79be643ca883ee/contracts/lybra/token/EUSD.sol#L228-L230
Impact
TheexecuteFlashloanfunction of thePeUSDMainnetcontract is used to provide users with the flash loan function. There is a loophole in the logic and hackers can use this loophole to burn other people’s eUSD token balance without permission.
Proof of Concept
Since the parameterFlashBorrower receiverof theexecuteFlashloanfunction can be designated as anyone, the flash loan system will charge a certain percentage of the loan fee (up to 10%) toreceiverfor each flash loan. The code is as follows:
EUSD.burnShares(address(receiver), burnShare);
When a hacker maliciously initiates a flash loan for areceivercontract, and the value of theeusdAmountparameter passed in is large enough, thereceiverwill be deducted a large amount of loan fees; the hacker can burn a large amount of other people’s eUSD without permissioning the amount.
Let us analyze the design logic of the system itself step by step for discussion:
The flashloan fee of thePeUSDMainnetcontract is collected by calling theburnSharesfunction of theEUSDcontract. Continue to read the code to find that theburnSharesfunction of theEUSDcontract has a very criticalmodifier onlyMintVaultcondition Judgment, so it is obvious that thePeUSDMainnetcontract is the minter role of theEUSDcontract (otherwise it will not be able to charge the flashloan fee).Usually, when thetransferFromfunction is called, the ERC20 token needs to be approved by the spender before it can be used. But thetransferFromfunction in theEUSDcontract is implemented like this:
function transferFrom(address from, address to, uint256 amount) public returns (bool) {address spender = _msgSender();if (!configurator. mintVault(spender)) {_spendAllowance(from, spender, amount);}_transfer(from, to, amount);return true;}
The above code indicates that the miner of EUSD can calltransferFromarbitrarily, without the user callingincreaseAllowancefor approval. ThePeUSDMainnetcontract is the minter of theEUSDcontract, so line 133 of thePeUSDMainnetcontract code:bool success = EUSD.transferFrom(address(receiver), address(this), EUSD.getMintedEUSDByShares(shareAmount));can be executed without user approval.
In line 132 of theexecuteFlashloanfunction of thePeUSDMainnetcontract:receiver.onFlashLoan(shareAmount, data);, if thereceiverdoes not implement theonFlashLoanmethod, the EVM will revert and the hacker will not be able to maliciously execute the attack. However, if the receiver contract simply declares thefallback()function, or itsfallback()logic does not have a very robust judgment, then line 132 of the code can be easily bypassed. So is there really such a contract that just satisfies this condition? The answer is yes, for example this address:0x32034276343de43844993979e5384d4b7e030934(etherscan:https://etherscan.io/address/0x32034276343de43844993979e5384d4b7e030934#code), has 200,000 eUSD tokens and declared thefallbackfunction, its source code excerpts are as follows:
contractGnosisSafeProxy{// singleton always needs to be first declared variable, to ensure that it is at the same location in the contracts to which calls are delegated.// To reduce deployment costs this variable is internal and needs to be retrieved via `getStorageAt`addressinternalsingleton;/// @dev Constructor function sets address of singleton contract./// @param _singleton Singleton address.constructor(address_singleton) {require(_singleton!=address(0),"Invalid singleton address provided");singleton=_singleton;}/// @dev Fallback function forwards all transactions and returns all received return data.fallback()externalpayable{// solhint-disable-next-line no-inline-assemblyassembly{let_singleton:=and(sload(0),0xffffffffffffffffffffffffffffffffffffffff)// 0xa619486e == keccak("masterCopy()"). The value is right padded to 32-bytes with 0sifeq(calldataload(0),0xa619486e00000000000000000000000000000000000000000000000000000000) {mstore(0,_singleton)return(0,0x20)}calldatacopy(0,0,calldatasize())letsuccess:=delegatecall(gas(),_singleton,0,calldatasize(),0,0)returndatacopy(0,0,returndatasize())ifeq(success,0) {revert(0,returndatasize())}return(0,returndatasize())}}}
Assuming that thePeUSDMainnetcontract flash loan fee rate is 5% at this time, the hacker maliciously calls theexecuteFlashloanfunction to initiate a flash loan with the address:0x32034276343de43844993979e5384d4b7e030934, the function parameteruint256 eusdAmount = 4_000_000, and the calculated loan fee  is4_000_000 * 5% = 200_000, the 200_000 eUSD balance of the address0x32034276343de43844993979e5384d4b7e030934will be maliciously burned by hackers!
The following is the forge test situation I simulated locally:
[PASS] testGnosisSafeProxy() (gas: 10044)Traces:[10044] AttackTest::testGnosisSafeProxy()â”œâ”€ [4844] GnosisSafeProxy::onFlashLoan()â”‚   â”œâ”€ [0] 0xd9Db270c1B5E3Bd161E8c8503c55cEABeE709552::onFlashLoan() [delegatecall]â”‚   â”‚   â””â”€ â† ()â”‚   â””â”€ â† ()â””â”€ â† ()Test result: ok. 1 passed; 0 failed; finished in 972.63Âµs
Thefallbackfunction of theGnosisSafeProxycontract is allowed to be called without revert.
Tools Used
Visual Studio Code
Foundry
Recommended Mitigation Steps
Optimize the flash loan logic of theexecuteFlashloanfunction of thePeUSDMainnetcontract, remove theFlashBorrower receiverparameter, and setreceivertomsg.sender; which means that a user can only initiate a flash loan for themselves.
LybraFinance confirmed

[H-02] doesn’t calculate the current borrowing amount for the provider, including the provider’s borrowed shares and accumulated fees due to inconsistency incollateralRatiocalculation
Submitted byturvy_fuzz, also found bySpicyMeatball
Lines of code
https://github.com/code-423n4/2023-06-lybra/blob/main/contracts/lybra/pools/base/LybraPeUSDVaultBase.sol#L127
Proof of Concept
BorrowerscollateralRatioin theliquidation()function is calculated by:
uint256onBehalfOfCollateralRatio= (depositedAsset[onBehalfOf] *assetPrice*100) /getBorrowedOf(onBehalfOf);
Notice it calls thegetBorrowedOf()function, which
calculates the current borrowing amount for the borrower, including the borrowed shares and accumulated fees, not just the borrowed amount.
https://github.com/code-423n4/2023-06-lybra/blob/main/contracts/lybra/pools/base/LybraPeUSDVaultBase.sol#L253
functiongetBorrowedOf(addressuser)publicviewreturns(uint256) {returnborrowed[user] +feeStored[user] +_newFee(user);}
However, the providerscollateralRatioin therigidRedemption()function is calculated by:
https://github.com/code-423n4/2023-06-lybra/blob/main/contracts/lybra/pools/base/LybraPeUSDVaultBase.sol#L161
uint256providerCollateralRatio= (depositedAsset[provider] *assetPrice*100) /borrowed[provider];
Here, the deposit asset is divided by only the borrowed amount, missing out on the borrowed shares and accumulated fees.
Tools Used
Visual Studio Code
Recommended Mitigation Steps
Be consistent withcollateralRatiocalculation.
LybraFinance confirmed

[H-03] Incorrectly implemented modifiers inLybraConfigurator.solallow any address to call functions that are supposed to be restricted
Submitted byalexweb3, also found byD_Auditor,josephdara,TorpedoPistolIXC41,zaggle,koo,cartlex_,hals,mladenov,Neon2835,Neon2835,lanrebayode77,Silvermist,pep7siup,Musaka,Timenov,Timenov,LuchoLeonel1,mahyar,mrudenko,DedOhWale,adeolu,zaevlad, andDelerRH
The modifiersonlyRole(bytes32 role) andcheckRole(bytes32 role) are not implemented correctly. This would allow anybody to call sensitive functions that should be restricted.
Proof of Concept
For the POC, I set up a new foundry projects and copied the folders lybra, mocks and OFT in the src folder of the new project. I installed the dependencies and then I created a filePOCs.t.solin the test folder. Here is the code that shows a random address can call sensitive functions that should be restricted:
// SPDX-License-Identifier: UNLICENSEDpragmasolidity^0.8.13;import"forge-std/Test.sol";import"../src/lybra/configuration/LybraConfigurator.sol";import"../src/lybra/governance/GovernanceTimelock.sol";import"../src/lybra/miner/esLBRBoost.sol";contractPOCsTestisTest{ConfiguratorpubliclybraConfigurator;GovernanceTimelockpublicgovernance;esLBRBoostpublicboost;addresspublicdao=makeAddr("dao");addresspubliccurvePool=makeAddr("curvePool");addresspublicrandomUser=makeAddr("randomUser");addresspublicadmin=makeAddr("admin");addresspubliceusd=makeAddr("eusd");addresspublicpEusd=makeAddr("pEusd");addressproposerOne=makeAddr("proposerOne");addressexecutorOne=makeAddr("executorOne");address[]proposers= [proposerOne];address[]executors= [executorOne];addresspublicrewardsPool=makeAddr("rewardsPool");functionsetUp()public{governance=newGovernanceTimelock(10000,proposers,executors,admin);lybraConfigurator=newConfigurator(address(governance),curvePool);boost=newesLBRBoost();}functiontestIncorrectlyImplementedModifiers()public{console.log("EUSD BEFORE",address(lybraConfigurator.EUSD()));vm.prank(randomUser);lybraConfigurator.initToken(eusd,pEusd);console.log("EUSD AFTER",address(lybraConfigurator.EUSD()));console.log("RewardsPool BEFORE",address(lybraConfigurator.lybraProtocolRewardsPool()));vm.prank(randomUser);lybraConfigurator.setProtocolRewardsPool(rewardsPool);console.log("RewardsPool AFTER",address(lybraConfigurator.lybraProtocolRewardsPool()));}}
Tools Used
Manual Review
Recommended Mitigation Steps
Wrap the 2 function calls in a require statement:
In modifieronlyRole(bytes32 role), instead ofGovernanceTimelock.checkOnlyRole(role, msg.sender), it should be something like require (GovernanceTimelock.checkOnlyRole(role, msg.sender), “Not Authorized”).
The same goes for thecheckRole(bytes32 role) modifier.
Assessed type
Access Control
LybraFinance confirmed

[H-04] The Constructor Caveat leads to bricking of Configurator contract.
Submitted bycthulhu_cult
In Solidity, code that is inside a constructor or part of a global variable declaration is not part of a deployed contract’s runtime bytecode. This code is executed only once, when the contract instance is deployed. As a consequence of this, the code within a logic contract’s constructor will never be executed in the context of the proxy’s state. This means that any state changes made in the constructor of a logic contract will not be reflected in the proxy’s state.
This will lead to governance timelocks contract and thecurvePoolcontract contain default values of zero values.As a result, all the functions that rely on governance will be broken, since the governance address is set to zero address.
Proof of Concept
// SPDX-License-Identifier: UNLICENSEDpragma solidity ^0.8.13;import "forge-std/Test.sol";import {ITransparentUpgradeableProxy} from "@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol";import {LybraProxy} from "@lybra/Proxy/LybraProxy.sol";import {LybraProxyAdmin} from "@lybra/Proxy/LybraProxyAdmin.sol";import {GovernanceTimelock} from "@lybra/governance/GovernanceTimelock.sol";import {PeUSDMainnet} from "@lybra/token/PeUSDMainnetStableVision.sol";import {Configurator} from "@lybra/configuration/LybraConfigurator.sol";import {EUSDMock} from "@mocks/mockEUSD.sol";import {mockCurve} from "@mocks/mockCurve.sol";import {mockUSDC} from "@mocks/mockUSDC.sol";/* remappings used@lybra=contracts/lybra/@mocks=contracts/mocks/*/contract CounterScript is Test {address goerliEndPoint = 0xbfD2135BFfbb0B5378b56643c2Df8a87552Bfa23;LybraProxy proxy;LybraProxyAdmin admin;GovernanceTimelock govTimeLock;mockUSDC usdc;mockCurve curve;Configurator configurator;Configurator configuratorLogic;EUSDMock eusd;PeUSDMainnet peUsdMainnet;address owner = address(7);address[] govTimelockArr;function setUp() public {vm.startPrank(owner);govTimelockArr.push(owner);govTimeLock = new GovernanceTimelock(1,govTimelockArr,govTimelockArr,owner);usdc = new mockUSDC();curve = new mockCurve();eusd = new EUSDMock(address(configurator));//  _dao , _curvePoolconfiguratorLogic = new Configurator(address(govTimeLock), address(curve));admin = new LybraProxyAdmin();proxy = new LybraProxy(address(configuratorLogic),address(admin),bytes(""));configurator = Configurator(address(proxy));peUsdMainnet = new PeUSDMainnet(address(configurator),8,goerliEndPoint);vm.stopPrank();}function test_LybraConfigurationContractDoesNotInitialize() public {vm.startPrank(address(owner));vm.expectRevert(); // Since the Governance time lock is set to zero.configurator.initToken(address(eusd), address(peUsdMainnet));}}
Tools Used
Manual Code reviewFoundry for POC
Recommended Mitigation Steps
LybraConfiguration.sol#L81contracts should move the code within the constructor to a regular “initializer” function, and have this function be called whenever the proxy links to this logic contract. Special care needs to be taken with this initializing function so that it can only be called once and use another initialization mechanism, since the governance address should be set in the initialize.
Assessed type
Upgradable
LybraFinance confirmed
0xean (judge) commented:
On the fence re: severity here and could see the argument for this being M.  Will leave as submitted for now, but open to comment during QA on the topic.

[H-05] Making_totalSupplyand_totalSharesimbalance significantly by providing fake income leads to stealing fund
Submitted byHE1M
If the project has just started, a malicious user can make the_totalSupplyand_totalSharesimbalance significantly by providing fake income. By doing so, later, when innocent users deposit and mint, the malicious user can steal protocol’s stETH without burning any shares. Moreover, the protocol’s income can be stolen as well.
Proof of Concept
Suppose nothing is deposited in the protocol (it is day 0).
Bob (a malicious user) deposits$1000 worth of ether (equal to 1 ETH, assuming ETH price is$1000) to mint200e18 + 1eUSD. The state will be:
shares[Bob] = 200e18 + 1_totalShares = 200e18 + 1_totalSupply = 200e18 + 1borrowed[Bob] = 200e18 + 1poolTotalEUSDCirculation = 200e18 + 1depositAsset[Bob] = 1e18totalDepositedAsset = 1e18stETH.balanceOf(protocol) = 1e18
https://github.com/code-423n4/2023-06-lybra/blob/7b73ef2fbb542b569e182d9abf79be643ca883ee/contracts/lybra/pools/LybraStETHVault.sol#L37
Then, Bob transfers directly0.2stETH(worth$200) to the protocol. By doing so, Bob is providing a fake excess income in the protocol. So, the state will be:
shares[Bob] = 200e18 + 1_totalShares = 200e18 + 1_totalSupply = 200e18 + 1borrowed[Bob] = 200e18 + 1poolTotalEUSDCirculation = 200e18 + 1depositAsset[Bob] = 1e18totalDepositedAsset = 1e18stETH.balanceOf(protocol) = 1e18 + 2e17
Then, Bob callsexcessIncomeDistributionto buy this excess income. As you see in line 63, theexcessIncomeis equal to the difference ofstETH.balanceOf(protocol)andtotalDepositedAsset. So, theexcessAmount = 2e17.
https://github.com/code-423n4/2023-06-lybra/blob/7b73ef2fbb542b569e182d9abf79be643ca883ee/contracts/lybra/pools/LybraStETHVault.sol#L63
Then, in line 66, this amount2e17is converted to eUSD amount based on the price of stETH. Since, we assumed  ETH is$1000, we have:
uint256 payAmount = (((realAmount * getAssetPrice()) / 1e18) * getDutchAuctionDiscountPrice()) / 10000 = 2e17 * 1000e18 / 1e18 = 200e18
https://github.com/code-423n4/2023-06-lybra/blob/7b73ef2fbb542b569e182d9abf79be643ca883ee/contracts/lybra/pools/LybraStETHVault.sol#L66C9-L66C112
Since the protocol has just started, there is nofeeStored, so the income is equal to zero.
https://github.com/code-423n4/2023-06-lybra/blob/7b73ef2fbb542b569e182d9abf79be643ca883ee/contracts/lybra/pools/LybraStETHVault.sol#L68
In line 75, we have:
uint256 sharesAmount = _EUSDAmount.mul(_totalShares).div(totalMintedEUSD) = 200e18 * (200e18 + 1) / (200e18 + 1) = 200e18
https://github.com/code-423n4/2023-06-lybra/blob/7b73ef2fbb542b569e182d9abf79be643ca883ee/contracts/lybra/pools/LybraStETHVault.sol#L75C13-L75C35
In line 81, this amount ofsharesAmountwill be burned from Bob, and then in line 93,2e17stETH will be transferred to Bob. So, the state will be:
shares[Bob] = 200e18 + 1 - 200e18 = 1_totalShares = 200e18 + 1 - 200e18 = 1_totalSupply = 200e18 + 1borrowed[Bob] = 200e18 + 1poolTotalEUSDCirculation = 200e18 + 1depositAsset[Bob] = 1e18totalDepositedAsset = 1e18stETH.balanceOf(protocol) = 1e18 + 2e17 - 2e17 = 1e18
https://github.com/code-423n4/2023-06-lybra/blob/7b73ef2fbb542b569e182d9abf79be643ca883ee/contracts/lybra/pools/LybraStETHVault.sol#L81
https://github.com/code-423n4/2023-06-lybra/blob/7b73ef2fbb542b569e182d9abf79be643ca883ee/contracts/lybra/pools/LybraStETHVault.sol#L93
Please notethat currently we have_totalSupply = 200e18 + 1and_totalShares = 1.
Suppose, Alice (an innocent user) deposits 10ETH, and mints 4000e18 eUSD. So, the amount of shares minted to Alice will be:
sharesAmount = _EUSDAmount.mul(_totalShares).div(totalMintedEUSD) = 4000e18 * 1 / (200e18 + 1) = 19
So, the state will be:
shares[Bob] = 1_totalShares = 1 + 19 = 20_totalSupply = 200e18 + 1 + 4000e18 = 4200e18 + 1borrowed[Bob] = 200e18 + 1poolTotalEUSDCirculation = 200e18 + 1 + 4000e18 = 4200e18 + 1depositAsset[Bob] = 1e18totalDepositedAsset = 1e18 + 10e18 = 11e18stETH.balanceOf(protocol) = 1e18 + 10e18 = 11e18shares[Alice] = 19borrowed[Alice] = 4000e18depositAsset[Alice] = 10e18
Now, different issues can happen leading to loss/steal of funds:
First Scenario:If Alice is a provider, Bob can redeem eUSD multiple of times to receive stETH without burning any share by callingrigidRedemption. To be more accurate, Bob should call this function witheusdAmountas parameter equal to_totalSupply / _totalShares. For example:First call:rigidRedemption (Alice, 210e18), so we will have:shares[Bob] = 1_totalShares = 20_totalSupply = 4200e18 + 1 - 210e18 = 3990e18 + 1borrowed[Bob] = 200e18 + 1poolTotalEUSDCirculation = 4200e18 + 1 - 210e18 = 3990e18 + 1depositAsset[Bob] = 1e18totalDepositedAsset = 11e18 - 21e16stETH.balanceOf(protocol) = 11e18 - 21e16shares[Alice] = 19borrowed[Alice] = 4000e18 - 210e18 = 3790e18depositAsset[Alice] = 10e18 - 21e16Please note that no shares are burned from Bob, becausegetSharesByMintedEUSDreturns zero as210e18 * 20 / (4200e18 + 1) = 0. It means, Bob receives 0.21 stETH by burning no shares.Second call:rigidRedemption (Alice, 199e18), so we will have:shares[Bob] = 1_totalShares = 20_totalSupply = 3990e18 + 1 - 199e18 = 3791e18 + 1borrowed[Bob] = 200e18 + 1poolTotalEUSDCirculation = 3990e18 + 1 - 199e18 = 3791e18 + 1depositAsset[Bob] = 1e18totalDepositedAsset = 11e18 - 210e15 - 199e15 = 11e18 - 409e15stETH.balanceOf(protocol) = 11e18 - 210e15 - 199e15 = 11e18 - 409e15shares[Alice] = 19borrowed[Alice] = 3790e18 - 199e18 = 3591e18depositAsset[Alice] = 10e18 - 210e15 - 199e15 = 10e18 - 409e15Please note that no shares are burned from Bob, becausegetSharesByMintedEUSDreturns zero as199e18 * 20 / (3990e18 + 1) = 0. It means, Bob receives 0.199 stETH by burning no shares.Third call:rigidRedemption (Alice, 189e18), so we will have:shares[Bob] = 1_totalShares = 20_totalSupply = 3791e18 + 1 - 189e18 = 3602e18 + 1borrowed[Bob] = 200e18 + 1poolTotalEUSDCirculation = 3791e18 + 1 - 189e18 = 3602e18 + 1depositAsset[Bob] = 1e18totalDepositedAsset = 11e18 - 409e15 - 189e15 = 11e18 - 598e15stETH.balanceOf(protocol) = 11e18 - 409e15 - 189e15 = 11e18 - 598e15shares[Alice] = 19borrowed[Alice] = 3591e18 - 189e18 = 3402e18depositAsset[Alice] = 10e18 - 409e15 - 189e15 = 10e18 - 598e15Please note that no shares are burned from Bob, becausegetSharesByMintedEUSDreturns zero as189e18 * 20 / (3791e18 + 1) = 0. It means, Bob receives 0.189 stETH by burning no shares.So far, by just calling the functionrigidRedemptionthree times, Bob received0.21 + 0.199 + 0.189 = 0.598stETH (worths$598). If Bob continues calling this function, their gain will increase more and more to the point that_totalSupplyand_totalSharesbecome closer to each other.A simple calculation shows that if Bob calls this function 60 times (for sure each time the input parameter should be adjusted based on the_totalSupplyand_totalShares), the state will be:shares[Bob] = 1_totalShares = 20_totalSupply = 203.7e18borrowed[Bob] = 200e18 + 1poolTotalEUSDCirculation = 203.7e18depositAsset[Bob] = 1e18totalDepositedAsset = 7e18stETH.balanceOf(protocol) = 7e18shares[Alice] = 19borrowed[Alice] = 3.7e18depositAsset[Alice] = 6e18It shows that almost the gain of Bob is 4 stETH (worth$4000).The following code simply shows that how this repetitive calling ofrigidRedemptionworks:// SPDX-License-Identifier: MITpragma solidity 0.8.18;contract LybraPoC {mapping(address => uint256) public borrowed;mapping(address => uint256) public shares;address public Alice = address(1);address public Bob = address(2);uint256 public bobGain;uint256 public num;function redeem() public {uint256 toBeRedeemed;uint256 requiredShares;uint256 _totalSupply = 4200e18 + 1;uint256 _totalShares = 20;shares[Bob] = 1;shares[Alice] = 19;borrowed[Bob] = 200e18 + 1;borrowed[Alice] = 4000e18;while (true) {num++;toBeRedeemed = (_totalSupply % _totalShares == 0)? (_totalSupply / _totalShares) - 1: (_totalSupply / _totalShares);requiredShares = (toBeRedeemed * _totalShares) / _totalSupply;if (toBeRedeemed > borrowed[Alice]) {break;}borrowed[Alice] -= toBeRedeemed;_totalSupply -= toBeRedeemed;_totalShares -= requiredShares;shares[Bob] -= requiredShares;bobGain += toBeRedeemed;}}}Please note that, Bob does not have enough share to repay his borrow and release all his collateral. So, assuming safe collateral rate is 160%, Bob, at most, can withdraw1 ETH - 1.6 * (200e18 + 1) =$680. He also gained$4000 by redeeming Alice 60 times, so Bob’s balance now is:$680 +$4000 =$4680which means$`3680 is his total gain that is stolen from the protocol. In other words, protocol has minted some shares without enough stETH backed.Bob can now start to repay his borrow to reduceborrowed[Bob]step by step, without burning any share. For example, first repays 10e18 eUSD, second repays 9e18 eUSD. But, for simplicity, I ignored this calculation, and just focused on redeeming Alice to steal big fund. By repaying multiple of times,_totalSupplyand_totalSharesbecome closer to each other. Then again, it is possible to make it imbalance by providing fake income and attack the next users. Therefore, this attack can be applied multiple of times without any restriction.Alice is just an example of all the providers in the protocol. If there are other non-provider users also, this scenario is still valid.Second Scenario:If Alice is liquidated, Bob can liquidate her without burning share again similar to the mechanism described during redeeming.Third Scenario:Please note that if another innocent user (Eve) is also involved in our example, she will lose funds as well. So, let’s say that Eve deposited 20 ETH, and also minted 10000e18 eUSD. So, the state will be:shares[Bob] = 1_totalShares = 20 + 47 = 67_totalSupply = 4200e18 + 1 + 10000e18 = 14200e18 + 1borrowed[Bob] = 200e18 + 1poolTotalEUSDCirculation = 4200e18 + 1 + 10000e18 = 14200e18 + 1depositAsset[Bob] = 1e18totalDepositedAsset = 11e18 + 20e18 = 31e18stETH.balanceOf(protocol) = 11e18 + 20e18 = 31e18shares[Alice] = 19borrowed[Alice] = 4000e18depositAsset[Alice] = 10e18shares[Eve] = 47borrowed[Eve] = 10000e18depositAsset[Eve] = 20e18Now, suppose only Alice is provider, and Eve is not. So, we can redeem Alice by using the same mechanism we describe in the first scenario. Using the same piece of code for repetitive redemption, we have:// SPDX-License-Identifier: MITpragma solidity 0.8.18;contract LybraPoC {mapping(address => uint256) public borrowed;mapping(address => uint256) public shares;address public Alice = address(1);address public Bob = address(2);address public Eve = address(3);uint256 public bobGain;uint256 public num;uint256 public _totalSupply;uint256 public _totalShares;function redeem() public {uint256 toBeRedeemed;uint256 requiredShares;_totalSupply = 14200e18 + 1;_totalShares = 67;shares[Bob] = 1;shares[Alice] = 19;shares[Eve] = 47;borrowed[Bob] = 200e18 + 1;borrowed[Alice] = 4000e18;borrowed[Eve] = 10000e18;while (true) {num++;toBeRedeemed = (_totalSupply % _totalShares == 0)? (_totalSupply / _totalShares) - 1: (_totalSupply / _totalShares);requiredShares = (toBeRedeemed * _totalShares) / _totalSupply;if (toBeRedeemed > borrowed[Alice]) {break;}borrowed[Alice] -= toBeRedeemed;_totalSupply -= toBeRedeemed;_totalShares -= requiredShares;shares[Bob] -= requiredShares;bobGain += toBeRedeemed;}}}After redeeming Alice 23 times, the state will be:shares[Bob] = 1_totalShares = 20 + 47 = 67_totalSupply = 10200.2e18borrowed[Bob] = 200e18 + 1poolTotalEUSDCirculation = 10200.2e18 + 1depositAsset[Bob] = 1e18totalDepositedAsset = 27e18stETH.balanceOf(protocol) = 27e18shares[Alice] = 19borrowed[Alice] = 2.1e17depositAsset[Alice] = 6e18shares[Eve] = 47borrowed[Eve] = 10000e18depositAsset[Eve] = 20e18Now if Eve wants to repay her whole borrowed amount, she should burn almost 65 shares:10000e18 * 67 / 10200e18, but she has only 47 shares. So, she can only repay at most 7155e18 of her borrow. It means that Eve’s fund is stolen by Bob. In other words, the collateralized ETH are taken by Bob without burning any shares, so the left shares do not have enough ETH backed.This scenario shows that Bob made_totalSupplyand_totalSharesimbalance, then two innocent users deposited in the protocol and borrowed some eUSD. Since the difference between these two_totalSupplyand_totalSharesis large, small amount of shares are minted. Then, Bob redeemed some amount through the user who was provider. By doing so, the values of_totalSupplyand_totalSharesbecome closer to each other. Now if the second user intends to repay her borrow, she should burn more shares that she owns (because the difference of the values_totalSupplyand_totalSharesis now smaller).Fourth Scenario:Alice can not transfer less than 210e18 eUSD. Because, in the function_trasnfer,_sharesToTransfer = 209e18 * 20 / (4200e18 + 1) = 0https://github.com/code-423n4/2023-06-lybra/blob/7b73ef2fbb542b569e182d9abf79be643ca883ee/contracts/lybra/token/EUSD.sol#L153https://github.com/code-423n4/2023-06-lybra/blob/7b73ef2fbb542b569e182d9abf79be643ca883ee/contracts/lybra/token/EUSD.sol#L349Fifth Scenario:If protocol stETH balance increases by 0.1stETH through LSD after some time. Bob can buy this income without burning any share, in other words Bob steals the income of the protocol. The flow is as follows:Bob callsexcessIncomeDistribution(1e17).https://github.com/code-423n4/2023-06-lybra/blob/7b73ef2fbb542b569e182d9abf79be643ca883ee/contracts/lybra/pools/LybraStETHVault.sol#L62C14-L62C38ThepayAmountwill be100e18.https://github.com/code-423n4/2023-06-lybra/blob/7b73ef2fbb542b569e182d9abf79be643ca883ee/contracts/lybra/pools/LybraStETHVault.sol#L66Ifincome >= payAmount, thenpayAmountshould be transferred from Bob to the configurator address.https://github.com/code-423n4/2023-06-lybra/blob/7b73ef2fbb542b569e182d9abf79be643ca883ee/contracts/lybra/pools/LybraStETHVault.sol#L85In the_transfer,100e18will be converted to shares:_sharesToTransfer = 100e18 * 20 / (4200e18 + 1) = 0. So, 0 shares will be deducted from Bob, but 0.1 stETH will be transferred to him.https://github.com/code-423n4/2023-06-lybra/blob/7b73ef2fbb542b569e182d9abf79be643ca883ee/contracts/lybra/token/EUSD.sol#L348


In Summary:
Bob makes_totalSupplyand_totalSharesimbalance significantly, by just providing fake income in the protocol at day 0. Now that it is imbalanced, he can redeem or liquidate users without burning any shares. He can also steal protocol’s income fund without burning any shares.
Recommended Mitigation Steps
First Fix:During the_repay, it should return the amount of burned shares.
https://github.com/code-423n4/2023-06-lybra/blob/7b73ef2fbb542b569e182d9abf79be643ca883ee/contracts/lybra/pools/base/LybraEUSDVaultBase.sol#L279
So that in the functionsliquidation,superLiquidation, andrigidRedemption, again the burned shares should be converted to eUSD; this amount should be used for the rest of calculations.
function rigidRedemption(address provider, uint256 eusdAmount) external virtual {// ...uint256 brnedShares = _repay(msg.sender, provider, eusdAmount);eusdAmount = getMintedEUSDByShares(brnedShares);//...}
Second Fix:In theexcessIncomeDistribution, the same check should be included in the else body as well.
uint256 sharesAmount = EUSD.getSharesByMintedEUSD(payAmount - income);if (sharesAmount == 0) {//EUSD totalSupply is 0: assume that shares correspond to EUSD 1-to-1sharesAmount = (payAmount - income);}
https://github.com/code-423n4/2023-06-lybra/blob/7b73ef2fbb542b569e182d9abf79be643ca883ee/contracts/lybra/pools/LybraStETHVault.sol#L75-L79
Assessed type
Context
LybraFinance acknowledged

[H-06]EUSD.mintfunction wrong assumption of cases when calculated sharesAmount = 0
Submitted byktg, also found byKaysoft,dacian,kutugu,Co0nan,jnrlouis, andn1punp
Lines of code
https://github.com/code-423n4/2023-06-lybra/blob/main/contracts/lybra/token/EUSD.sol#L299-#L306https://github.com/code-423n4/2023-06-lybra/blob/main/contracts/lybra/token/EUSD.sol#L414-#L418
Impact
Mintfunction might calculate thesharesAmountincorrectly.User can profit by manipulating the protocol to enjoy 1-1 share-eUSD ratio even when share prices is super high.
Proof of Concept
Currently, the functionEUSD.mintcalls functionEUSD.getSharesByMintedEUSDto calculate the shares corresponding to the input eUSD amount:
functionmint(address_recipient,uint256_mintAmount)externalonlyMintVaultMintPausedreturns(uint256newTotalShares) {require(_recipient!=address(0),"MINT_TO_THE_ZERO_ADDRESS");uint256sharesAmount=getSharesByMintedEUSD(_mintAmount);if(sharesAmount==0) {//EUSD totalSupply is 0: assume that shares correspond to EUSD 1-to-1sharesAmount=_mintAmount;}...}functiongetSharesByMintedEUSD(uint256_EUSDAmount)publicviewreturns(uint256) {uint256totalMintedEUSD=_totalSupply;if(totalMintedEUSD==0) {return0;}else{return_EUSDAmount.mul(_totalShares).div(totalMintedEUSD);}}
As you can see in the comment aftersharesAmountis checked,//EUSD totalSupply is 0: assume that shares correspond to EUSD 1-to-1. The code assumes that ifsharesAmount = 0, thentotalSupplymust be 0 and the minted share should equal to input eUSD. However, that’s not always the case.
VariablesharesAmountcould be 0 iftotalShares *_EUSDAmount<totalMintedEUSDbecause this is integer division. If that happens, the user will profit by calling mint with a small EUSD amount and enjoys 1-1 minting proportion (1 share for each eUSD). The reason this can happen is becauseEUSDsupportburnSharesfeature, which remove the share of a users but keep thetotalSupplyvalue.
For example:
At the start, Bob is minted 1e18 eUSD, they receive 1e18 shares.Bob callburnSharesby1e18-1. After this, contract contains 1e18 eUSD and 1 share, which mean 1 share now worth 1e18 eUSD.If Alice callsmintwith 1e18 eUSD, then they receive 1 share (since 1 share worth 1e18 eUSD).However, if they then callmintwith 1e17 eUSD, they will receive 1e17 shares although 1 share is now worth 1e18 eUSD. This happens because1e17 * (totalShares = 2) / (totalMintedEUSD = 2e18)= 0.
Below is POC for the above example. I use foundry to run tests; create a folder namedtestand save this to a file namedeUSD.t.sol, then run it using command:
forge test --match-path test/eUSD.t.sol -vvvv
pragmasolidity^0.8.17;import{Test,console2}from"forge-std/Test.sol";import{Iconfigurator}from"contracts/lybra/interfaces/Iconfigurator.sol";import{Configurator}from"contracts/lybra/configuration/LybraConfigurator.sol";import{GovernanceTimelock}from"contracts/lybra/governance/GovernanceTimeLock.sol";import{mockCurve}from"contracts/mocks/mockCurve.sol";import{EUSD}from"contracts/lybra/token/EUSD.sol";contractTestEUSDisTest{addressadmin=address(0x1111);addressuser1=address(0x1);addressuser2=address(0x2);addresspool=address(0x3);Configuratorconfigurator;GovernanceTimelockgovernanceTimeLock;mockCurvecurve;EUSDeUSD;functionsetUp()public{// deploy curvecurve=newmockCurve();// deploy governance time lockaddress[]memoryproposers=newaddress[](1);proposers[0] =admin;address[]memoryexecutors=newaddress[](1);executors[0] =admin;governanceTimeLock=newGovernanceTimelock(1,proposers,executors,admin);configurator=newConfigurator(address(governanceTimeLock),address(curve));eUSD=newEUSD(address(configurator));// set mintVault to this addressvm.prank(admin);configurator.setMintVault(address(this),true);}functiontestRoundingNotCheck()public{// Mint some tokens for user1eUSD.mint(user1,1e18);assertEq(eUSD.balanceOf(user1),1e18);assertEq(eUSD.totalSupply(),1e18);//eUSD.burnShares(user1,1e18-1);assertEq(eUSD.getTotalShares(),1);assertEq(eUSD.sharesOf(user1),1);assertEq(eUSD.totalSupply(),1e18);// After this, 1 shares worth 1e18 eUSDs// If mintAmount = 1e18 -> receive  1 shareseUSD.mint(user2,1e18);assertEq(eUSD.getTotalShares(),2);assertEq(eUSD.sharesOf(user2),1);assertEq(eUSD.totalSupply(),2e18);// However, if mintAmount = 1e17 -> receive 1e17 shareseUSD.mint(user2,1e17);assertEq(eUSD.sharesOf(user2),1+1e17);}}
Tools Used
Manual Review
Recommended Mitigation Steps
I recommend checking again inEUSD.mintfunction ifsharesAmountis 0 andtotalSupplyis not 0, then exit the function without minting anything.
LybraFinance confirmed

[H-07]_voteSucceeded()returns true whenagainstVotes > forVotesand vice versa
Submitted byT1MOH, also found byyjrwkk,josephdara,devival,KupiaSec,LaScaloneta,cccz,Iurii3,pep7siup,0xnev,bytes032,bytes032,skyge, andsces60107
As a result, voting process is broken, as it won’t execute proposals with most offorVotes. Instead, it will execute proposals with most ofagainstVotes.
Proof of Concept
It returns whether number of votes with support = 1 is greater than with support = 0:
function_voteSucceeded(uint256proposalId)internalviewoverridereturns(bool){returnproposalData[proposalId].supportVotes[1] >proposalData[proposalId].supportVotes[0];}
However support = 1 meansagainstVotes, and support = 0 meansforVotes:
https://github.com/code-423n4/2023-06-lybra/blob/26915a826c90eeb829863ec3851c3c785800594b/contracts/lybra/governance/LybraGovernance.sol#L120-L122
functionproposals(uint256proposalId)externalviewreturns(...) {...forVotes=proposalData[proposalId].supportVotes[0];againstVotes=proposalData[proposalId].supportVotes[1];abstainVotes=proposalData[proposalId].supportVotes[2];...}
Tools Used
Manual Review
Recommended Mitigation Steps
Swap 1 and 0:
function_voteSucceeded(uint256proposalId)internalviewoverridereturns(bool){returnproposalData[proposalId].supportVotes[0] >proposalData[proposalId].supportVotes[1];}
Assessed type
Governance
LybraFinance confirmed

[H-08] Governance wrongly calculates_quorumReached()
Submitted byT1MOH, also found byjosephdara,yjrwkk,LokiThe5th,Iurii3,squeaky_cactus,skyge, andzambody
For some reason it is calculated as sum ofagainstVotesandabstainVotesinstead oftotalVoteson proposal. As the result, quorum will be reached only if >=1/3 of all votes are abstain or against, which doesn’t make sense.
Proof of Concept
Number of votes with support = 1 and support = 2 is summed up:
function_quorumReached(uint256proposalId)internalviewoverridereturns(bool){returnproposalData[proposalId].supportVotes[1] +proposalData[proposalId].supportVotes[2] >=quorum(proposalSnapshot(proposalId));}
However support = 1 means against votes, support = 2 means abstain votes:
https://github.com/code-423n4/2023-06-lybra/blob/26915a826c90eeb829863ec3851c3c785800594b/contracts/lybra/governance/LybraGovernance.sol#L120-L122
functionproposals(uint256proposalId)externalviewreturns(...) {...forVotes=proposalData[proposalId].supportVotes[0];againstVotes=proposalData[proposalId].supportVotes[1];abstainVotes=proposalData[proposalId].supportVotes[2];...}
Tools Used
Manual review
Recommended Mitigation Steps
UsetotalVotes:
function_quorumReached(uint256proposalId)internalviewoverridereturns(bool){returnproposalData[proposalId].totalVotes>=quorum(proposalSnapshot(proposalId));}
Assessed type
Governance
LybraFinance confirmed

