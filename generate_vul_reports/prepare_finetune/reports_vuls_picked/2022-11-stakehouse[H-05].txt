Type of vulnerability: Reentrancy
Cause of vulnerability: Violation of the check-effect pattern, where state changes are made after an external call, allowing for multiple withdrawals before the state is updated to prevent further withdrawals.
Execution process: An attacker creates a smart contract that calls the `withdrawETHForKnot` function. Upon receiving the initial ETH transfer, the smart contract's `receive` function triggers a reentrant call back to `withdrawETHForKnot`, allowing the attacker to withdraw additional ETH before the public key is banned.
Vulnerable code: 
```solidity
// refund 4 ether from smart wallet to node runner's EOA
IOwnableSmartWallet(associatedSmartWallet).rawExecute(_recipient,"",4 ether);
// update the mapping
bannedBLSPublicKeys[_blsPublicKeyOfKnot] = associatedSmartWallet;
```