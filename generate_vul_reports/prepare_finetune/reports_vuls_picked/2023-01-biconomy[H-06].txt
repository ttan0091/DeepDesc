Type of vulnerability: Signature Malleability / Signature Verification Bypass
Cause of vulnerability: The `tokenGasPriceFactor` value is not included in the signed transaction data, allowing the submitter to manipulate this value without detection by the contract owner.
Execution process: The submitter simulates a transaction with a certain `tokenGasPriceFactor` value, obtains the owner's signature for this transaction, and then submits the transaction with a different `tokenGasPriceFactor` value to increase the gas repayment and steal funds.
Vulnerable code: 
```solidity
function encodeTransactionData(Transaction memory _tx, FeeRefund memory refundInfo, uint256 _nonce) public view returns(bytes memory) {
    bytes32 safeTxHash = keccak256(abi.encode(ACCOUNT_TX_TYPEHASH, _tx.to, _tx.value, keccak256(_tx.data), _tx.operation, _tx.targetTxGas, refundInfo.baseGas, refundInfo.gasPrice, refundInfo.gasToken, refundInfo.refundReceiver, _nonce));
    return abi.encodePacked(bytes1(0x19), bytes1(0x01), domainSeparator(), safeTxHash);
}

function handlePayment(uint256 gasUsed, uint256 baseGas, uint256 gasPrice, uint256 tokenGasPriceFactor, address gasToken, address payable refundReceiver) private nonReentrant returns(uint256 payment) {
    address payable receiver = refundReceiver == address(0) ? payable(tx.origin) : refundReceiver;
    if (gasToken == address(0)) {
        payment = (gasUsed + baseGas) * (gasPrice < tx.gasprice ? gasPrice : tx.gasprice);
        (bool success, ) = receiver.call{value: payment}("");
        require(success, "BSA011");
    } else {
        payment = (gasUsed + baseGas) * (gasPrice) / (tokenGasPriceFactor);
        require(transferToken(gasToken, receiver, payment), "BSA012");
    }
}

if (refundInfo.gasPrice > 0) {
    payment = handlePayment(startGas - gasleft(), refundInfo.baseGas, refundInfo.gasPrice, refundInfo.tokenGasPriceFactor, refundInfo.gasToken, refundInfo.refundReceiver);
    emit WalletHandlePayment(txHash, payment);
}
```