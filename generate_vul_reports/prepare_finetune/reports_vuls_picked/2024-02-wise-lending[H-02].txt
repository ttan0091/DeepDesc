Type of vulnerability: Invalid Validation
Cause of vulnerability: Insufficient validation in the `_removePositionData` function, which assumes that the `poolToken` passed as a parameter always exists in the user token array, leading to incorrect removal of user debt information.
Execution process: An attacker can exploit this by calling `paybackBadDebtNoReward` with a non-existent `paybackToken`, bypassing checks and causing the system to zero out the user's debt information.
Vulnerable code: 
```solidity
function _removePositionData(uint256 _nftId, address _poolToken, function(uint256) view returns(uint256) _getPositionTokenLength, function(uint256, uint256) view returns(address) _getPositionTokenByIndex, function(uint256, address) internal _deleteLastPositionData, bool isLending) private {
    uint256 length = _getPositionTokenLength(_nftId);
    if (length == 1) {
        _deleteLastPositionData(_nftId, _poolToken);
        return;
    }
    uint8 i;
    uint256 endPosition = length - 1;
    while (i < length) {
        if (i == endPosition) {
            _deleteLastPositionData(_nftId, _poolToken);
            break;
        }
        if (_getPositionTokenByIndex(_nftId, i) != _poolToken) {
            unchecked { ++i; }
            continue;
        }
        address poolToken = _getPositionTokenByIndex(_nftId, endPosition);
        isLending == true ? positionLendTokenData[_nftId][i] = poolToken : positionBorrowTokenData[_nftId][i] = poolToken;
        _deleteLastPositionData(_nftId, _poolToken);
        break;
    }
}
```