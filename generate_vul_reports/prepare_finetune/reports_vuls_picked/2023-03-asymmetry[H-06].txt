Type of vulnerability: Incorrect Price Assumption

Cause of vulnerability: The contract assumes a fixed peg of 1 stETH to 1 ETH, which does not account for market volatility and price fluctuations.

Execution process: When the `withdraw` function is called, the contract unwraps wstETH to stETH and attempts to exchange stETH for ETH using the Curve pool. The minimum output amount (`minOut`) is calculated based on the stETH balance and a fixed slippage percentage. If the market price of stETH is below the assumed peg, the exchange will fail, preventing users from withdrawing their funds.

Vulnerable code:
```solidity
function ethPerDerivative(uint256 _amount) public view returns (uint256) {
    return IWStETH(WST_ETH).getStETHByWstETH(10**18);
}

function withdraw(uint256 _amount) external onlyOwner {
    IWStETH(WST_ETH).unwrap(_amount);
    uint256 stEthBal = IERC20(STETH_TOKEN).balanceOf(address(this));
    IERC20(STETH_TOKEN).approve(LIDO_CRV_POOL, stEthBal);
    uint256 minOut = (stEthBal * (10**18 - maxSlippage)) / 10**18;
    IStEthEthPool(LIDO_CRV_POOL).exchange(1, 0, stEthBal, minOut);
    (bool sent, ) = address(msg.sender).call{value: address(this).balance}("");
    require(sent, "Failed to send Ether");
}
```