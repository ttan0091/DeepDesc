Type of vulnerability: Arithmetic Rounding and Integer Conversion Vulnerabilities

Cause of vulnerability: 
1. Implicit rounding down in division and multiplication operations.
2. Inappropriate method of casting signed integers to unsigned integers.

Execution process: 
1. Exploiting implicit rounding down in `mul` and `div` functions to mint spreads without paying collateral.
2. Utilizing flawed `intToUint` conversion to manipulate collateral claims during the `claimCollateral` phase.

Vulnerable code: 
1. QuantMath.sol#L137 and QuantMath.sol#L151:
   ```solidity
   function mul(FixedPointInt memory a, FixedPointInt memory b) internal pure returns (FixedPointInt memory) {
       return FixedPointInt((a.value * b.value) / _SCALING_FACTOR);
   }
   function div(FixedPointInt memory a, FixedPointInt memory b) internal pure returns (FixedPointInt memory) {
       return FixedPointInt((a.value * _SCALING_FACTOR) / b.value);
   }
   ```
2. SignedConverter.sol#L28:
   ```solidity
   function intToUint(int256 a) internal pure returns (uint256) {
       if (a < 0) {
           return uint256(-a);
       } else {
           return uint256(a);
       }
   }
   ```