Type of vulnerability: Liquidity Proportion Discrepancy

Cause of vulnerability: The contract does not ensure that the proportions of the two tokens provided by liquidity providers are equal, leading to an excess of one token in the pool.

Execution process:
1. A liquidity provider (Alice) adds liquidity in equal proportions of two tokens.
2. Another liquidity provider (Bob) adds liquidity in unequal proportions of the two tokens.
3. The contract calculates the amount of LP tokens to mint based on the smaller proportion of the two tokens provided by Bob.
4. The excess tokens from the larger proportion are left in the pool, effectively donated to other liquidity providers.

Vulnerable code:
```solidity
// calculate amount of lp tokens as a fraction of existing reserves
uint256 baseTokenShare = (baseTokenAmount * lpTokenSupply) / baseTokenReserves();
uint256 fractionalTokenShare = (fractionalTokenAmount * lpTokenSupply) / fractionalTokenReserves();
return Math.min(baseTokenShare, fractionalTokenShare);
```