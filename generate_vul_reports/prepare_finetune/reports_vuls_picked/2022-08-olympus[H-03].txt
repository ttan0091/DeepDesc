Type of vulnerability: Front-running
Cause of vulnerability: Lack of synchronization between approval updates and withdrawals
Execution process: An attacker can monitor the blockchain for transactions that update withdrawal approvals. By front-running these transactions, the attacker can withdraw the maximum allowed amount before the approval is reduced, then withdraw again using the newly reduced approval.
Vulnerable code:
```solidity
function setApprovalFor(
    address withdrawer_,
    ERC20 token_,
    uint256 amount_
) external permissioned {
    withdrawApproval[withdrawer_][token_] = amount_;
    emit ApprovedForWithdrawal(withdrawer_, token_, amount_);
}

function grantApproval(
    address for_,
    ERC20 token_,
    uint256 amount_
) external onlyRole("custodian") {
    TRSRY.setApprovalFor(for_, token_, amount_);
}
```