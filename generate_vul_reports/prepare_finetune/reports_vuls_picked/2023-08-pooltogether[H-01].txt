Type of vulnerability: Math
Cause of vulnerability: The reward calculation mistakenly includes an extra `reserveForOpenDraw` amount just after the draw has been closed, leading to an overestimation of the reserve and thus distributing too many tokens as rewards.
Execution process: A relayer calls `rngComplete` in `RngRelayAuction.sol` to close the draw and distribute rewards. The rewards are calculated using the future reserve, which erroneously includes the `reserveForOpenDraw` for the next draw, leading to an inflated reward distribution.
Vulnerable code:
```solidity
uint32 drawId = prizePool.closeDraw(_randomNumber);
uint256 futureReserve = prizePool.reserve() + prizePool.reserveForOpenDraw();
uint256[] memory _rewards = RewardLib.rewards(auctionResults, futureReserve);
```