Type of vulnerability: Replay Attack
Cause of vulnerability: Lack of domain-specific validation in the execution process, allowing calldata to be replayed across different chains.
Execution process: An attacker, acting as a malicious relayer, modifies the `ExecuteArgs.local` field in the calldata to a valid local representation of a canonical token on a different chain and replays the calldata on that chain, causing a double-spend issue.
Vulnerable code: 
```solidity
function _getTransferId(ExecuteArgs calldata _args) private view returns(bytes32) {
    (uint32 tokenDomain, bytes32 tokenId) = s.tokenRegistry.getTokenId(_args.local);
    return _calculateTransferId(_args.params, _args.amount, _args.nonce, tokenId, tokenDomain, _args.originSender);
}
```