Type of vulnerability: Incorrect Calculation of Principal Withdrawable
Cause of vulnerability: The borrow limit is reduced by the start fee, causing `totalSupply[id]` to not be 1:1 with the borrow limit.
Execution process: When a lender attempts to withdraw their principal, the calculation of `_principalWithdrawable` uses the reduced borrow limit, leading to an overestimation of the withdrawable amount.
Vulnerable code: 
```solidity
function _calculatePrincipalWithdrawable(uint256 _id, address _lender) internal view returns(uint256) {
    uint256 _borrowedTokens = pooledCLConstants[_id].borrowLimit;
    uint256 _totalLiquidityWithdrawable = _borrowedTokens.sub(POOLED_CREDIT_LINE.getPrincipal(_id));
    uint256 _principalWithdrawable = _totalLiquidityWithdrawable.mul(balanceOf(_lender, _id)).div(_borrowedTokens);
    return _principalWithdrawable;
}
```