Type of vulnerability: ERC20 Compliance Check Failure
Cause of vulnerability: Non-compliant ERC20 tokens that do not return a boolean value on transfer operations cause the contract to revert due to mismatch in expected return data size.
Execution process: When the contract attempts to transfer tokens using a non-compliant ERC20 token that does not return a boolean value, the Solidity compiler checks for the return data size matching the ERC20 interface. Since the non-compliant token does not provide the expected return value, the transaction reverts even if the transfer was technically successful.
Vulnerable code: 
```solidity
// RoyaltyVault.sol L43-L46
function withdraw(address token, uint256 amount) external onlyOwner {
    IERC20(token).transfer(owner(), amount);
}

// RoyaltyVault.sol L51-L57
function distribute(address token, address[] memory recipients, uint256[] memory amounts) external onlyOwner {
    for (uint256 i = 0; i < recipients.length; i++) {
        IERC20(token).transfer(recipients[i], amounts[i]);
    }
}
```