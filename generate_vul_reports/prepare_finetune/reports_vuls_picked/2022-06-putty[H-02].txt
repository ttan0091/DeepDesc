Type of vulnerability: Race Condition
Cause of vulnerability: Lack of synchronization between order cancellation and order filling
Execution process: An attacker can front-run the `acceptCounterOffer()` transaction with a `fillOrder()` transaction that fills the original order, resulting in both orders being filled.
Vulnerable code: 
```solidity
function acceptCounterOffer(Order memory order, bytes calldata signature, Order memory originalOrder) public payable returns (uint256 positionId) {
    // cancel the original order
    cancel(originalOrder);
    // accept the counter offer
    uint256[] memory floorAssetTokenIds = new uint256[](0);
    positionId = fillOrder(order, signature, floorAssetTokenIds);
}

function cancel(Order memory order) public {
    require(msg.sender == order.maker, "Not your order");
    bytes32 orderHash = hashOrder(order);
    // mark the order as cancelled
    cancelledOrders[orderHash] = true;
    emit CancelledOrder(orderHash, order);
}
```