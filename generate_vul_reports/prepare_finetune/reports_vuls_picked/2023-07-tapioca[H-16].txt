Type of vulnerability: Denial of Service (DoS) due to variable gas cost of saving payload
Cause of vulnerability: The gas cost of saving large payloads and emitting events exceeds the gas reserved for the rest of the execution, leading to transaction failure and blocking of the LayerZero channel.
Execution process: An attacker invokes the `sendToYBAndBorrow` function with a large payload that includes fake data to reach the max payload size limit (10k bytes). The payload includes a call to a `GasDrainingContract` on the receiving chain, which consumes all available gas, causing the transaction to fail and block the pathway.
Vulnerable code: 
```solidity
function _storeFailedMessage(uint16 _srcChainId, bytes memory _srcAddress, uint64 _nonce, bytes memory _payload, bytes memory _reason) internal virtual {
    failedMessages[_srcChainId][_srcAddress][_nonce] = keccak256(_payload);
    emit MessageFailed(_srcChainId, _srcAddress, _nonce, _payload, _reason);
}
```