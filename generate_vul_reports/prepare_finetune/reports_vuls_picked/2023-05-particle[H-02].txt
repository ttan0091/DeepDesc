Type of vulnerability: Fee Collection Omission

Cause of vulnerability: The `withdrawEthWithInterest` function does not deduct the treasury fee from the interest before transferring it to the lender, unlike the `_withdrawAccountInterest` function which correctly handles the treasury fee deduction.

Execution process: When a lender calls the `withdrawEthWithInterest` function to withdraw ETH with interest, the function calculates the payable interest but transfers the full amount of interest along with the lien price to the lender, without subtracting the treasury fee.

Vulnerable code:
```solidity
function withdrawEthWithInterest(Lien calldata lien, uint256 lienId) external override validateLien(lien, lienId) {
    if (msg.sender != lien.lender) {
        revert Errors.Unauthorized();
    }
    if (lien.loanStartTime == 0) {
        revert Errors.InactiveLoan();
    }
    uint256 payableInterest = _calculateCurrentPayableInterest(lien);
    // verify that the liquidation condition has met (borrower insolvent or auction concluded)
    if (payableInterest < lien.credit && !_auctionConcluded(lien.auctionStartTime)) {
        revert Errors.LiquidationHasNotReached();
    }
    // delete lien (delete first to prevent reentrancy)
    delete liens[lienId];
    // transfer ETH with interest back to lender
    payable(lien.lender).transfer(lien.price + payableInterest);
    // transfer PnL to borrower
    if (lien.credit > payableInterest) {
        payable(lien.borrower).transfer(lien.credit - payableInterest);
    }
    emit WithdrawETH(lienId);
    // withdraw interest from this account too
    _withdrawAccountInterest(payable(msg.sender));
}
```