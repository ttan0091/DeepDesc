Type of vulnerability: Incorrect Unit Handling
Cause of vulnerability: The variable `_principalWithdrawable` is calculated as an amount in the borrowAsset but is treated as a share amount when passed to the `withdrawShares` function.
Execution process: When the `terminate` function is called, it calculates `_principalWithdrawable` based on the borrowAsset amount but uses this value as if it were shares to withdraw from the savings account, leading to an incorrect withdrawal amount.
Vulnerable code: 
```solidity
uint256 _principalWithdrawable = _notBorrowed.mul(totalSupply[_id]).div(_borrowedTokens);
SAVINGS_ACCOUNT.withdrawShares(_borrowAsset, _strategy, _to, _principalWithdrawable.add(_totalInterestInShares), false);
```