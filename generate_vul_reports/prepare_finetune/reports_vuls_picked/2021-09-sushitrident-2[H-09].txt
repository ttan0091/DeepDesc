Type of vulnerability: Range Fee Growth Underflow
Cause of vulnerability: The calculation of `feeGrowthInside0` and `feeGrowthInside1` can result in underflow when `feeGrowthBelow + feeGrowthAbove` is not smaller than `_feeGrowthGlobal`, causing the transaction to revert.
Execution process: When a pool crosses a tick, it updates either `feeGrowthOutside0` or `feeGrowthOutside1`. If the conditions are met such that `feeGrowthBelow + feeGrowthAbove` is not smaller than `_feeGrowthGlobal`, the calculation of `feeGrowthInside0` and `feeGrowthInside1` will underflow, leading to a transaction revert. This prevents users from providing liquidity or burning liquidity, causing funds to be stuck in the contract.
Vulnerable code: 
```solidity
feeGrowthInside0 = _feeGrowthGlobal0 - feeGrowthBelow0 - feeGrowthAbove0;
feeGrowthInside1 = _feeGrowthGlobal1 - feeGrowthBelow1 - feeGrowthAbove1;
```