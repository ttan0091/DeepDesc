Type of vulnerability: Re-entrancy Attack
Cause of vulnerability: Lack of re-entrancy protection and updating the pool state after external calls
Execution process: An attacker can repeatedly call the `purchase()` function to drain the contract of ETH by exploiting the lack of re-entrancy guards and the order of state updates.
Vulnerable code: 
```solidity
function purchase(uint256 _poolId, address _market, address _nftContract, uint256 _tokenId, uint256 _price, bytes memory _purchaseOrder, bytes32[] memory _purchaseProof) external {
    _verifyUnsuccessfulState();
    address vault = IMarketBuyer(_market).execute{value: _price}(_purchaseOrder);
    poolToVault[_poolId] = vault;
    poolInfo[_poolId].success = true;
    emit Purchase(_poolId, vault, _nftContract, _tokenId, _price);
}
```