Type of vulnerability: Precision Error
Cause of vulnerability: Incorrect decimal precision in token to shares conversion
Execution process: The function `getTokensForShares` incorrectly assumes that the precision of `getPricePerFullShare` is always 18 decimals, leading to incorrect conversions for tokens with different decimal precisions.
Vulnerable code: 
```solidity
function getTokensForShares(uint256 shares, address asset) public view override returns (uint256 amount) {
    if (shares == 0) return 0;
    // @audit should divided by vaultDecimals
    amount = IyVault(liquidityToken[asset]).getPricePerFullShare().mul(shares).div(1e18);
}
```