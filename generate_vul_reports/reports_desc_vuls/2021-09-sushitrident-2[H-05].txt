Type of vulnerability: Integer Overflow and Underflow
Cause of vulnerability: Explicit typecasting from uint256 to uint128 without checking if the value exceeds the maximum limit of uint128, leading to potential overflow and truncation of values.
Execution process: An attacker manipulates the input parameters to the `mint` function, specifically setting `amount1Desired` to a value that, when processed through the `_getAmountsForLiquidity` function, results in a value exceeding `type(uint128).max`. This results in the value being truncated to fit within uint128, allowing the attacker to pay less than the actual cost for a large amount of liquidity.
Vulnerable code: 
```solidity
amount1Actual = uint128(DyDxMath.getDy(_liquidity, priceLower, priceUpper, true));
```