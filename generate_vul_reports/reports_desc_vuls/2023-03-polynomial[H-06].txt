Type of vulnerability: Denial of Service (DoS) due to Division by Zero
Cause of vulnerability: Lack of validation for zero total supply in the `getTokenPrice()` function
Execution process: When all positions are closed and all vault token holders withdraw their funds, `getTotalSupply()` returns zero, leading to a division by zero in `getTokenPrice()`, causing the contract to become unresponsive and locking funds inside.
Vulnerable code: 
```solidity
function getTokenPrice() public view returns (uint256) {
    if (totalFunds == 0) {
        return 1e18;
    }
    uint256 totalSupply = getTotalSupply();
    if (positionData.positionId == 0) {
        return totalFunds.divWadDown(totalSupply);
    }
}
```