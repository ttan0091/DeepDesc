Type of vulnerability: Front-running and Price Manipulation
Cause of vulnerability: Lack of price validation before adding liquidity to an existing pool
Execution process: An attacker creates a pool with an unbalanced token ratio, then calls `finalize()` to add liquidity at an unfair price, and finally removes their initial liquidity to take out a disproportionate amount of tokens.
Vulnerable code: 
```solidity
if(pair==address(0)) {
    createPool();
}
/// @dev add liquidity to pool via the pair directly
_safeTransfer(address(token1),tokenPair,token1Amount);
_safeTransfer(address(token2),tokenPair,token2Amount);
liquidity=IUniswapV2Pair(tokenPair).mint(address(this));
```