Type of vulnerability: Reentrancy or Unauthorized Asset Transfer
Cause of vulnerability: Lack of address validation before approving and transferring assets
Execution process: An attacker creates a malicious market contract that, when called, transfers all TOFT tokens to the attacker. The attacker then calls the `removeCollateral` function with this malicious market address, bypassing the lack of validation and causing the contract to approve and transfer all TOFT tokens to the attacker.
Vulnerable code: 
```solidity
function remove(bytes memory _payload) public {
    ...
    approve(removeParams.market, removeParams.share); // no validation prior to this 2 calls
    IMarket(removeParams.market).removeCollateral(to, to, removeParams.share);
    ...
}
```