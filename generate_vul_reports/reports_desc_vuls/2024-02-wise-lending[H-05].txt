Type of vulnerability: Incorrect Mapping Usage
Cause of vulnerability: The `isAave` mapping is checked using the `WiseLending` `nftId` instead of the Power Farmâ€™s `keyId`, leading to incorrect results when determining if a position is an Aave position.
Execution process: The vulnerability occurs when functions like `getLiveDebtRatio()`, `_manuallyPaybackShares()`, `checkDebtRatio()`, and `_coreLiquidation()` use the `nftId` to check the `isAave` mapping. This results in incorrect borrow shares calculations and prevents manual payback and liquidation of positions.
Vulnerable code: 
1. PendlePowerFarm.sol#L64-L70
   ```solidity
   uint256 borrowShares = isAave[_nftId] ? _getPositionBorrowSharesAave(_nftId) : _getPositionBorrowShares(_nftId);
   ```
2. PendlePowerFarm.sol#L127-L129
   ```solidity
   if (isAave[_nftId] == true) { poolAddress = AAVE_WETH_ADDRESS; }
   ```
3. PendlePowerFarmMathLogic.sol#L396-L402
   ```solidity
   uint256 borrowShares = isAave[_nftId] ? _getPositionBorrowSharesAave(_nftId) : _getPositionBorrowShares(_nftId);
   ```
4. PendlePowerFarmLeverageLogic.sol#L575-L590
   ```solidity
   address paybackToken = isAave[_nftId] == true ? AAVE_WETH_ADDRESS : WETH_ADDRESS;
   paybackAmount = WISE_LENDING.paybackAmount(paybackToken, _shareAmountToPay);
   uint256 cutoffShares = isAave[_nftId] == true ? _getPositionBorrowSharesAave(_nftId) * FIVTY_PERCENT / PRECISION_FACTOR_E18 : _getPositionBorrowShares(_nftId) * FIVTY_PERCENT / PRECISION_FACTOR_E18;
   ```