Type of vulnerability: Exchange Rate Limitation
Cause of vulnerability: The calculation of the exchange rate is constrained by the `_withdrawableAssets` which cannot exceed `_totalSupplyToAssets`, leading to a capped exchange rate.
Execution process: When the vault is under-collateralized, the function `_currentExchangeRate` calculates the exchange rate based on `_withdrawableAssets` and `_totalSupplyAmount`. However, due to the condition `if (_withdrawableAssets > _totalSupplyToAssets)`, the exchange rate is capped at `_lastRecordedExchangeRate`, preventing it from increasing.
Vulnerable code: 
```solidity
function _currentExchangeRate() internal view returns (uint256) {
    uint256 _totalSupplyAmount = _totalSupply();
    uint256 _totalSupplyToAssets = _convertToAssets(_totalSupplyAmount, _lastRecordedExchangeRate, Math.Rounding.Down);
    uint256 _withdrawableAssets = _yieldVault.maxWithdraw(address(this));
    if (_withdrawableAssets > _totalSupplyToAssets) {
        _withdrawableAssets = _withdrawableAssets - (_withdrawableAssets - _totalSupplyToAssets);
    }
    if (_totalSupplyAmount != 0 && _withdrawableAssets != 0) {
        return _withdrawableAssets.mulDiv(_assetUnit, _totalSupplyAmount, Math.Rounding.Down);
    }
    return _assetUnit;
}
```