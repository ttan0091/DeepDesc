Type of vulnerability: Access Control
Cause of vulnerability: Lack of proper access control checks in the `liquidate` function when `autoLiquidation` is set to false.
Execution process: An attacker can call the `liquidate` function on a credit line where `autoLiquidation` is false, bypassing the requirement to supply the necessary borrow tokens and directly receiving all the collateral tokens meant for the lender.
Vulnerable code: 
```solidity
if(creditLineConstants[_id].autoLiquidation && _lender != msg.sender) {
    uint256 _borrowTokens = _borrowTokensToLiquidate(_borrowAsset, _collateralAsset, _totalCollateralTokens);
    if(_borrowAsset == address(0)) {
        uint256 _returnETH = msg.value.sub(_borrowTokens, 'Insufficient ETH to liquidate');
        if(_returnETH != 0) {
            (bool success, ) = msg.sender.call{value: _returnETH}('');
            require(success, 'Transfer fail');
        }
    } else {
        IERC20(_borrowAsset).safeTransferFrom(msg.sender, _lender, _borrowTokens);
    }
}
_transferCollateral(_id, _collateralAsset, _totalCollateralTokens, _toSavingsAccount);
emit CreditLineLiquidated(_id, msg.sender);
```