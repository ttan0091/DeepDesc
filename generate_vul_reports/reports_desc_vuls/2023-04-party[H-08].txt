Type of vulnerability: Replay Attack
Cause of vulnerability: Lack of a check to prevent users from voting multiple times on the same proposal.
Execution process: A user with a small amount of voting power can repeatedly call the `voteToVeto` function to accumulate enough votes to reach the veto threshold, thereby vetoing the proposal.
Vulnerable code: 
```solidity
contract VetoProposal {
    error NotPartyHostError();
    error ProposalNotActiveError(uint256 proposalId);

    /// @notice Mapping from party to proposal ID to votes to veto the proposal.
    mapping(Party => mapping(uint256 => uint96)) public vetoVotes;

    /// @notice Vote to veto a proposal.
    /// @param party The party to vote on.
    function voteToVeto(Party party, uint256 proposalId, uint96 votes) external {
        PartyGovernance.ProposalStatus proposalStatus = party.getProposalStatus(proposalId);
        if (proposalStatus != PartyGovernance.ProposalStatus.Voting)
            revert ProposalNotActiveError(proposalId);

        // Increase the veto vote count
        uint96 votingPower = party.getVotingPowerAt(msg.sender, 0);
        vetoVotes[party][proposalId] += votes;
    }
}
```