Type of vulnerability: Reentrancy
Cause of vulnerability: Lack of reentrancy guard and improper use of checks-effects-interactions pattern
Execution process: 
1. Borrower creates a loan with `createLoan()`.
2. Borrower calls `lend()`, funding their own loan and receiving the lend ticket.
3. A new lender attempts to buy out the loan, sending funds to the original lender (borrower).
4. Borrower immediately calls `repayAndCloseLoan()` before the lend ticket is transferred to the new lender, keeping the NFT, loan amount, and accrued interest.
Vulnerable code: 
```solidity
}else{
    ERC20(loan.loanAssetContractAddress).safeTransferFrom(msg.sender, currentLoanOwner, accumulatedInterest + previousLoanAmount);
}
ILendTicket(lendTicketContract).loanFacilitatorTransfer(currentLoanOwner, sendLendTicketTo, loanId);

function repayAndCloseLoan(uint256 loanId) external override notClosed(loanId) {
    Loan storage loan = loanInfo[loanId];
    uint256 interest = _interestOwed(loan.loanAmount, loan.lastAccumulatedTimestamp, loan.perAnumInterestRate, loan.accumulatedInterest);
    address lender = IERC721(lendTicketContract).ownerOf(loanId);
    loan.closed = true;
    ERC20(loan.loanAssetContractAddress).safeTransferFrom(msg.sender, lender, interest + loan.loanAmount);
    IERC721(loan.collateralContractAddress).safeTransferFrom(address(this), IERC721(borrowTicketContract).ownerOf(loanId), loan.collateralTokenId);
    emit Repay(loanId, msg.sender, lender, interest, loan.loanAmount);
    emit Close(loanId);
}
```