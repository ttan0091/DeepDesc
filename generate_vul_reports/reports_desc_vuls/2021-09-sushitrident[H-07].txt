Type of vulnerability: First Liquidity Provider Exploit
Cause of vulnerability: Initial liquidity provision forced to supply assets in the same amount regardless of asset weights, decimals, and market prices.
Execution process: The first liquidity provider (Alice) is forced to supply equal amounts of different assets (e.g., 1e18 WBTC and 1e18 USDT), creating an imbalance. An attacker (Bob) can exploit this by swapping a small amount of USDT for a large amount of WBTC, effectively draining the more valuable asset.
Vulnerable code: 
```solidity
uint120 ratio = uint120(_div(toMint, totalSupply));
for (uint256 i = 0; i < tokens.length; i++) {
    address tokenIn = tokens[i];
    uint120 reserve = records[tokenIn].reserve;
    // @dev If token balance is '0', initialize with `ratio`.
    uint120 amountIn = reserve != 0 ? uint120(_mul(ratio, reserve)) : ratio;
    require(amountIn >= MIN_BALANCE, "MIN_BALANCE");
    // @dev Check Trident router has sent `amountIn` for skim into pool.
    unchecked {
        // @dev This is safe from overflow - only logged amounts handled.
        require(_balance(tokenIn) >= amountIn + reserve, "NOT_RECEIVED");
        records[tokenIn].reserve += amountIn;
    }
    emit Mint(msg.sender, tokenIn, amountIn, recipient);
}
_mint(recipient, toMint);
liquidity = toMint;
```