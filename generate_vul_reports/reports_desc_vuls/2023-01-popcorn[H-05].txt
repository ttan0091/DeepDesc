Type of vulnerability: Delegatecall Injection
Cause of vulnerability: Use of `delegatecall` in `AdapterBase` allows the `Strategy` contract to access and manipulate the calling contract's storage.
Execution process: A malicious `Strategy` contract is paired with the `BeefyAdapter`. When `harvest()` is called, the malicious strategy manipulates the `performanceFee` and `highWaterMark` values in the `BeefyAdapter`'s storage.
Vulnerable code: The use of `delegatecall` in `AdapterBase` to call the `Strategy` contract.