Type of vulnerability: Arithmetic Error
Cause of vulnerability: Incorrect order of arithmetic operations leading to division before addition.
Execution process: Each time the `getAmountToTransfer` function is called, the `incentivePool[tokenAddress]` value is incorrectly divided by `BASE_DIVISOR` before adding the calculated fee, causing the value to diminish rapidly and eventually become zero.
Vulnerable code: 
```solidity
incentivePool[tokenAddress] = (incentivePool[tokenAddress] + (amount * (transferFeePerc - tokenManager.getTokensInfo(tokenAddress).equilibriumFee))) / BASE_DIVISOR;
```