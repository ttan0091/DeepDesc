Type of vulnerability: Arithmetic Underflow/Overflow
Cause of vulnerability: The calculation of `sqrtPriceX96` can result in zero if `oracleData.token1Price` is greater than `oracleData.token0Price * 10**18`, leading to an incorrect valuation of liquidity.
Execution process: When `sqrtPriceX96` is zero, the liquidity calculation assumes all holdings are `amount0`, which underestimates the actual liquidity value, potentially leading to premature liquidations.
Vulnerable code: 
```solidity
if (oracleData.token1Decimal == oracleData.token0Decimal) {
    // multiply by 10^18 then divide by 10^9 to preserve price in wei
    oracleData.sqrtPriceX96 = uint160((SqrtLib.sqrt(((oracleData.token0Price * (10**18)) / (oracleData.token1Price))) * 2**96) / 1E9);
}
```