Type of vulnerability: Reentrancy and Authorization Bypass
Cause of vulnerability: The `transferTo()` function does not check for approvals and directly uses `tx.origin`, allowing malicious contracts to exploit this by calling `transferTo()` during a token transfer hook.
Execution process: An attacker creates a malicious ERC20 token with a hook in the `_transfer` function that checks `tx.origin` for specific tokens (USDV/VADER/SYNTHS) and calls `transferTo()` to steal these funds. The attacker sets up a honeypot by providing liquidity to a pool and airdrops the malicious token to high-profile accounts. When a user tries to trade the airdropped token, their unrelated tokens are stolen.
Vulnerable code: The specific function `transferTo()` in the Solidity contract that does not enforce approval checks and directly uses `tx.origin` to transfer tokens.