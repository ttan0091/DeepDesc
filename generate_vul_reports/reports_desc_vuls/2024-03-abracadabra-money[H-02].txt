Type of vulnerability: Rounding Error Amplification
Cause of vulnerability: Incorrect use of `DecimalMath.mulFloor()` which allows an attacker to manipulate the rounding direction, leading to a significant discrepancy in the intended ratio between reserves.
Execution process: An attacker initializes a pool with specific values for `quoteBalance`, `baseBalance`, and `I` such that the condition `quoteBalance < DecimalMath.mulFloor(baseBalance, _I_)` evaluates to false, allowing the attacker to set `shares` to an unintended value. This manipulation results in a distorted `QUOTE_TARGET` and `BASE_TARGET` ratio, breaking the invariant `I` and causing incorrect pricing mechanics in the pool.
Vulnerable code: 
```solidity
shares = quoteBalance < DecimalMath.mulFloor(baseBalance, _I_) ? DecimalMath.divFloor(quoteBalance, _I_) : baseBalance;
_BASE_TARGET_ = shares.toUint112();
_QUOTE_TARGET_ = DecimalMath.mulFloor(shares, _I_).toUint112();
```