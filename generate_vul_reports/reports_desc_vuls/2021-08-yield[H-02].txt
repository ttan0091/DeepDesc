Type of vulnerability: Reward Distribution Misallocation
Cause of vulnerability: Early exit in `_updateRewardsPerToken` function when `totalSupply` is zero, leading to incorrect tracking of `rewardsPerToken.lastUpdated`.
Execution process: 
1. A rewards period is active but no tokens are minted.
2. The first token minting occurs, which triggers `_updateRewardsPerToken` but it exits early due to `totalSupply` being zero.
3. `rewardsPerToken.lastUpdated` remains at the start of the rewards period.
4. The minter claims rewards, causing `_updateRewardsPerToken` to calculate rewards from the start of the period to the current time, incorrectly attributing all past rewards to the first minter.
Vulnerable code: 
```solidity
function _updateRewardsPerToken() internal {
    if (totalSupply == 0) {
        return;
    }
    // rest of the function
}
```