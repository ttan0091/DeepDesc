Type of vulnerability: Reentrancy and Arbitrary Royalty Fee Manipulation
Cause of vulnerability: Multiple calls to `_getRoyalty` function with external calls transferring assets in-between, allowing for potential manipulation of royalty fees.
Execution process: An attacker can manipulate the royalty fee between the two calls to `_getRoyalty` by changing the fee from 0% to 100% in their `receive()` function, resulting in the pool paying the full price for the NFT instead of the sender.
Vulnerable code: 
```solidity
#buy(uint256[],uint256[],MerkleMultiProof)
242: if(payRoyalties) {
243: // get the royalty fee for the NFT
244: (uint256 royaltyFee,) = _getRoyalty(tokenIds[i], salePrice); // @audit _getRoyalty called 1st time
245: 
246: // add the royalty fee to the total royalty fee amount
247: royaltyFeeAmount += royaltyFee;
248: }
...
273: // get the royalty fee for the NFT
274: (uint256 royaltyFee, address recipient) = _getRoyalty(tokenIds[i], salePrice); // @audit _getRoyalty called 2nd time
```