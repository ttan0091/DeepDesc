Type of vulnerability: Mismatch in withdrawal logic between Yearn and other protocols

Cause of vulnerability: The `withdraw()` function in Swivel.sol does not correctly handle the withdrawal logic when interacting with Yearn finance, leading to either transaction reverts or permanent locking of excess assets in the vault contract.

Execution process: 
1. A user deposits underlying assets into a Yearn finance vault, receiving shares in return.
2. After maturity, the user attempts to redeem their shares for the underlying assets.
3. The `withdraw()` function in Swivel.sol incorrectly interprets the withdrawal amount as shares instead of underlying assets.
4. Depending on the scenario, either the transaction reverts due to insufficient shares, or excess assets are withdrawn and permanently locked in the vault contract.

Vulnerable code: 
```solidity
function withdraw(uint256 a) public returns (bool) {
    // Incorrectly interprets 'a' as shares instead of underlying assets
    IYearnVault(c).withdraw(a);
    return true;
}
```