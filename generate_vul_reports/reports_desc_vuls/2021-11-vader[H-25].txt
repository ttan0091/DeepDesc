Type of vulnerability: Design Flaw
Cause of vulnerability: Incorrect formula for calculating `amountOut`
Execution process: When `amountIn` exceeds `reserveIn`, the calculated `amountOut` decreases instead of increasing, leading to unexpected and unfavorable outputs for users.
Vulnerable code: 
```solidity
function calculateSwap(uint256 amountIn, uint256 reserveIn, uint256 reserveOut) public pure returns (uint256 amountOut) {
    // x * Y * X
    uint256 numerator = amountIn * reserveIn * reserveOut;
    // (x + X) ^ 2
    uint256 denominator = pow(amountIn + reserveIn);
    amountOut = numerator / denominator;
}
```