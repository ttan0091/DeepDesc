Type of vulnerability: Integer Division Before Multiplication

Cause of vulnerability: The vulnerability arises from performing division before multiplication in an integer context, which can lead to zero rounding due to the lack of precision in integer arithmetic.

Execution process: When the `order.premium` is less than `order.principal`, the division `(order.premium / order.principal)` results in zero. Subsequently, multiplying this zero by `(a[i] - fee)` also results in zero, causing the `returned` variable to be zero. This leads to the user's funds being effectively lost as they transfer in underlying tokens, but the amount sent to `yield` is zero.

Vulnerable code: 
```solidity
returned += (a[i] - fee) * (order.premium / order.principal);
```