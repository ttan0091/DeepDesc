Type of vulnerability: Precision Loss Leading to Insufficient Balance
Cause of vulnerability: Precision loss in the conversion from tokens to shares and the withdrawal process, leading to an underestimation of the actual tokens withdrawn.
Execution process: When the `withdraw` function is called, the `_tokensToShares` function underestimates the shares to be withdrawn due to precision loss. This results in fewer tokens being withdrawn from the vault than intended. Consequently, the subsequent call to `safeTransfer` fails because the contract's balance is insufficient to transfer the specified `_amount`.
Vulnerable code: 
```solidity
function withdraw(address _recipient, uint256 _amount) external override onlyAdmin {
    vault.withdraw(_tokensToShares(_amount));
    address _token = vault.getToken();
    IDetailedERC20(_token).safeTransfer(_recipient, _amount);
}
```