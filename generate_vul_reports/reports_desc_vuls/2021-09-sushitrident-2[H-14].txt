Type of vulnerability: Underflow in unchecked arithmetic operations
Cause of vulnerability: The necessity to allow underflow in certain arithmetic operations due to the design of the fee growth mechanism in Uniswap V3.
Execution process: The scenario described involves initializing ticks and calculating fee growth values. When the nearestTick moves and new positions are created, the calculation of `rangeFeeGrowth` results in a negative `feeGrowthInside`, which is acceptable but not allowed in the current implementation due to the use of checked arithmetic operations.
Vulnerable code: The functions `rangeFeeGrowth()` and `rangeSecondsInside()` in the `ConcentratedLiquidityPool` contract, and the subtraction of `feeGrowthInside` values in `_updatePosition()` and `ConcentratedLiquidityPosition#collect()`. Additionally, the subtraction of `pool.rangeSecondsInside` and `stake.secondsInsideLast` in `claimReward()` and `getReward()` of the `ConcentratedLiquidityPoolManager` contract.