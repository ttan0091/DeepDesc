Type of vulnerability: Incompatibility with Non-Standard ERC20 Tokens

Cause of vulnerability: The contract uses `transfer` and `transferFrom` functions from ERC20 tokens without checking the return value, which is not consistent across all ERC20 tokens. Some tokens, like USDT, BNB, and OMG, do not return a boolean value from these functions.

Execution process: When the contract attempts to use `transfer` or `transferFrom` with tokens that do not return a boolean (e.g., USDT), the calls will revert, preventing the contract from functioning as intended. This can block user deposits or withdrawals, depending on the specific function being called.

Vulnerable code:
```solidity
// VotingEscrow.sol lines 425-428
require(token.transferFrom(msg.sender, address(this), _value));

// VotingEscrow.sol lines 485-488
require(token.transfer(msg.sender, _value));

// VotingEscrow.sol line 546
require(token.transfer(msg.sender, amount));

// VotingEscrow.sol line 657
require(token.transfer(msg.sender, amount));

// VotingEscrow.sol line 676
require(token.transfer(msg.sender, amount));
```