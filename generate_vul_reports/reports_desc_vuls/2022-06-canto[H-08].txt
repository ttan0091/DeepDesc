Type of vulnerability: Denial of Service (DoS) through forced token transfer
Cause of vulnerability: The contract incorrectly assumes that the balance of the underlying token will always be zero when certain functions are called, leading to a requirement that `getCashPrior() == 0`.
Execution process: An attacker transfers any non-zero amount of the underlying token directly to the CNote contract, causing `getCashPrior()` to return a non-zero value and thus causing all functions that require `getCashPrior() == 0` to revert.
Vulnerable code: CNote.sol#L43, CNote.sol#L114, CNote.sol#198, CNote.sol#310