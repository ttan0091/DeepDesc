Type of vulnerability: Accounting/Liquidation Logic Flaw
Cause of vulnerability: Failure to account for bad debt during liquidation, leading to inaccurate asset accounting.
Execution process: A liquidator uses the `liquidate()` function to liquidate a position without marking off the bad debt. This results in the `totalAssets.amount` being higher than the actual solvent assets, allowing early redeeming lenders to receive more than their fair share, while later redeemers suffer losses.
Vulnerable code: The `liquidate()` function in the Solidity contract does not include logic to mark off bad debt.