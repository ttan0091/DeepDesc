Type of vulnerability: Double Yield Collection
Cause of vulnerability: The contract allows users to collect yield twice without updating the fee growth state, leading to an incorrect distribution of fees.
Execution process: A user calls `collect()` to collect their yield when there is enough balance in `bento.balanceOf`, and then calls `burn()` to remove liquidity, which collects fees again from the pool contract.
Vulnerable code: ConcentratedLiquidityPosition.sol#L75-L101