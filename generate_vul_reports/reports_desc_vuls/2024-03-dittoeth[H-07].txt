Type of vulnerability: Logic/Design Flaw
Cause of vulnerability: The `decreaseCollateral` function does not update the `updatedAt` parameter, allowing an attacker to modify a Short Record (SR) after a redemption proposal is created, thus disputing a valid proposal.
Execution process: 
1. User creates a valid redemption proposal with SRs having CR above the initial CR.
2. Attacker decreases the CR of their own SR to below the CRs in the proposal.
3. Attacker disputes the redemption proposal, receiving a penalty fee.
4. Attacker increases the CR back up.
Vulnerable code: 
- `decreaseCollateral` function in `RedemptionFacet.sol` does not update `updatedAt`:
  ```solidity
  function decreaseCollateral(uint256 asset, uint256 shortId, uint256 amount) public {
      // Code that decreases collateral
      // Missing: shortRecord.updatedAt = block.timestamp;
  }
  ```
- `disputeRedemption` function in `ShortRecordFacet.sol`:
  ```solidity
  function disputeRedemption(uint256 asset, address redeemer, uint256 incorrectIndex, address disputeShorter, uint256 disputeShortId) public {
      // Code that allows disputing a redemption proposal
  }
  ```