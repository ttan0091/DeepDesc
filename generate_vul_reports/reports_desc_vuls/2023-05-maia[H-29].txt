Type of vulnerability: Front-running Attack
Cause of vulnerability: Uninitialized `endCycle` variable in `FlywheelAcummulatedRewards` contract
Execution process: A malicious user front-runs the `addBribeFlywheel` call by incrementing their gauge token amount, then triggers `accrueBribes` to claim rewards before the `endCycle` is initialized.
Vulnerable code: 
```solidity
abstract contract FlywheelAcummulatedRewards is BaseFlywheelRewards, IFlywheelAcummulatedRewards {
    using SafeCastLib for uint256;
    /*//////////////////////////////////////////////////////////////
    REWARDS CONTRACT STATE
    //////////////////////////////////////////////////////////////*/
    // @inheritdoc IFlywheelAcummulatedRewards
    uint256 public immutable override rewardsCycleLength;
    // @inheritdoc IFlywheelAcummulatedRewards
    uint256 public override endCycle;
    // NOTE INITIALIZED INSIDE CONSTRUCTOR
    /**
    * @notice Flywheel Instant Rewards constructor.
    * @param _flywheel flywheel core contract
    * @param _rewardsCycleLength the length of a rewards cycle in seconds
    */
    constructor(FlywheelCore _flywheel, uint256 _rewardsCycleLength) BaseFlywheelRewards(_flywheel) {
        rewardsCycleLength = _rewardsCycleLength;
    }
    ...
}
```