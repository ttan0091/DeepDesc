Type of vulnerability: Denial of Service (DoS)
Cause of vulnerability: Incorrect use of `msg.value` in the `transferTokens` function, which leads to the transfer of ether to the caller instead of the intended recipient.
Execution process: A user calls the `withdrawLiquidity` function with the borrow token as `address(0)` (ether). The function calls `SavingsAccountUtil.transferTokens`, which incorrectly uses `msg.value` from the calling function, resulting in the user receiving the transferred ether instead of the intended recipient. This causes the user's liquidity tokens to be burned without recovering their funds, rendering them unable to withdraw their liquidity.
Vulnerable code: `SavingsAccountUtil.transferTokens` function where `msg.value` is used instead of a specified amount.