[H-56] Tokens can be stolen from other users who have approved Magnetar
Submitted bydirk_y, also found byMadalad,bin2chen,kutugu,Ack, 0xStalin (1,2),0xTheC0der, cergyk (1,2),rvierdiiev, anderebus
https://github.com/Tapioca-DAO/tapioca-periph-audit/blob/023751a4e987cf7c203ab25d3abba58f7344f213/contracts/Magnetar/MagnetarV2.sol#L622-L635
https://github.com/Tapioca-DAO/tapioca-periph-audit/blob/023751a4e987cf7c203ab25d3abba58f7344f213/contracts/Magnetar/MagnetarV2Storage.sol#L336-L338
https://github.com/Tapioca-DAO/tapioca-periph-audit/blob/023751a4e987cf7c203ab25d3abba58f7344f213/contracts/Magnetar/modules/MagnetarMarketModule.sol#L70
https://github.com/Tapioca-DAO/tapioca-periph-audit/blob/023751a4e987cf7c203ab25d3abba58f7344f213/contracts/Magnetar/modules/MagnetarMarketModule.sol#L212-L241
https://github.com/Tapioca-DAO/tapioca-bar-audit/blob/2286f80f928f41c8bc189d0657d74ba83286c668/contracts/markets/MarketERC20.sol#L84-L91
TheMagnetarV2.solcontract is a helper contract that allows users to interact with other parts of the Tapioca ecosystem. In order for Magnetar to be able to perform actions on behalf of a user, the user has to approve the contract as an approved spender (or equivalent) of the relevant tokens in the part of the Tapioca ecosystem the user wants to interact with.
In order to avoid abuse, many of the actions that Magnetar can perform are protected by a check that the owner of the position/token needs to be themsg.senderof the user interacting with Magnetar. However, there are some methods that are callable through Magnetar that don’t have this check. This allows a malicious user to use approvals other users have made to Magnetar to steal their underlying tokens.
Proof of Concept
As I mentioned above, many of the Magnetar methods have a check to ensure that themsg.senderis the “from” address for the subsequent interactions with other parts of the Tapioca ecosystem. This check is performed by the_checkSendermethod:
function _checkSender(address _from) internal view {require(_from == msg.sender, "MagnetarV2: operator not approved");}
This function does what it is designed to do, however there are some methods that don’t include this protection when they should.
One example is theMARKET_BUY_COLLATERALaction that allows a user to buy collateral in a market:
else if (_action.id == MARKET_BUY_COLLATERAL) {HelperBuyCollateral memory data = abi.decode(_action.call[4:],(HelperBuyCollateral));IMarket(data.market).buyCollateral(data.from,data.borrowAmount,data.supplyAmount,data.minAmountOut,address(data.swapper),data.dexData);}
In the market contract there is an underlying call to check whether the sender has the allowance to buy collateral:
function _allowedBorrow(address from, uint share) internal {if (from != msg.sender) {if (allowanceBorrow[from][msg.sender] < share) {revert NotApproved(from, msg.sender);}allowanceBorrow[from][msg.sender] -= share;}}
Since themsg.senderfrom the perspective of the market is Magnetar, the user would need to provide a borrow allowance to Magnetar to perform this action through Magnetar.
However, you can see above in theMARKET_BUY_COLLATERALcode snippet that there is no call to_checkSender. As a result, a malicious user can now pass in an arbitrarydata.fromaddress to use the allowance provided by another user to perform an unauthorised action. In this case, the malicious user could lever up the user’s position to increase the user’s LTV and therefore push the user closer to insolvency; at which point the user can be liquidated for a profit.
Another example of this issue is with thedepositRepayAndRemoveCollateralFromMarketmethod inMagnetarMarketModule.sol. In this instance a malicious user can drain approved tokens from any other user by depositing into the Magnetar yield box:
// deposit to YieldBoxif (depositAmount > 0) {_extractTokens(extractFromSender ? msg.sender : user,assetAddress,depositAmount);IERC20(assetAddress).approve(address(yieldBox), depositAmount);yieldBox.depositAsset(assetId,address(this),address(this),depositAmount,0);}
This is a small snippet from the underlying_depositRepayAndRemoveCollateralFromMarketmethod that doesn’t include a call to_checkSenderand therefore the malicious user can simply setextractFromSenderto false and specify an arbitrary user address.
Recommended Mitigation Steps
The_checkSendermethod should be used in every method inMagnetarV2.solandMagnetarMarketModule.solif it isn’t already.
0xRektora (Tapioca) confirmed via duplicate issue 106