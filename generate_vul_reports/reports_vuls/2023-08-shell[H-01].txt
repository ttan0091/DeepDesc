[H-01] Lack of Balance Validation
Submitted byMirror, also found byprapandey031,d3e4,Udsen,ItsNio, pontifex (1,2),ktg,markus_ether,Testerbot,mert_eren,T1MOH,oakcobalt, andskodi
Description
The pool’s ratio of y to x must be within the interval[MIN_M, MAX_M), which will be checked by the_checkBalances()function.
External view functions will call the_swap(),_reserveTokenSpecified()or_lpTokenSpecified()functions to get the specified result. However,_checkBalances()is only used in the_swap()and_lpTokenSpecified()functions. There is no balance validation fordepositGivenInputAmount()andwithdrawGivenOutputAmount()functions, which use the_reserveTokenSpecified()function.
Impact
If are no other validations outside of these two functions, user deposits/withdrawls may break the invariant, i.e. the pool’s ratio of y to x is outside the interval[MIN_M, MAX_M).
Proof of Concept
Add the following code in the test/EvolvingProteusProperties.t.sol file to the EvolvingProteusProperties contract, and runforge test --mt RatioOutsideExpectedInterval:
functiontestDepositRatioOutsideExpectedInterval(uint256x0,uint256y0,uint256s0,uint256depositedAmount)public{int128MIN_M=0x00000000000002af31dc461;uint256INT_MAX_SQRT=0xb504f333f9de6484597d89b3754abe9f;vm.assume(x0>=MIN_BALANCE&&x0<=INT_MAX_SQRT);vm.assume(y0>=MIN_BALANCE&&y0<=INT_MAX_SQRT);vm.assume(s0>=MIN_BALANCE&&s0<=INT_MAX_SQRT);vm.assume(depositedAmount>=MIN_OPERATING_AMOUNT&&depositedAmount<INT_MAX_SQRT&&depositedAmount>=2*uint256(FIXED_FEE));vm.assume(y0/x0<=MAX_BALANCE_AMOUNT_RATIO);vm.assume(x0/y0<=MAX_BALANCE_AMOUNT_RATIO);vm.assume(int256(y0).divi(int256(x0) +int256(depositedAmount)) <MIN_M);// breaks the invariantSpecifiedTokendepositedToken=SpecifiedToken.X;vm.expectRevert();// There should be at least one case that call did not revert as expectedDUT.depositGivenInputAmount(x0,y0,s0,depositedAmount,depositedToken);}functiontestWithdrawRatioOutsideExpectedInterval(uint256x0,uint256y0,uint256s0,uint256withdrawnAmount)public{int128MIN_M=0x00000000000002af31dc461;uint256INT_MAX_SQRT=0xb504f333f9de6484597d89b3754abe9f;vm.assume(x0>=MIN_BALANCE&&x0<=INT_MAX_SQRT);vm.assume(y0>=MIN_BALANCE&&y0<=INT_MAX_SQRT);vm.assume(s0>=MIN_BALANCE&&s0<=INT_MAX_SQRT);vm.assume(withdrawnAmount>=MIN_OPERATING_AMOUNT&&withdrawnAmount<INT_MAX_SQRT&&withdrawnAmount>=2*uint256(FIXED_FEE));vm.assume(y0/x0<=MAX_BALANCE_AMOUNT_RATIO);vm.assume(x0/y0<=MAX_BALANCE_AMOUNT_RATIO);vm.assume(withdrawnAmount<y0);// no more than balancevm.assume((int256(y0) -int256(withdrawnAmount)).divi(int256(x0)) <MIN_M);// breaks the invariantSpecifiedTokenwithdrawnToken=SpecifiedToken.Y;vm.expectRevert();// There should be at least one case that call did not revert as expectedDUT.withdrawGivenOutputAmount(x0,y0,s0,withdrawnAmount,withdrawnToken);}
Recommended Mitigation Steps
It’s recommended to add_checkBalances(xi + specifiedAmount, yi)afterL579and add_checkBalances(xi, yi + specifiedAmount)afterL582.
Assessed type
Invalid Validation
viraj124 (Shell) commented via duplicate Issue #268:
This should be low/med at best IMO. We’re adding the balance check, but note _getUtilityis an internal method and there are input checks of the reserve balances values passed, so this is an invalid argument.
viraj124 (Shell) confirmed and commented via duplicate Issue #268:
We checked this further with some other members of the team and agreed this is high severity. We’ve fixed this in a PR.
Dravee (judge) increased severity to High