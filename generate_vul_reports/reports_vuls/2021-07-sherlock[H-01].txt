[H-01] Single under-funded protocol can break paying off debt
Submitted by cmichel, also found by walker and gpersoon
TheSherXERC20.payOffDebtAllfunction iterates over all protocols of the token.
Ifa single projectdoes not have enough funds to cover the premium payments, the transactions come to a halt, see_payOffDebt:
debt=_accruedDebt(ps,_protocol,_blocks);// this can revert txps.protocolBalance[_protocol] =ps.protocolBalance[_protocol].sub(debt);
Many core functions require paying off debt first and can therefore revert when a single protocol cannot pay the token premium:
setTokenPricesetProtocolPremiumwithdrawProtocolBalanceredeemetc.
This scenario that a protocol is unable to pay a premium does not seem unlikely especially as there can be many protocols and each protocol can pay premiums in potentially many tokens and have to continuously re-deposit to their account to increase the balance.
It is also rather involved to remove the protocolâ€™s coverage and remove the premium payments for the token. It requires governance interaction and potentially paying for the accumulated debt themselves.
Evert0x (Sherlock) acknowledged:
This was a design tradeoff. As governance we can see it coming as the balance is slowly draining. But the fact the protocols are able to withdraw the full amount at any time could surprise the governance. (and make the reverts in the functions above happening)We are thinking to add a rule in thewithdrawProtocolBalanceto only allow withdrawals with at least 2 days of remaining balance. Allowing enough time for governance calls to remove the protocol.