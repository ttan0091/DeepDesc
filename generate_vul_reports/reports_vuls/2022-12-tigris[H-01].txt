[H-01] Lock.sol: assets deposited with Lock.extendLock function are lost
Submitted byHollaDieWaldfee, also found bysha256yan,kaliberpoziomka8552,0xsomeone,cccz,0xbepresent,ali_shehab,Ruhum,rvierdiiev, andcsanuragjain
https://github.com/code-423n4/2022-12-tigris/blob/496e1974ee3838be8759e7b4096dbee1b8795593/contracts/Lock.sol#L10
https://github.com/code-423n4/2022-12-tigris/blob/496e1974ee3838be8759e7b4096dbee1b8795593/contracts/Lock.sol#L61-L76
https://github.com/code-423n4/2022-12-tigris/blob/496e1974ee3838be8759e7b4096dbee1b8795593/contracts/Lock.sol#L84-L92
https://github.com/code-423n4/2022-12-tigris/blob/496e1974ee3838be8759e7b4096dbee1b8795593/contracts/Lock.sol#L98-L105
Impact
TheLockcontract (https://github.com/code-423n4/2022-12-tigris/blob/496e1974ee3838be8759e7b4096dbee1b8795593/contracts/Lock.sol#L10) allows end-users to interact with bonds.
There are two functions that allow to lock some amount of assets. The first function isLock.lock(https://github.com/code-423n4/2022-12-tigris/blob/496e1974ee3838be8759e7b4096dbee1b8795593/contracts/Lock.sol#L61-L76) which creates a new bond. The second function isLock.extendLock(https://github.com/code-423n4/2022-12-tigris/blob/496e1974ee3838be8759e7b4096dbee1b8795593/contracts/Lock.sol#L84-L92). This function extends the lock for some_periodand / or increases the locked amount by some_amount.
The issue is that theLock.extendLockfunction does not increase the value intotalLocked[_asset]. This however is necessary becausetotalLocked[_asset]is reduced whenLock.release(https://github.com/code-423n4/2022-12-tigris/blob/496e1974ee3838be8759e7b4096dbee1b8795593/contracts/Lock.sol#L98-L105) is called.
Therefore only the amount of assets deposited viaLock.lockcan be released again. The amount of assets deposited usingLock.extendLockcan never be released again because reducingtotalLocked[_asset]will cause a revert due to underflow.
So the amount of assets deposited usingLock.extendLockis lost.
Proof of Concept
User A callsLock.lockto lock a certain_amount(amount1) of_assetfor a certain_period.User A calls thenLock.extendLockand increases the locked amount of the bond by some amount2User A waits until the bond has expiredUser A callsLock.release. This function calculatestotalLocked[asset] -= lockAmount;. Which will cause a revert because the value oftotalLocked[asset]is only amount1
You can add the following test to theBondstest inBonds.js:
describe("ReleaseUnderflow",function() {it("release can cause underflow",asyncfunction() {awaitstabletoken.connect(owner).mintFor(user.address,ethers.utils.parseEther("110"));// Lock 100 for 9 daysawaitlock.connect(user).lock(StableToken.address,ethers.utils.parseEther("100"),9);awaitbond.connect(owner).setManager(lock.address);awaitstabletoken.connect(user).approve(lock.address,ethers.utils.parseEther("10"));// Lock another 10awaitlock.connect(user).extendLock(1,ethers.utils.parseEther("10"),0);awaitnetwork.provider.send("evm_increaseTime", [864000]);// Skip 10 daysawaitnetwork.provider.send("evm_mine");// Try to release 110 after bond has expired -> Underflowawaitlock.connect(user).release(1);});});
Run it withnpx hardhat test --grep "release can cause underflow".You can see that it fails because it causes an underflow.
Tools Used
VS Code
Recommended Mitigation Steps
AddtotalLocked[_asset] += amountto theLock.extendLockfunction.
TriHaz (Tigris Trade) confirmed
Alex the Entreprenerd (judge) commented:
The warden has shown an issue with accounting that will cause principal deposits added viaextendLockto be lost, for this reason I agree with High Severity.
GainsGoblin (Tigris Trade) resolved:
Mitigation:https://github.com/code-423n4/2022-12-tigris/pull/2#issuecomment-1419172200