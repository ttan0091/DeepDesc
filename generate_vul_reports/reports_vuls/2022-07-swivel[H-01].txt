[H-01]  Mismatch inwithdraw()between Yearn and other protocols can prevent Users from redeeming zcTokens and permanently lock funds
Submitted by scaraven, also found by Franfran
As defined in the docs for Euler, ERC4626, Compound and Aave, when withdrawing and depositing funds theamountspecified corresponds excactly to how many of the underlying assets are deposited or withdrawn.
However, as specified byYearn, the yearn withdrawamountparameter specifies how manysharesare burnt instead of underlying assets retrieved. Two scenarios can occur from then on, if there are not enough shares then the transaction will revert and users will not be able to redeem the underlying assets from Yearn. If there are enough shares, then a higher number of assets will be withdrawn then expected (as assets per share will only increase). This means that once the user receives their underlying assets at a 1:1 peg the excess amounts will be permanently locked in the vault contract.
Proof of Concept
All scenarios use Yearn finance as the protocol, the other protocols are unaffected.
Scenario #1
A yearn finance vault contains 50 shares and 200 uTokens all owned by Swivel.solA user opens a zcToken position and deposits 100 uTokens into yearn receiving 100 zcTokens (and possibly a premium)100 / 200 * 50 = 25shares are minted for the vault so we now have 75 shares and 300 uTokens in the yearn vaultAfter maturity is achieved, the user tries to redeem their 100 zcTokens for uTokensThe swivel.sol contract tries to withdraw the 100 uTokens, it instead withdraws 100 shares which is less than available so the transaction reverts and the user cannot withdraw all of their 100 uTokens and instead can only withdraw 75 uTokens.
Scenario #2
A yearn finance vault contains 50 shares and 100 uTokens all owned by Swivel.solA user opens a zcToken position and deposits 100 uTokens into yearn receiving 100 zcTokens (and possibly a premium)100 / 100 * 50 = 50shares are minted for the vault so we now have 100 shares and 200 uTokens in the yearn vaultAfter maturity is achieved, the user tries to redeem their 100 zcTokens for uTokensThe contract tries to retrieve 100 uTokens but instead withdraws 100 shares which corresponds to 200 uTokensUser receives their 100 uTokens causing 100 uTokens to be left in the Swivel.sol contract which are now irretrievableIf any user tries to withdraw their funds then the transaction will fail as no shares are left in the yearn vault
Tools Used
VS Code
Recommended Mitigation Steps
In thewithdraw()function in Swivel.sol, calculating the price per share and use that to retrieve the correct number of underlying assets
e.g.
uint256pricePerShare=IYearnVault(c).pricePerShare();returnIYearnVault(c).withdraw(a/pricePerShare) >=0;
JTraversa (Swivel) commented:
Duplicate of#30.
scaraven (warden) commented:
I do not understand how this is a duplicate of #30,#30talks about a problem withredeemUnderlying()in Compound while this issue talks about a problem withwithdraw()when using yearn.
JTraversa (Swivel) commented:
They both cannot be true at once however. Either the lib expects shares, or the lib expects assets. His suggestion notes inconsistency and recommends changing the compound redeem to align with yearn, while you note the inconsistency and recommend fixing the yearn math. At the end of the day the issue is the “mismatch”.
scaraven (warden) commented:
Fair enough, that makes sense. I would still disagree with their interpretation of the issue, it is clear from the code thatarepresents the underlying assets. Ifadoes represent the number of shares then other functions such asauthRedeemzcTokenswould be plain wrong because it would be redeeming each zcToken as if it was one share not one underlying asset.
JTraversa (Swivel) commented:
Yeah I actually kind of agree with you. We intended the implementation to align more with your finding.That said itmightbe worth a judge’s input.If they think they’re different, the other finding is invalid/should be disputed and this one is correct.
bghughes (judge) commented:
Confirmed, good issue and marked#30as a duplicate.
robrobbins (Swivel) resolved:
Addressed:https://github.com/Swivel-Finance/gost/pull/437.