[H-02] Creators can steal sale revenue from owners’ sales
Submitted by IllIllI
NFTMarketCreators.sol#L158-L160NFTMarketCreators.sol#L196-L198NFTMarketCreators.sol#L97-L99
According to theREADME.md:
All sales in the Foundation market will pay the creator 10% royalties on secondary sales. This is not specific to NFTs minted on Foundation, it should work for any NFT. If royalty information was not defined when the NFT was originally deployed, it may be added using the Royalty Registry which will be respected by our market contract.
Using the Royalty Registry an owner can decide to change the royalty information right before the sale is complete, affecting who gets what.
Impact
By updating the registry to include the seller as one of the royalty recipients, the creator can steal the sale price minus fees. This is because if code finds that the seller is a royalty recipient the royalties are all passed to the creator regardless of whether the owner is the seller or not.
Proof of Concept
// 4th priority: getRoyalties overrideif(recipients.length==0&&nftContract.supportsERC165Interface(type(IGetRoyalties).interfaceId)) {tryIGetRoyalties(nftContract).getRoyalties{ gas:READ_ONLY_GAS_LIMIT}(tokenId)returns(addresspayable[]memory_recipients,uint256[]memoryrecipientBasisPoints) {if(_recipients.length>0&&_recipients.length==recipientBasisPoints.length) {boolhasRecipient;for(uint256i=0;i<_recipients.length; ++i) {if(_recipients[i] !=address(0)) {hasRecipient=true;if(_recipients[i] ==seller) {return(_recipients,recipientBasisPoints,true);
https://github.com/code-423n4/2022-02-concur/blob/72b5216bfeaa7c52983060ebfc56e72e0aa8e3b0/contracts/MasterChef.sol#L127-L154
Whentrueis returned as the final return value above, the following code leavesownerRevas zero becauseisCreatoristrue.
uint256ownerRev){boolisCreator;(creatorRecipients,creatorShares,isCreator) =_getCreatorPaymentInfo(nftContract,tokenId,seller);// Calculate the Foundation feeuint256fee;if(isCreator&& !_nftContractToTokenIdToFirstSaleCompleted[nftContract][tokenId]) {fee=PRIMARY_FOUNDATION_FEE_BASIS_POINTS;}else{fee=SECONDARY_FOUNDATION_FEE_BASIS_POINTS;}foundationFee= (price*fee) /BASIS_POINTS;if(creatorRecipients.length>0) {if(isCreator) {// When sold by the creator, all revenue is split if applicable.creatorRev=price-foundationFee;}else{// Rounding favors the owner first, then creator, and foundation last.creatorRev= (price*CREATOR_ROYALTY_BASIS_POINTS) /BASIS_POINTS;ownerRevTo=seller;ownerRev=price-foundationFee-creatorRev;}}else{// No royalty recipients found.ownerRevTo=seller;ownerRev=price-foundationFee;}}
In addition, if the index of the seller in_recipientsis greater thanMAX_ROYALTY_RECIPIENTS_INDEX, then the seller is omitted from the calculation and gets zero (_sendValueWithFallbackWithdraw()doesn’t complain when it sends zero).
uint256maxCreatorIndex=creatorRecipients.length-1;if(maxCreatorIndex>MAX_ROYALTY_RECIPIENTS_INDEX) {maxCreatorIndex=MAX_ROYALTY_RECIPIENTS_INDEX;}
https://github.com/code-423n4/2022-02-foundation/blob/4d8c8931baffae31c7506872bf1100e1598f2754/contracts/mixins/NFTMarketFees.sol#L76-L79
This issue does a lot of damage because the creator can choose whether and when to apply it on a sale-by-sale basis. Two other similar, but separate, exploits are available for the other blocks in_getCreatorPaymentInfo()that return arrays but they either require a malicious NFT implementation or can only specify a static seller for which this will affect things. In all cases, not only may the seller get zero dollars for the sale, but they’ll potentially owe a lot of taxes based on the ‘sale’ price. The attacker may or may not be the creator - creators can be bribed with kickbacks.
Recommended Mitigation Steps
Always calculate owner/seller revenue separately from royalty revenue.
NickCuso (Foundation) confirmed and commented:
This is a great discovery and a creative way for creators to abuse the system, stealing funds from a secondary sale. Thank you for reporting this.It’s a difficult one for us to address. We want to ensure that NFTs minted on our platform as a split continue to split revenue from the initial sale. We were usingisCreatorfrom_getCreatorPaymentInfoas our way of determining if all the revenue from a sale should go to the royalty recipients, which is a split contract for the use case we are concerned about here.The royalty override makes it easy for a creator to choose to abuse this feature at any time. So that was our primary focus for this fix.This is the change we have made in_getFees:boolisCreator=false;// lookup for tokenCreatortryITokenCreator(nftContract).tokenCreator{ gas:READ_ONLY_GAS_LIMIT}(tokenId)returns(addresspayable_creator) {isCreator=_creator==seller;}catch// solhint-disable-next-line no-empty-blocks{// Fall through}(creatorRecipients,creatorShares) =_getCreatorPaymentInfo(nftContract,tokenId);Since the royalty override is only considered in_getCreatorPaymentInfowe are no longer vulnerable to someone adding logic after the NFT has been released to try and rug pull the current owner(s).It is still possible for someone to try and abuse this logic, but to do so they must have built into the NFT contract itself a way to lie about who thetokenCreatoris before the time of a sale. If we were to detect this happening, we would moderate that collection from the Foundation website. Additionally we will think about a longer term solution here so that this type of attack is strictly not possible with our market contract.