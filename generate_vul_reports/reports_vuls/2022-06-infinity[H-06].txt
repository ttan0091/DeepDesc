[H-06] Some real-world NFT tokens may support both ERC721 and ERC1155 standards, which may breakInfinityExchange::_transferNFTs
Submitted by PwnedNoMore
Many real-world NFT tokens may support both ERC721 and ERC1155 standards, which may breakInfinityExchange::_transferNFTs, i.e., transferring less tokens than expected.
For example, the asset token ofThe Sandbox Game, a Top20 ERC1155 token onEtherscan, supports both ERC1155 and ERC721 interfaces. Specifically, any ERC721 token transfer is regarded as an ERC1155 token transfer with only one item transferred (token addressandimplementation).
Assuming there is a user tries to buy two tokens of Sandbox’s ASSETs with the same token id, the actual transferring is carried byInfinityExchange::_transferNFTswhich first checks ERC721 interface supports and then ERC1155.
function_transferNFTs(addressfrom,addressto,OrderTypes.OrderItemcalldataitem)internal{if(IERC165(item.collection).supportsInterface(0x80ac58cd)) {_transferERC721s(from,to,item);}elseif(IERC165(item.collection).supportsInterface(0xd9b67a26)) {_transferERC1155s(from,to,item);}}
The code will go into_transferERC721sinstead of_transferERC1155s, since the Sandbox’s ASSETs also support ERC721 interface. Then,
function_transferERC721s(addressfrom,addressto,OrderTypes.OrderItemcalldataitem)internal{uint256numTokens=item.tokens.length;for(uint256i=0;i<numTokens; ) {IERC721(item.collection).safeTransferFrom(from,to,item.tokens[i].tokenId);unchecked{++i;}}}
Since theERC721(item.collection).safeTransferFromis treated as an ERC1155 transferring with one item (reference), there is only one item actually gets traferred.
That means, the user, who barely know the implementation details of his NFTs, will pay the money for two items but just got one.
Note that the situation of combining ERC721 and ERC1155 is prevalent and poses a great vulnerability of the exchange contract.
Proof of Concept
Check the return values ofSandbox’s ASSETs’ssupportInterface, bothsupportInterface(0x80ac58cd)andsupportInterface(0xd9b67a26)return true.
Recommended Mitigation Steps
Reorder the checks,e.g.,
function_transferNFTs(addressfrom,addressto,OrderTypes.OrderItemcalldataitem)internal{if(IERC165(item.collection).supportsInterface(0xd9b67a26)) {_transferERC1155s(from,to,item);}elseif(IERC165(item.collection).supportsInterface(0x80ac58cd)) {_transferERC721s(from,to,item);}}
nneverlander (Infinity) confirmed and resolved:
Fixed inhttps://github.com/infinitydotxyz/exchange-contracts-v2/commit/377c77f0888fea9ca1e087de701b5384a046f760.
HardlyDifficult commented:
When an NFT supports both 721 & 1155 interfaces, the code prefers_transferERC721s- however this ignores the order’snumTokens. This may result in under filling NFTs for an order, at the same cost to the buyer. The warden’s recommendation would address this concern. Or maybe_transferERC721scould requirenumTokens == 1, but that approach would be limiting for this scenario. Since the buyer gets a fraction of what they paid for and it impacts a top20 1155, this seems to be a High risk issue.