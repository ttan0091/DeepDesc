[H-01] TRANSFERING KIBToken TO YOURSELF INCREASES YOUR BALANCE
Submitted bybin2chen, also found byAkshaySrivastav,hihen, and0xsomeone
Using temporary variables to update balances is a dangerous construction.
If transferred to yourself, it will cause your balance to increase, thus growing the token balance infinitely.
Proof of Concept
KIBToken overrides\_transfer()to perform the transfer of the token, the code is as follows:
function_transfer(addressfrom,addressto,uint256amount)internaloverride{if(from==address(0)) {revertErrors.ERC20_TRANSFER_FROM_THE_ZERO_ADDRESS();}if(to==address(0)) {revertErrors.ERC20_TRANSER_TO_THE_ZERO_ADDRESS();}_refreshCumulativeYield();_refreshYield();uint256startingFromBalance=this.balanceOf(from);if(startingFromBalance<amount) {revertErrors.ERC20_TRANSFER_AMOUNT_EXCEEDS_BALANCE();}uint256newFromBalance=startingFromBalance-amount;uint256newToBalance=this.balanceOf(to) +amount;uint256previousEpochCumulativeYield_=_previousEpochCumulativeYield;uint256newFromBaseBalance=WadRayMath.wadToRay(newFromBalance).rayDiv(previousEpochCumulativeYield_);uint256newToBaseBalance=WadRayMath.wadToRay(newToBalance).rayDiv(previousEpochCumulativeYield_);if(amount>0) {_totalBaseSupply-= (_baseBalances[from] -newFromBaseBalance);_totalBaseSupply+= (newToBaseBalance-_baseBalances[to]);_baseBalances[from] =newFromBaseBalance;_baseBalances[to] =newToBaseBalance;//<--------if from==to,this place Will overwrite the reduction above}emitTransfer(from,to,amount);}
From the code above we can see that using temporary variables “newToBaseBalance” to update balances.
Using temporary variables is a dangerous construction.
If the from and to are the same, the balance[to] update will overwrite the balance[from] update.
To simplify the example:
Suppose: balance[alice]=10 ,  and execute transferFrom(from=alice,to=alice,5)
Define the temporary variable:  temp_variable = balance[alice]=10
So update the steps as follows:
balance[to=alice] = temp_variable - 5 =5balance[from=alice] = temp_variable + 5 =15
After Alice transferred it to herself, the balance was increased by 5.
The test code is as follows:
add to KIBToken.transfer.t.sol
//test from == tofunction test_transfer_same() public {_KIBToken.mint(_alice, 10 ether);assertEq(_KIBToken.balanceOf(_alice), 10 ether);vm.prank(_alice);_KIBToken.transfer(_alice, 5 ether);   //<-----alice transfer to aliceassertEq(_KIBToken.balanceOf(_alice), 15 ether); //<-----increases 5 eth}
forge test --match test_transfer_same -vvvRunning 1 test for test/kuma-protocol/kib-token/KIBToken.transfer.t.sol:KIBTokenTransfer[PASS] test_transfer_same() (gas: 184320)Test result: ok. 1 passed; 0 failed; finished in 24.67ms
Recommended Mitigation Steps
A more general method is to use:
balance[to]-=amountbalance[from]+=amount
In view of the complexity of the amount calculation, if the code is to be easier to read, it is recommended：
function_transfer(addressfrom,addressto,uint256amount)internaloverride{if(from==address(0)) {revertErrors.ERC20_TRANSFER_FROM_THE_ZERO_ADDRESS();}if(to==address(0)) {revertErrors.ERC20_TRANSER_TO_THE_ZERO_ADDRESS();}_refreshCumulativeYield();_refreshYield();+if(from!=to) {uint256startingFromBalance=this.balanceOf(from);if(startingFromBalance<amount) {revertErrors.ERC20_TRANSFER_AMOUNT_EXCEEDS_BALANCE();}uint256newFromBalance=startingFromBalance-amount;uint256newToBalance=this.balanceOf(to) +amount;uint256previousEpochCumulativeYield_=_previousEpochCumulativeYield;uint256newFromBaseBalance=WadRayMath.wadToRay(newFromBalance).rayDiv(previousEpochCumulativeYield_);uint256newToBaseBalance=WadRayMath.wadToRay(newToBalance).rayDiv(previousEpochCumulativeYield_);if(amount>0) {_totalBaseSupply-= (_baseBalances[from] -newFromBaseBalance);_totalBaseSupply+= (newToBaseBalance-_baseBalances[to]);_baseBalances[from] =newFromBaseBalance;_baseBalances[to] =newToBaseBalance;}+       }emitTransfer(from,to,amount);}
Alex the Entreprenerd (judge) commented:
The Warden has shown a way to leverage a programming mistake to duplicate an account balances, because this breaks protocol invariants, I agree with High Severity.
m19 (KUMA) confirmed and commented:
We agree that this is a high risk issue and we intend to fix this.
m19 (KUMA) mitigated:
https://github.com/code-423n4/2023-02-kuma/pull/3Status:Mitigation confirmed with comments. Full details in reports from0xsomeone,0x52, andhihen.