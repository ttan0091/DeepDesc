[H-03] Malicious Users Can Drain The Assets Of Auto Compound Vault
Submitted byxiaoming90, also found bypashov,adriro,poirots,unforgiven,bin2chen,PaludoX0,0xSmartContract,ladboy233,Ruhum,cccz,koxuan,8olidity, andrvierdiiev
https://github.com/code-423n4/2022-11-redactedcartel/blob/03b71a8d395c02324cb9fdaf92401357da5b19d1/src/vaults/PirexERC4626.sol#L156
https://github.com/code-423n4/2022-11-redactedcartel/blob/03b71a8d395c02324cb9fdaf92401357da5b19d1/src/vaults/AutoPxGmx.sol#L199
https://github.com/code-423n4/2022-11-redactedcartel/blob/03b71a8d395c02324cb9fdaf92401357da5b19d1/src/vaults/AutoPxGmx.sol#L315
Proof of Concept
Note: This issue affects both the AutoPxGmx and AutoPxGlp vaults. Since the root cause is the same, the PoC of AutoPxGlp vault is omitted for brevity.
ThePirexERC4626.convertToSharesfunction relies on themulDivDownfunction in Line 164 when calculating the number of shares needed in exchange for a certain number of assets. Note that the computation is rounded down, therefore, if the result is less than 1 (e.g. 0.9), Solidity will round them down to zero. Thus, it is possible that this function will return zero.
https://github.com/code-423n4/2022-11-redactedcartel/blob/03b71a8d395c02324cb9fdaf92401357da5b19d1/src/vaults/PirexERC4626.sol#L156
File:PirexERC4626.sol156:functionconvertToShares(uint256assets)157:public158:view159:virtual160:returns(uint256)161:     {162:uint256supply=totalSupply;// Saves an extra SLOAD if totalSupply is non-zero.163:164:returnsupply==0?assets:assets.mulDivDown(supply,totalAssets());165:     }
TheAutoPxGmx.previewWithdrawfunction relies on thePirexERC4626.convertToSharesfunction in Line 206. Thus, this function will also “round down”.
https://github.com/code-423n4/2022-11-redactedcartel/blob/03b71a8d395c02324cb9fdaf92401357da5b19d1/src/vaults/AutoPxGmx.sol#L199
File:AutoPxGmx.sol199:functionpreviewWithdraw(uint256assets)200:public201:view202:override203:returns(uint256)204:     {205:// Calculate shares based on the specified assets' proportion of the pool206:uint256shares=convertToShares(assets);207:208:// Save 1 SLOAD209:uint256_totalSupply=totalSupply;210:211:// Factor in additional shares to fulfill withdrawal if user is not the last to withdraw212:return213:             (_totalSupply==0||_totalSupply-shares==0)214:                 ?shares215:                 : (shares*FEE_DENOMINATOR) /216:                     (FEE_DENOMINATOR-withdrawalPenalty);217:     }
TheAutoPxGmx.withdrawfunction relies on theAutoPxGmx.previewWithdrawfunction. In certain conditions, theAutoPxGmx.previewWithdrawfunction in Line 323 will return zero if the withdrawal amount causes the division within thePirexERC4626.convertToSharesfunction to round down to zero (usually due to a small amount of withdrawal amount).
If theAutoPxGmx.previewWithdrawfunction in Line 323 returns zero, no shares will be burned at Line 332. Subsequently, in Line 336, the contract will transfer the assets to the users. As a result, the users receive the assets without burning any of their shares, effectively allowing them to receive assets for free.
https://github.com/code-423n4/2022-11-redactedcartel/blob/03b71a8d395c02324cb9fdaf92401357da5b19d1/src/vaults/AutoPxGmx.sol#L315
File:AutoPxGmx.sol315:functionwithdraw(316:uint256assets,317:addressreceiver,318:addressowner319:     )publicoverridereturns(uint256shares) {320:// Compound rewards and ensure they are properly accounted for prior to withdrawal calculation321:compound(poolFee,1,0,true);322:323:shares=previewWithdraw(assets);// No need to check for rounding error, previewWithdraw rounds up.324:325:if(msg.sender!=owner) {326:uint256allowed=allowance[owner][msg.sender];// Saves gas for limited approvals.327:328:if(allowed!=type(uint256).max)329:allowance[owner][msg.sender] =allowed-shares;330:         }331:332:_burn(owner,shares);333:334:emitWithdraw(msg.sender,receiver,owner,assets,shares);335:336:asset.safeTransfer(receiver,assets);337:     }
Assume that the vault with the following state:
Total Asset = 1000 WETHTotal Supply = 10 shares
Assume that Alice wants to withdraw 99 WETH from the vault. Thus, she calls theAutoPxGmx.withdraw(99 WETH)function.
ThePirexERC4626.convertToSharesfunction will compute the number of shares that Alice needs to burn in exchange for 99 WETH.
assets.mulDivDown(supply,totalAssets())99WETH.mulDivDown(10shares, 1000WETH)(99*10) /1000990/1000=0.99=0
However, since Solidity rounds0.99down to0, Alice does not need to burn a single share. She will receive 99 WETH for free.
Impact
Malicious users can withdraw the assets from the vault for free, effectively allowing them to drain the assets of the vault.
Recommended Mitigation Steps
Ensure that at least 1 share is burned when the users withdraw their assets.
This can be mitigated by updating thepreviewWithdrawfunction to round up instead of round down when computing the number of shares to be burned.
function previewWithdraw(uint256 assets)publicviewoverridereturns (uint256){// Calculate shares based on the specified assets' proportion of the pool-	uint256 shares = convertToShares(assets);+	uint256 shares = supply == 0 ? assets : assets.mulDivUp(supply, totalAssets());// Save 1 SLOADuint256 _totalSupply = totalSupply;// Factor in additional shares to fulfill withdrawal if user is not the last to withdrawreturn(_totalSupply == 0 || _totalSupply - shares == 0)? shares: (shares * FEE_DENOMINATOR) /(FEE_DENOMINATOR - withdrawalPenalty);}
kphed (Redacted Cartel) confirmed