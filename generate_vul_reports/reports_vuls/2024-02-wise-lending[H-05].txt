[H-05] Wrong use ofnftIDto check if aPowerFarmposition is an Aave position
Submitted bynonseodion, also found by0xStalin
When aPowerFarmposition is created itskeyIdis used as a key in theisAavemapping to indicate if it is an Aave position or not. ThekeyIdis the index of the Power Farm NFT linked with the position.
PendlePowerManager.sol#L129-L130
isAave[keyId] =_isAave;
ThekeyIdis also linked with anothernftId. This othernftIdis used to hold thekeyIds Power Farm position in theWiseLendingcontract. They are linked together in thefarmingKeysmapping of theMinterReservercontract.
MinterReserver.sol#L88C1-L91C46
uint256keyId=_getNextReserveKey();reservedKeys[_userAddress] =keyId;farmingKeys[keyId] =_wiseLendingNFT;
The issue is the check if a position is an Aave position is done using theWiseLendingnftIdinstead of the Power Farm’skeyId. This occurs five times in the code:
It is used ingetLiveDebtRatio()to know the pool token borrowed so theborrowSharescan be retrieved.
PendlePowerFarm.sol#L64-L70
uint256borrowShares=isAave[_nftId]?_getPositionBorrowSharesAave(_nftId):_getPositionBorrowShares(_nftId);
It is used in_manuallyPaybackShares()to know the pool token to pay back.
PendlePowerFarm.sol#L127-L129
if(isAave[_nftId] ==true) {poolAddress=AAVE_WETH_ADDRESS;}
It is used incheckDebtRatio()to know the pool token borrowed so theborrowSharescan be retrieved.
PendlePowerFarmMathLogic.sol#L396-L402
❌uint256borrowShares=isAave[_nftId]?_getPositionBorrowSharesAave(_nftId):_getPositionBorrowShares(_nftId);
It is used in_coreLiquidation()to select a token to payback and to know the pool token borrowed so theborrowSharescan be retrieved.
PendlePowerFarmLeverageLogic.sol#L575-L590
❌addresspaybackToken=isAave[_nftId] ==true?AAVE_WETH_ADDRESS:WETH_ADDRESS;paybackAmount=WISE_LENDING.paybackAmount(paybackToken,_shareAmountToPay);❌uint256cutoffShares=isAave[_nftId] ==true?_getPositionBorrowSharesAave(_nftId)*FIVTY_PERCENT/PRECISION_FACTOR_E18:_getPositionBorrowShares(_nftId)*FIVTY_PERCENT/PRECISION_FACTOR_E18;
These have the following effects:
ForgetLiveDebtRatio(), users would get zero when they try to retrieve their debt ratio.For_manuallyPaybackShares()users won’t be able to pay back their shares manually from thePowerFarmcontract since it’ll fetch zero shares as borrow shares.The last two instances are used in liquidation and allow a malicious user to have a position that can’t be liquidated even though it is eligible for liquidation. The malicious user can:Create an AavePowerFarmposition.The position becomes eligible for liquidation after some price changes.Liquidators cannot liquidate the position because the call to_coreLiquidationfirst callscheckDebtRatio()which uses the wrongborrowSharesto calculate the debt ratio and returns true. Thus, causing a revert.
PendlePowerFarmLeverageLogic.sol#L571C1-L574C1
if(_checkDebtRatio(_nftId) ==true) {revertDebtRatioTooLow();}
Impact
Malicious users can open positions that can’t get liquidated.Users can’t pay back manually when it is an Aave position.getLiveDebtRatio()returns zero always when it is an Aave position.
Proof of Concept
There are 3 tests below and they can all be run inPendlePowerFarmControllerBase.t.sol.
testAaveGetLiveDebtRatio()shows thatgetLiveDebtRatio()returns zero.testAaveManuallyPayback()shows that borrowed tokens can’t be paid back usingmanuallyPaybackShares().testCannotLiquidate()shows that Aave positions cannot be liquidated.
functiontestAaveGetLiveDebtRatio()publiccheatSetup(true){_prepareAave();uint256keyID=powerFarmManagerInstance.enterFarm(true,1ether,15ether,entrySpread);uintnftId=powerFarmManagerInstance.farmingKeys(keyID);// gets borrow shares of weth instead of aethuintratio=powerFarmManagerInstance.getLiveDebtRatio(nftId);assertEq(ratio,0);}functiontestAaveManuallyPayback()publiccheatSetup(true){_prepareAave();uint256keyID=powerFarmManagerInstance.enterFarm(true,1ether,15ether,entrySpread);uintnftId=powerFarmManagerInstance.farmingKeys(keyID);uintborrowShares=wiseLendingInstance.getPositionBorrowShares(nftId,AWETH);// tries to payback weth instead of aweth and reverts with an arithmetic underflow// since the position has 0 weth borrow sharesvm.expectRevert();powerFarmManagerInstance.manuallyPaybackShares(keyID,borrowShares);}errorDebtRatioTooLow();functiontestCannotLiquidate()publiccheatSetup(true){_prepareAave();uint256keyID=powerFarmManagerInstance.enterFarm(true,1ether,15ether,entrySpread);// increase collateral factors to make position eligible for liquidationwiseLendingInstance.setPoolParameters(AWETH,99e16,type(uint256).max);// increasw Wiselending coll factorvm.store(address(powerFarmManagerInstance),bytes32(uint(2)),bytes32(uint(99e16)));//increasw PowerFarm coll factorassertEq(powerFarmManagerInstance.collateralFactor(),99e16);uintnftId=powerFarmManagerInstance.farmingKeys(keyID);uintborrowShares=wiseLendingInstance.getPositionBorrowShares(nftId,AWETH);// will revert if it can't be liquidatedwiseSecurityInstance.checksLiquidation(nftId,AWETH,borrowShares);uintnftIdLiquidator=positionNftsInstance.mintPosition();vm.expectRevert(DebtRatioTooLow.selector);powerFarmManagerInstance.liquidatePartiallyFromToken(nftId,nftIdLiquidator,borrowShares);}
Recommended Mitigation Steps
Consider checking if a position is an Aave position using thekeyIdof the position.
PendlePowerFarm.sol#L64-L70
-uint256borrowShares=isAave[_nftId]+uint256borrowShares=isAave[keyId]?_getPositionBorrowSharesAave(_nftId):_getPositionBorrowShares(_nftId);
PendlePowerFarm.sol#L127-L129
-if(isAave[_nftId] ==true) {+if(isAave[keyId] ==true) {poolAddress=AAVE_WETH_ADDRESS;}
PendlePowerFarmMathLogic.sol#L396-L402
-uint256borrowShares=isAave[_nftId]+uint256borrowShares=isAave[keyId]?_getPositionBorrowSharesAave(_nftId):_getPositionBorrowShares(_nftId);
PendlePowerFarmLeverageLogic.sol#L575-L590
-addresspaybackToken=isAave[_nftId] ==true+addresspaybackToken=isAave[keyId] ==true?AAVE_WETH_ADDRESS:WETH_ADDRESS;paybackAmount=WISE_LENDING.paybackAmount(paybackToken,_shareAmountToPay);-uint256cutoffShares=isAave[_nftId] ==true+uint256cutoffShares=isAave[keyId] ==true?_getPositionBorrowSharesAave(_nftId)*FIVTY_PERCENT/PRECISION_FACTOR_E18:_getPositionBorrowShares(_nftId)*FIVTY_PERCENT/PRECISION_FACTOR_E18;
vm06007 (Wise Lending) commented:
While this is marked as High, we would like to bring this to a Medium, as there is still a way to liquidate such nft/user should that even occur (depending if there’s AavePool present etc).@vonMangoldt can provide details on how this can be mitigated and user can still be liquidated even if they would have a chance to enter with the wrongisAaveflag.
Wise Lending commented:
Mitigatedhere.