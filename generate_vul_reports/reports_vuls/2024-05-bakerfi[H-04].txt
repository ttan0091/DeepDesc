[H-04] Multiple swap lack slippage protection
Submitted bybin2chen, also found bybin2chen,0xStalin,rvierdiiev, andt0x1c
The current protocol requires swapping tokens in multiple places, such asweth -> ierc20Aorierc20A -> weth.
Primarily, these swaps are executed using the_swap()method.
function_swap(ISwapHandler.SwapParamsmemoryparams)internaloverridereturns(uint256amountOut) {if(params.underlyingIn==address(0))revertInvalidInputToken();if(params.underlyingOut==address(0))revertInvalidOutputToken();uint24fee=params.feeTier;if(fee==0)revertInvalidFeeTier();// Exact Inputif(params.mode==ISwapHandler.SwapType.EXACT_INPUT) {amountOut=_uniRouter.exactInputSingle(IV3SwapRouter.ExactInputSingleParams({tokenIn:params.underlyingIn,tokenOut:params.underlyingOut,amountIn:params.amountIn,@>amountOutMinimum:0,//@audit miss set params.amountOutfee:fee,recipient:address(this),sqrtPriceLimitX96:0}));if(amountOut==0) {revertSwapFailed();}emitSwap(params.underlyingIn,params.underlyingOut,params.amountIn,amountOut);// Exact Output}elseif(params.mode==ISwapHandler.SwapType.EXACT_OUTPUT) {uint256amountIn=_uniRouter.exactOutputSingle(IV3SwapRouter.ExactOutputSingleParams({tokenIn:params.underlyingIn,tokenOut:params.underlyingOut,fee:fee,recipient:address(this),amountOut:params.amountOut,amountInMaximum:params.amountIn,sqrtPriceLimitX96:0}));if(amountIn<params.amountIn) {IERC20(params.underlyingIn).safeTransfer(address(this),params.amountIn-amountIn);}emitSwap(params.underlyingIn,params.underlyingOut,amountIn,params.amountOut);amountOut=params.amountOut;}}
This method does not setamountOutMinimum.
And when call same miss setAmount Out.
abstractcontractStrategyLeverageisfunction_convertFromWETH(uint256amount)internalvirtualreturns(uint256) {// 1. Swap WETH -> cbETH/wstETH/rETHreturn_swap(ISwapHandler.SwapParams(wETHA(),// Asset Inierc20A(),// Asset OutISwapHandler.SwapType.EXACT_INPUT,// Swap Modeamount,// Amount In//@audit miss slippage protection@>0,// Amount Out_swapFeeTier,// Fee Pair Tierbytes("")// User Payload));}
These methods do not have slippage protection.
https://docs.uniswap.org/contracts/v3/guides/swaps/single-swaps
amountOutMinimum: we are setting to zero, but this is a significant risk in production. For a real deployment, this value should be calculated using our SDK or an onchain price oracle - this helps protect against getting an unusually bad price for a trade due to a front running sandwich or another type of price manipulation
Include：UseSwapper._swap()/_convertFromWETH()/_convertToWETH()/_payDebt()
Impact
Front running sandwich or another type of price manipulation.
Recommended Mitigation
_swap()need setamountOutMinimum = params.amountOut
function _swap(ISwapHandler.SwapParams memory params) internal override returns (uint256 amountOut) {if (params.underlyingIn == address(0)) revert InvalidInputToken();if (params.underlyingOut == address(0)) revert InvalidOutputToken();uint24 fee = params.feeTier;if (fee == 0) revert InvalidFeeTier();// Exact Inputif (params.mode == ISwapHandler.SwapType.EXACT_INPUT) {amountOut = _uniRouter.exactInputSingle(IV3SwapRouter.ExactInputSingleParams({tokenIn: params.underlyingIn,tokenOut: params.underlyingOut,amountIn: params.amountIn,-                   amountOutMinimum: 0,+                  amountOutMinimum: params.amountOutfee: fee,recipient: address(this),sqrtPriceLimitX96: 0}));if (amountOut == 0) {revert SwapFailed();}
Call_swap()need setparams.amountOutcalculating the allowed slippage value accurately.
hvasconcelos (BakerFi) confirmed
ickas (BakerFi) commented:
Fixed →https://github.com/baker-fi/bakerfi-contracts/pull/41