[H-02] Order’s creator can updatetokenOutto arbitrary token
Submitted bysaid, also found byladboy233
When an order is created, it checks whether theorder.tokenOutis equal tomarginPos.baseAssetor_tokenOutis equal tomarginPos.quoteAsset. However, whentokenOutis updated viaupdateOrder, it can be changed to an arbitrary token. This has the potential to be exploited by changingtokenOutto a high-value token right before the executor executes thefillOrder.
Proof of Concept
It can be observed that order’s creator can updateorder.tokenOutto arbitrary token.
https://github.com/code-423n4/2024-01-init-capital-invitational/blob/main/contracts/hook/MarginTradingHook.sol#L504-L526
functionupdateOrder(uint_posId,uint_orderId,uint_triggerPrice_e36,address_tokenOut,uint_limitPrice_e36,uint_collAmt)external{_require(_collAmt!=0,Errors.ZERO_VALUE);Orderstorageorder=__orders[_orderId];_require(order.status==OrderStatus.Active,Errors.INVALID_INPUT);uintinitPosId=initPosIds[msg.sender][_posId];_require(initPosId!=0,Errors.POSITION_NOT_FOUND);MarginPosmemorymarginPos=__marginPositions[initPosId];uintcollAmt=IPosManager(POS_MANAGER).getCollAmt(initPosId,marginPos.collPool);_require(_collAmt<=collAmt,Errors.INPUT_TOO_HIGH);order.triggerPrice_e36=_triggerPrice_e36;order.limitPrice_e36=_limitPrice_e36;order.collAmt=_collAmt;order.tokenOut=_tokenOut;emitUpdateOrder(initPosId,_orderId,_tokenOut,_triggerPrice_e36,_limitPrice_e36,_collAmt);}
This can be exploited by the order’s creator. When the executor is about to execute thefillOrder, the order creator can front-run the operation by changing theorder.tokenOutto a token with a high value. Consequently, the executor will transfer the amount that needs to be transferred but using this new high-value token. But this require hook already have approval from the executor to manage the new high value token.
Recommended Mitigation Steps
Validate the new token whenupdateOrderis called :
function updateOrder(uint _posId,uint _orderId,uint _triggerPrice_e36,address _tokenOut,uint _limitPrice_e36,uint _collAmt) external {_require(_collAmt != 0, Errors.ZERO_VALUE);Order storage order = __orders[_orderId];_require(order.status == OrderStatus.Active, Errors.INVALID_INPUT);uint initPosId = initPosIds[msg.sender][_posId];_require(initPosId != 0, Errors.POSITION_NOT_FOUND);MarginPos memory marginPos = __marginPositions[initPosId];uint collAmt = IPosManager(POS_MANAGER).getCollAmt(initPosId, marginPos.collPool);_require(_collAmt <= collAmt, Errors.INPUT_TOO_HIGH);+       _require(_tokenOut == marginPos.baseAsset || _tokenOut == marginPos.quoteAsset, Errors.INVALID_INPUT);order.triggerPrice_e36 = _triggerPrice_e36;order.limitPrice_e36 = _limitPrice_e36;order.collAmt = _collAmt;order.tokenOut = _tokenOut;emit UpdateOrder(initPosId, _orderId, _tokenOut, _triggerPrice_e36, _limitPrice_e36, _collAmt);}
fez-init (INIT) confirmed
Ladboy233 (Warden) commented:
I think the severity should be high because it is very common the executor tries to fill a lot of order that have different token.It is common that executor approves the hook to spend multiple tokens.Order creator frontrun to update order to different token clearly violate order executor’s expectation if order creator update a low value token with high value token before the order is filled.
hansfriese (Judge) increased severity to High and commented:
I left a commenthere.