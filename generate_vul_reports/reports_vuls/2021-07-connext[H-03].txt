[H-03] Router liquidity on receiving chain can be double-dipped by the user
Submitted by 0xRajeev, also found by cmichel, gpersoon, pauliax, s1m0 and shw
Duringfulfill()on the receiving chain, if the user has set up an external contract attxData.callTo, the catch blocks for bothIFulfillHelper.addFunds()andIFulfillHelper.excute()performtransferAssetto the predetermined fallback addresstxData.receivingAddress.
IfaddFunds()has reverted earlier,toSendamount would already have been transferred to thereceivingAddress. Ifexecute()also fails, it is again transferred.
Scenario:User sets up receiver chaintxData.callTocontract such that bothaddFunds()andexecute()calls revert. That will let him get twice thetoSendamount credited to thereceivingAddress. So effectively, Alice locks 100tokenAson chain A, and can get 200tokenAs(or twice the amount of any token she is supposed to get on chain B from the router), minus relayer fee, on chain B. Router liquidity is double-dipped by Alice and router loses funds. SeeTransactionManager.solL395-L409andL413-L428.
Recommend that the second catch block forexecute()should likely not have thetransferAsset()call. It seems like a copy-and-paste bug unless there is some reason that is outside the specified scope and documentation for this contest.
LayneHaber (Connext) confirmed and patched:
https://github.com/connext/nxtp/pull/39