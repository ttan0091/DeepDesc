[H-20] A user can bypass bandwidth limit by repeatedly “balancing” the pool
Submitted byxuwinnie, also found byxuwinnie
The goal with bandwidths is to have a maximum that can be withdrawn (swapped) from a pool. In case a specific chain (or token from a chain) is exploited, then it only can partially affect these pools. However, the maximum limit can be bypassed by repeatedly “balancing” the pool to increase bandwidth for the exploited chain.
Introducing “Balancing”: A Technique for Redistributing Bandwidth
DuringulyssesAddLPorulyssesAddLP, liquidity is first distributed or taken proportionally todiff(if any exists) and then distributed or taken proportionally toweight. Suppose integertis far smaller thandiff(since the action itself can also changediff), after repeatedly addingt LP, removingt LP, addingt LP, removingt LP, etc., the pool will finally reach another stable state where the ratio ofdifftoweightis a constant among destinations. This implies that thecurrentBandwidthwill be proportional toweight.
Proof of Concept
Suppose Avalanche is down. Unluckily, Alice holds 100 ava-hETH. They want to swap ava-hETH for bnb-hETH.
Let’s take a look at bnb-hETH pool. Suppose weights are mainnet:4, Avalanche:3 and Linea:2. Total supply is 90. Target bandwidths are mainnet:40, Avalanche:30 and Linea:20. Current bandwidths are mainnet:30, Avalanche:2 (few left) and Linea:22.
Ideally Alice should only be able to swap for 2 bnb-hETH. However, they swap for 0.1 bnb-hETH first. Then they use the 0.1 bnb-hETH to “balance” the pool (as mentioned above). Current bandwidths will become mainnet:24, Avalanche:18 and Linea:12. Then, Alice swaps for 14 bnb-hETH and “balance” the pool again. By repeating the process, they can acquire nearly all of the available liquidity in pool andLPloss will be unbounded.
Recommended Mitigation Steps
DuringulyssesAddLPorulyssesAddLP, always distribute or take liquidity proportionally to weight.When swapping A for B, reduce the bandwidth of A in the B pool (as is currently done) while adding bandwidth of B in the A pool (instead of distributing them among all bandwidths).
Assessed type
Context
0xLightt (Maia) confirmed
0xLightt (Maia) commented:
We recognize the audit’s findings on Ulysses AMM. These will not be rectified due to the upcoming migration of this section to Balancer Stable Pools.