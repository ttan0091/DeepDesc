[H-06] Attacker can useMagnetarAction.OFTaction of the Magnet to perform operations as any user including directly stealing user tokens
Submitted byronnyx2017, also found byimmeas, carrotsmuggler (1,2), GalloDaSballo (1,2,3),rvierdiiev,deadrxsezzz,cccz, andladboy233
https://github.com/Tapioca-DAO/tapioca-periph/blob/032396f701be935b04a7e5cf3cb40a0136259dbc/contracts/Magnetar/Magnetar.sol#L153-L156
https://github.com/Tapioca-DAO/tapioca-periph/blob/032396f701be935b04a7e5cf3cb40a0136259dbc/contracts/Magnetar/Magnetar.sol#L325-L333
https://github.com/Tapioca-DAO/tapioca-periph/blob/032396f701be935b04a7e5cf3cb40a0136259dbc/contracts/Magnetar/MagnetarStorage.sol#L93-L97
This issue requires the combination of two vulnerabilities to achieve the impact described in the title. The first vulnerability is that theMagnetar._processOFTOperationfunction doesn’t check the function sigs in the action calldata with the the target addresses. It only ensures the calling target addresses are in the Whitelist of the Cluster. So an attacker can use this vuln to call any whitelist target address from the Magnetar.
The second vulnerability is that the Magnetar contract address itself will also be added to the Cluster whitelist. It can be found in the following integration testhere. If the attacker can let the Magnetar call itself, themsg.senderin the sub-call will be in the whitelist. It will bypass the_checkSendercheck:
function_checkSender(address_from)internalview{if(_from!=msg.sender&& !cluster.isWhitelisted(0,msg.sender)) {revertMagnetar_NotAuthorized(msg.sender,_from);}}
Impact
Combining the two issues mentioned above, we can carry out the following exploitation.
CallMagnetar.burstfunction with_action.id == MagnetarAction.OFT, which will call_processOFTOperationfunction. The_targetis the Magnetar contract itself, and the_actionCalldatais still an encoded calldata to call theMagnetar.burstfunction with_action.id == MagnetarAction.OFTagain.In the second call, themsg.senderwill be the Magnetar itself, so the from address check in the_checkSenderfunction will be skipped directly because themsg.senderis in the whitelist.Now the attacker can pretend to be anyone and call any contract through the Magnetar. Please note that users approved their tokens to Magnetar if they used it.
Proof of Concept
TakingMagnetarAssetModuleas an example, it demonstrates how an attacker could steal users’ collateral in the market.
Firstly the_checkSender(data.user);can be bypassed directly.
And makedata.withdrawCollateralParams.withdraw = true, so thecollateralWithdrawReceiverwill be the Magnetar contract itself:
address collateralWithdrawReceiver = data.withdrawCollateralParams.withdraw ? address(this) : data.user;
Then ifcollateralShare > 0, the function will call_withdrawToChain(data.withdrawCollateralParams);to withdraw the collateral to the another chain by sending LZ message.
There is no check forwithdrawCollateralParamsin the_withdrawToChainfunction. The attacker can set the receiver address to his address and finally receive the tokens on the target chain.
Recommendation
Check the target function sig in the_processOFTOperationfunction.
cryptotechmaker (Tapioca) confirmed, but disagreed with severity and commented via duplicate Issue #170:
Medium, the same happens if you approve the attacker for an ERC20. However, this is worth fixing in my opinion. I think we can add specific selectors instead of allowing any call to be executed.Fixedhere.