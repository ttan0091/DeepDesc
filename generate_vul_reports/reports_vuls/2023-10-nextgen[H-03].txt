[H-03] Adversary can blockclaimAuction()due to push-strategy to transfer assets to multiple bidders
Submitted byThe_Kakers, also found by btk (1,2),TuringConsulting,immeas,yojeff,DeFiHackLabs,audityourcontracts,Toshii,DarkTower,CSL,codynhat,lsaudit,trachev,Vagner,Greed,0xDetermination,gumgumzum,lanrebayode77,0xJuda,ke1caM,Al-Qa-qa,Valix,NentoR,glcanvas,CaeraDenoir,MaNcHaSsS,NoamYakov,0xAsen,mrudenko,innertia,SovaSlava,Talfao,r0ck3tz,0xlemon,00xSEV,0xhunter,VAD37,Arabadzhiev,PENGUN,niki,nmirchev8,flacko,Soul22,ZdravkoHr,0xpiken,funkornaut,Ruhum,0xWaitress,Viktor_Cortess,openwide,oualidpro,rvierdiiev, andHaipls
claimAuction()implements a push-strategy instead of a pull-strategy for returning the bidders funds.
This gives the opportunity for an adversary to DOS the function, locking all funds from other participants.
This finding differs from the automated findings reportM-01, andL-18, as it has a different root cause, can’t be prevented with any of the mitigations from the bot, and also highlights the actual High impact of the issue.
Impact
Prevents other bidders from receiving their bids back.Prevents the token owner from receiving earnings.Prevents the bidder winner from receiving the NFT.
All Ether from the auction can be lost as there is no alternate way of recovering it.
This also breaks one of themain invariants of the protocol:
Properties that should NEVER be broken under any circumstance:The highest bidder will receive the token after an auction finishes,the owner of the token will receive the fundsandall other participants will get refunded.
Proof of Concept
An adversary can create bids for as little as 1 wei, as there is no minimum limitation:AuctionDemo.sol#L58. With that, it can participate in as many auctions as they want to grief all auctions.
All non-winning bidders that didn’t cancel their bid before the auction ended will receive their bids back duringclaimAuction():
functionclaimAuction(uint256_tokenid)publicWinnerOrAdminRequired(_tokenid,this.claimAuction.selector){/// ...->for(uint256i=0;i<auctionInfoData[_tokenid].length;i++) {if(auctionInfoData[_tokenid][i].bidder==highestBidder&&auctionInfoData[_tokenid][i].bid==highestBid&&auctionInfoData[_tokenid][i].status==true) {IERC721(gencore).safeTransferFrom(ownerOfToken,highestBidder,_tokenid);(boolsuccess, ) =payable(owner()).call{value:highestBid}("");emitClaimAuction(owner(),_tokenid,success,highestBid);}elseif(auctionInfoData[_tokenid][i].status==true) {->              (boolsuccess, ) =payable(auctionInfoData[_tokenid][i].bidder).call{value:auctionInfoData[_tokenid][i].bid}("");emitRefund(auctionInfoData[_tokenid][i].bidder,_tokenid,success,highestBid);}else{}}}
AuctionDemo.sol#L116
The contracts call the bidders with somevalue. If the receiver is a contract, it can execute arbitrary code. A malicious bidder can exploit this to make theclaimAuction()always revert, and so no funds to other participants be paid back.
With the current implementation, a gas bomb can be implemented to perform the attack.L-18from the automated findings report suggests the use ofexcessivelySafeCall()to prevent it, but it limits the functionality of legit contract receivers, and eventually preventing them from receiving the funds. In addition, the finding doesn’t showcase the High severity of the issue and may be neglected.
M-01from the automated findings report points out the lack of a check of thesuccessof the calls. If the function reverts when the call was not successful, the adversary can make a callback on its contractreceive()function to always revert to perform this same attack. In addition, this finding also doesn’t showcase the High severity of the issue.
Ultimately the way to prevent this attack is to separate the transfer of each individual bidder to a separate function.
Recommended Mitigation Steps
Create a separate function for each bidder to claim their funds back (such as the cancel bids functions are implemented).
Assessed type
ETH-Transfer
a2rocket (NextGen) acknowledged and commented via duplicate issue #1703:
There are several ways to do this; we will introduce an additionalclaimingFunction.
0xsomeone (judge) commented:
The Warden specifies a way in which an auction can be sabotaged entirely in its claim operation by gas griefing.While the finding has been identified asL-18in the automated findings report, it may indeed be neglected and inadequately encompasses the severity of this flaw.As the Warden clearly illustrates, all funds in the auction will be permanently lost and in an easily accessible fashion by simply either consuming all gas in meaningless operations or gas-bombing via an arbitrarily large payload being returned.This particular submission was selected as best-for-report due to its acknowledgment of automated findings issues, precisely & correctly specifying the impact of the exhibit, and providing a PoC that demonstrates the problem.The C4 Supreme Court verdictdid not finalize on issues based entirely on automated findingsand as such, I will deem this exhibit a valid high submission given its accessibility and 2-tier upgrade from the automated findings report (LtoH).