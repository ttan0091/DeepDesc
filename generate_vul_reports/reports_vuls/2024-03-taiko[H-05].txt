[H-05] Signatures can be replayed inwithdraw()to withdraw more tokens than the user originally intended.
Submitted bylightoasis, also found by0xleadwizard,wangxx2026,alexfilippov314,ladboy233, andTendency
Signatures can be replayed inwithdraw()to withdraw more tokens than the user originally intended.
Vulnerability Details
In the TimelockTokenPool.sol contracts, users can provide a signature to allow someone else to withdraw all their withdrawable tokens on their behalf using their signature.TimelockTokenPool.sol#L170)
function withdraw(address _to, bytes memory _sig) external {if (_to == address(0)) revert INVALID_PARAM();bytes32 hash = keccak256(abi.encodePacked("Withdraw unlocked Taiko token to: ", _to));@>     address recipient = ECDSA.recover(hash, _sig);_withdraw(recipient, _to);}
As seen from above, the signature provided does not include a nonce and this can lead to signature replay attacks. Due to the lack of a nonce,  withdraw() can be called multiple times with the same signature. Therefore, if a user provides a signature to withdraw all his withdrawable tokens at one particular time, an attacker can repeatedly call withdraw() with the same signature to withdraw more tokens than the user originally intended.
The vulnerability is similar toArbitrum H-01where  userâ€™s signatures could be replayed to use up more votes than a user intended due to a lack of nonce.
Recommended Mitigation Steps
Consider using a nonce or other signature replay protection in the TimelockTokenPool contract.
dantaik (Taiko) confirmed and commented:
Valid bug report, trying to fix it in this PR:https://github.com/taikoxyz/taiko-mono/pull/16611/files