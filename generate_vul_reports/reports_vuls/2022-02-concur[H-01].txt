[H-01] Wrong reward token calculation in MasterChef contract
Submitted by throttle, also found by cccz, cmichel, and leastwood
MasterChef.sol#L86
When adding new token pool for staking in MasterChef contract
functionadd(address_token,uint_allocationPoints,uint16_depositFee,uint_startBlock)
All other, already added, pools should be updated but currently they are not.Instead, only totalPoints is updated. Therefore, old (and not updated) pools will lose it’s share during the next update.Therefore, user rewards are not computed correctly (will be always smaller).
Proof of Concept
Scenario 1:
Owner adds new pool (first pool) for staking with points = 100 (totalPoints=100)and 1 block later Alice stakes 10 tokens in the first pool.1 week passesAlice withdraws her 10 tokens and claims X amount of reward tokens.and 1 block later Bob stakes 10 tokens in the first pool.1 week passesOwner adds new pool (second pool) for staking with points = 100 (totalPoints=200)and 1 block later Bob withdraws his 10 tokens and claims X/2 amount of reward tokens.But he should get X amount
Scenario 2:
Owner adds new pool (first pool) for staking with points = 100 (totalPoints=100).1 block later Alice, Bob and Charlie stake 10 tokens there (at the same time).1 week passesOwner adds new pool (second pool) for staking with points = 400 (totalPoints=500)Right after that, when Alice, Bob or Charlie wants to withdraw tokens and claim rewards they will only be able to claim 20% of what they should be eligible for, because their pool is updated with 20% (100/500) rewards instead of 100% (100/100) rewards for the past week.
Recommended Mitigation Steps
Update all existing pools before adding new pool. Use the massUdpate() function which is already present … but unused.
ryuheimat (Concur) confirmed
Alex the Entreprenerd (judge) commented:
The warden has identified a fallacy in howadds logic work.Ultimately rewards in this contract have to be linearly vested over time, adding a new pool would change the rate at which vesting in all pools will go.For that reason, it is necessary to accrue the rewards that each pool generated up to that point, before changing the slope at which rewards will be distributed.In this case add should massUpdateFirst.Because this vulnerability ultimately breaks the accounting of the protocol, I believe High Severity to be appropriate.