[H-07]_writeCheckpointdoes not write to storage on same block
Submitted by async, also found by 0xA5DF, 0xpiglet, 0xsanson, ak1, DimitarDimitrov, Dravee, ElKu, IllIllI, JohnSmith, kenzo, and scaraven
VoteEscrowDelegation.sol#L101-L108
InVoteEscrowDelegation._writeCheckpoint, when the checkpoint is overwritten in the same block the new value is set withmemory oldCheckpointand thus is never written to storage.
CheckpointmemoryoldCheckpoint=checkpoints[toTokenId][nCheckpoints-1];if(nCheckpoints>0&&oldCheckpoint.fromBlock==block.number) {oldCheckpoint.delegatedTokenIds=_delegatedTokenIds;}
Users that remove and delegate a token (or calldelegateon the same token twice) in the same block will only have their first delegation persisted.
Proof of Concept
User delegates atokenIdby callingdelegate.In the same block, the user decides to delgate the same token to a different token ID and callsdelegateagain which calls_writeCheckpoint.  Since this is the second transaction in the same block the if statement in the code block above executes and stores_delegatedTokenIdsinmemory oldCheckpoint, thus not persisting the array of_delegatedTokenIdsin the checkpoint.
Recommended Mitigation Steps
Define theoldCheckpointvariable as astoragepointer:
Checkpoint storage oldCheckpoint = checkpoints[toTokenId][nCheckpoints - 1];
0xA5DF (warden) commented:
Just want to add to the impact (in case the judges consider to decrease severity), in my report of this bug (#625) Iâ€™ve mentioned a more severe impact:An attacker can use this to multiplying his delegation power endlessly, by adding a delegation and removing it in the same block (using a contract to run those 2 functions in the same tx). The delegation will succeed but the removal will fail, this way each time this runs the user delegates again the same token.
zeroexdead (Golom) confirmed
zeroexdead (Golom) commented:
Fixed.
Ref:https://github.com/golom-protocol/contracts/commit/74b2e718f6ae9da815b52242a44451527d60d1ae
0xsaruman (Golom) resolved