[H-04]ReraiseETHCrowdfund.sol: Multiple scenarios how pending votes might not be claimable which is a complete loss of funds for a user
Submitted byHollaDieWaldfee, also found byevanandhansfriese
https://github.com/code-423n4/2023-04-party/blob/440aafacb0f15d037594cebc85fd471729bcb6d9/contracts/crowdfund/ReraiseETHCrowdfund.sol#L256-L303
https://github.com/code-423n4/2023-04-party/blob/440aafacb0f15d037594cebc85fd471729bcb6d9/contracts/crowdfund/ReraiseETHCrowdfund.sol#L333-L382
This issue is about how theReraiseETHCrowdfundclaim functionality can be broken.
When the claim functionality is broken this means that a user cannot claim his voting power, resulting in a complete loss of funds.
The claim functionality is not broken in any case, i.e. with any configuration of theReraiseETHCrowdfundcontract.
However the contract can be configured in a way - and by configured I mean specifically theminContribution,maxContribution,minTotalContributionsandmaxTotalContributionsvariables - that the claim functionality breaks.
And the configurations under which it breaks are NOT edge cases. They represent theintended useof the contract as discussed with the sponsor.
The fact that when the contract is used as intended it can lead to a complete loss of funds for the users makes me estimate this to be “High” severity.
Proof of Concept
We first need to understand theclaim(uint256 tokenId, address contributor)andclaimMultiple(uint96[] memory votingPowerByCard, address contributor)functions. They essentially make up the claim functionality as all other functions regarding claiming are just wrappers around them.
Let’s first look at theclaim(uint256 tokenId, address contributor)function. The first part of the function is what we are interested in:
Link
functionclaim(uint256tokenId,addresscontributor)public{// Check crowdfund lifecycle.{CrowdfundLifecyclelc=getCrowdfundLifecycle();if(lc!=CrowdfundLifecycle.Finalized) {revertWrongLifecycleError(lc);}}uint96votingPower=pendingVotingPower[contributor];if(votingPower==0)return;{uint96contribution= (votingPower*1e4) /exchangeRateBps;uint96maxContribution_=maxContribution;// Check that the contribution equivalent of total pending voting// power is not above the max contribution range. This can happen// for contributors who contributed multiple times In this case, the// `claimMultiple` function should be called instead. This is done// so parties may use the minimum and maximum contribution values to// limit the voting power of each card (e.g.  a party desiring a "1// card = 1 vote"-like governance system where each card has equal// voting power).if(contribution>maxContribution_) {revertAboveMaximumContributionsError(contribution,maxContribution_);}}
What is important is thatcontributionis calculatesd as:
uint96contribution= (votingPower*1e4) /exchangeRateBps;
And thencontributionis checked that it is<= maxContribution:
if(contribution>maxContribution_) {revertAboveMaximumContributionsError(contribution,maxContribution_);}
The explanation for why this check is necessary can be seen in the comment:
// This is done// so parties may use the minimum and maximum contribution values to// limit the voting power of each card (e.g.  a party desiring a "1// card = 1 vote"-like governance system where each card has equal// voting power).
TheclaimMultiple(uint96[] memory votingPowerByCard, address contributor)function allows to divide the pending voting power across multiple party cards and it employs the following checks:
Link
uint96minContribution_=minContribution;uint96maxContribution_=maxContribution;for(uint256i;i<votingPowerByCard.length; ++i) {if(votingPowerByCard[i] ==0)continue;// Check that the contribution equivalent of voting power is within// contribution range. This is done so parties may use the minimum// and maximum contribution values to limit the voting power of each// card (e.g. a party desiring a "1 card = 1 vote"-like governance// system where each card has equal voting power).uint96contribution= (votingPowerByCard[i] *1e4) /exchangeRateBps;if(contribution<minContribution_) {revertBelowMinimumContributionsError(contribution,minContribution_);}if(contribution>maxContribution_) {revertAboveMaximumContributionsError(contribution,maxContribution_);}votingPower-=votingPowerByCard[i];// Mint contributor a new party card.uint256tokenId=party.mint(contributor,votingPowerByCard[i],delegate);emitClaimed(contributor,tokenId,votingPowerByCard[i]);}// Requires that all voting power is claimed because the contributor is// expected to have burned their crowdfund NFT.if(votingPower!=0)revertRemainingVotingPowerAfterClaimError(votingPower);}
We can see that for each party card thecontributionneeds to be>= minContributionand<= maxContribution. Also the function must deal with all the voting power, so after the function call all pending voting power must be processed:
if(votingPower!=0)revertRemainingVotingPowerAfterClaimError(votingPower);
Now we are in a position to look at a simple scenario how a user can end up without being able to claim his pending voting power (Note that this can also be a griefing attack whereby an attacker contributes for the victim some possibly small amount thereby making it impossible for the victim to claim):
(The test should be added to theReraiseETHCrowdfund.t.soltest file)
functiontest_cannotClaim1()public{ReraiseETHCrowdfundcrowdfund=_createCrowdfund({initialContribution:0,initialContributor:payable(address(0)),initialDelegate:address(0),minContributions:0.9ether,maxContributions:1ether,disableContributingForExistingCard:false,minTotalContributions:1ether,maxTotalContributions:1.5ether,duration:7days,fundingSplitBps:0,fundingSplitRecipient:payable(address(0))});addressmember=_randomAddress();vm.deal(member,2ether);// Contributevm.startPrank(member);crowdfund.contribute{ value:1ether}(member,"");crowdfund.contribute{ value:1ether}(member,"");vm.stopPrank();assertEq(crowdfund.pendingVotingPower(member),1.5ether);vm.expectRevert(abi.encodeWithSelector(ETHCrowdfundBase.AboveMaximumContributionsError.selector,1500000000000000000,1000000000000000000));crowdfund.claim(member);}
In this test the following values were chosen for the important variables that I mentioned above:
minContribution = 0.9e18maxContribution = 1e18minTotalContributions = 1e18maxTotalContributions = 1.5e18
What happens in the test is that first1 ETHis contributed then another0.5 ETHis contributed (It says1 ETHbutmaxTotalContributionsis hit and so only0.5 ETHis contributed and the crowdfund is finalized).
The call to theclaimfunction fails becausecontribution = 1.5 ETHwhich is abovemaxContribution.
The important thing is now to understand thatclaimMultiplecan also not be called (therefore the pending voting power cannot be claimed at all).
When we callclaimMultiplethe contribution for the first party card must be in the range[0.9e18, 1e18]to succeed and therefore the second contribution can only be in the range of[0.5e18,0.6e18]which is belowminContributionand therefore it is not possible to distribute the voting power across cards such that the call succeeds.
What we discussed so far could be mitigated by introducing some simple checks when setting up the crowdfund. The sort of checks required are like ”minTotalContributionsmust be divisible byminContribution”. I won’t go into this deeply however because these checks are insufficient when we introduce a funding fee.
Let’s consider a case with:
minContribution = 1e18maxContribution = 1e18minTotalContributions = 2e18maxTotalContributions = 2e18
(Note that setting up the crowdfund withminContribution==maxContributionis an important use case where the party wants to enforce a “1 card = 1 vote”-policy).
There should be no way how this scenario causes a problem right? The contribution of a user can only be1e18or2e18and in both cases the checks in the claim functions should pass. - No
It breaks when we introduce a fee. Say there is a 1% fee (fundingSplitBps=100).
The contribution is calculated as (as we know from above):
(Also note thatexchangeRateBps=1e4for all tests, i.e. the exchange rate between ETH and votes is 1:1)
uint96contribution= (votingPower*1e4) /exchangeRateBps;
The problem is thatvotingPowerhas been reduced by 1% due to the funding fee. So when a user initially contributes1e18, thecontributionhere is calculated to be0.99e18 * 1e4 / 1e4 = 0.99e18which is belowminContributionand claiming is not possible.
Let’s make a final observation: The parameters can also be such that due to rounding a similar thing happens:
minContribution = 1e18 + 1 WeimaxContribution = 1e18 + 1 WeiminTotalContributions = 2e18 + 2 WeimaxTotalContributions = 2e18 + 2 Wei
Due to rounding (when calculating the funding fee or when there is not a 1:1 exchange rate) the 1 Wei in the contribution can be lost (or some other small amount) and thereby when callingclaim, thecontributionwhich has been rounded down is belowminContributionand the claim fails.
To summarize we have seen 3 scenarios. It is not possible for me to provide an overview of all the things that can go wrong. There are just too many variables. I come back to this point in my recommendation.
Tools Used
VSCode, Foundry
Recommended Mitigation Steps
A part of the fix is straightforward. However this is not a full fix.
I recommend to implement a functionality for claiming that cannot be blocked. I know that this may cause the “1 card = 1 vote”-policy to be violated and it may also causeminContributionormaxContributionto be violated. But maybe this is the price to pay to ensure that users can always claim.
An alternative solution may be to reduce the range of possible configurations of the crowdfund drastically such that it can be mathematically proven that users are always able to claim.
That being said there is an obvious flaw in the current code that has been confirmed by the sponsor.
Thecontributionamount that is calculated when claiming needs to add back the funding fee amount. I.e. if there was a 1% funding fee, thecontributionamount should be1e18instead of0.99e18.
Partial fix:
diff --git a/contracts/crowdfund/ReraiseETHCrowdfund.sol b/contracts/crowdfund/ReraiseETHCrowdfund.solindex 580623d..0b1ba9e 100644--- a/contracts/crowdfund/ReraiseETHCrowdfund.sol+++ b/contracts/crowdfund/ReraiseETHCrowdfund.sol@@ -268,6 +268,13 @@ contract ReraiseETHCrowdfund is ETHCrowdfundBase, CrowdfundNFT {{uint96 contribution = (votingPower * 1e4) / exchangeRateBps;++            address payable fundingSplitRecipient_ = fundingSplitRecipient;+            uint16 fundingSplitBps_ = fundingSplitBps;+            if (fundingSplitRecipient_ != address(0) && fundingSplitBps_ > 0) {+                contribution = (contribution * 1e4) / (1e4 - fundingSplitBps_);+            }+uint96 maxContribution_ = maxContribution;// Check that the contribution equivalent of total pending voting// power is not above the max contribution range. This can happen@@ -360,6 +367,13 @@ contract ReraiseETHCrowdfund is ETHCrowdfundBase, CrowdfundNFT {// card (e.g. a party desiring a "1 card = 1 vote"-like governance// system where each card has equal voting power).uint96 contribution = (votingPowerByCard[i] * 1e4) / exchangeRateBps;++            address payable fundingSplitRecipient_ = fundingSplitRecipient;+            uint16 fundingSplitBps_ = fundingSplitBps;+            if (fundingSplitRecipient_ != address(0) && fundingSplitBps_ > 0) {+                contribution = (contribution * 1e4) / (1e4 - fundingSplitBps_);+            }+if (contribution < minContribution_) {revert BelowMinimumContributionsError(contribution, minContribution_);}
0xble (Party) commented:
Additional to the partial fix recommended in the mitigation, this will be mitigated bypreventing the case whereminContributionmay be bypassed for the last contributor when the remaining contribution is less than the minimum.