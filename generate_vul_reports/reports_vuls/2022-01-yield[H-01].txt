[H-01] Malicious Users Can Duplicate Protocol Earned Yield By TransferringwCVXTokens To Another Account
Submitted by leastwood, also found by kenzo
ConvexYieldWrapper.solis a wrapper contract for staking convex tokens on the user’s behalf, allowing them to earn rewards on their deposit. Users will interact with theLadle.solcontract’sbatch()function which:
Approves Ladle to move the tokens.Transfers the tokens toConvexYieldWrapper.sol.Wraps/stakes these tokens.Updates accounting and produces debt tokens withinLadle.sol.
Duringwrap()andunwrap()actions,_checkpoint()is used to update the rewards for thefrom_andto_accounts. However, thereferencecontract implements a_beforeTokenTransfer()function which has been removed from Yield Protocol’s custom implementation.
As a result, it is possible to transferwCVXtokens to another account after an initial checkpoint has been made. By manually callinguser_checkpoint()on the new account, this user is able to update its deposited balance of the new account while the sender’s balance is not updated. This can be repeated to effectively replicate a user’s deposited balance over any number of accounts. To claim yield generated by the protocol, the user must only make sure that the account callinggetReward()holds the tokens for the duration of the call.
Proof of Concept
The exploit can be outlined through the following steps:
Alice receives 100wCVXtokens from the protocol after wrapping their convex tokens.At that point in time,_getDepositedBalance()returns 100 as its result. A checkpoint has also been made on this balance, giving Alice claim to her fair share of the rewards.Alice transfers her tokens to her friend Bob who then manually callsuser_checkpoint()to update his balance.Now from the perspective of the protocol, both Alice and Bob have 100wCVXtokens as calculated by the_getDepositedBalance()function.If either Alice or Bob wants to claim rewards, all they need to do is make sure the 100wCVXtokens are in their account upon callinggetReward(). Afterwards, the tokens can be transferred out.
Tools Used
Manual code review.
Discussion/confirmation with the Yield Protocol team.
Recommended Mitigation Steps
Consider implementing the_beforeTokenTransfer()function as shown in thereferencecontract. However, it is important to ensure the wrapper contract and collateral vaults are excluded from the checkpointing so they are not considered in the rewards calculations.
alcueca (Yield) confirmed and commented:
Confirmed. The fact that rewards can be drained also means that users lose on their expected rewards, so I think that Sev 3 is right.
iamsahu (Yield) resolved
Alex the Entreprenerd (judge) commented:
In systems that track growing rewards, anytime a user balances changes, it’s important to recalculate their balances as to properly distribute pending rewards and to influence the future-rate at which rewards will be distributed (process generally calledaccruing)In the case of the ConvexYieldWrapper, the warden has shown that because thewCVXtoken doesn’t perform a_checkpointon each transfer, a malicious attacker could repeatedly transfer their tokens in order to reuse the same balance in multiple accounts, effectively sybil attacking the protocol.The fix seems to be straightforward, however the impact of the finding breaks the accounting of the protocol, as such I believe High Severity to be appropraite
Alex the Entreprenerd (judge) commented:
The sponsor has mitigated in a subsequent PR by overriding the_transferfunction