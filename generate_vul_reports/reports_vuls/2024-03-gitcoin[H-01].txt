[H-01]userTotalStakedinvariant will be broken due to vulnerable implementations inrelease()
Submitted byoakcobalt, also found byoakcobalt,Stormy, and0xDING99YA
userTotalStakedinvariant will be broken due to vulnerable implementations inrelease(). Users might lose funds due to underflow errors in withdraw methods.
Proof of Concept
According to thereadme,userTotalStakedinvariant should always hold true:
userTotalStaked[address] = selfStakes[address].amount + sum(communityStakes[address][x].amount for all x staked on by this address)
However, this can be broken inrelease()flow due touserTotalStakedis not updated together withselfStakes[address].amountorcommunityStakes[address][x].amount.
//id-staking-v2/contracts/IdentityStaking.solfunctionrelease(addressstaker,addressstakee,uint88amountToRelease,uint16slashRound)externalonlyRole(RELEASER_ROLE)whenNotPaused{...if(staker==stakee) {...selfStakes[staker].slashedAmount-=amountToRelease;//@audit selfStakes[staker].amount is updated but `userTotalStaked` is not|>selfStakes[staker].amount+=amountToRelease;}else{...communityStakes[staker][stakee].slashedAmount-=amountToRelease;//@audit communityStakes[staker].amount is updated but `userTotalStaked` is not|>communityStakes[staker][stakee].amount+=amountToRelease;}...
https://github.com/code-423n4/2024-03-gitcoin/blob/6529b351cd72a858541f60c52f0e5ad0fb6f1b16/id-staking-v2/contracts/IdentityStaking.sol#L562-L563
For comparison, in other flows such as staking, withdrawing and slashing,userTotalStakedis always updated in sync withselfStakes/communityStakes.
POC:
AliceselfStakes()100000 ether andcommunityStakes()100000 at round 1.Alice’sselfStakeandcommunityStakeare slashed by 80% each.Alice appealed and was released the full slashed amount. Alice’s staked balance is restored to 100000 ether each. ButuserTotalStakedis not restored.Alice’s unlocked but cannot withdraw the 100000x2 ether balance due to underflow. She can only withdraw 20000x2 ether.
See test below:
Inid-staking-v2/test/IdentityStaking.ts, first addimport { PANIC_CODES} from "@nomicfoundation/hardhat-chai-matchers/panic";.
Then copy this test insidedescribe("slashing/releasing/burning tests", function () {.
it.only("userTotalStaked is broken, user lose funds",asyncfunction(){//Step2: Round1 - slash Alice's self and community stake of 80000 eachawaitthis.identityStaking.connect(this.owner).slash(this.selfStakers.slice(0,1),this.communityStakers.slice(0,1),this.communityStakees.slice(0,1),80,);//Step2: Round1 - Alice's community/self stake is 20000 after slashingexpect((awaitthis.identityStaking.communityStakes(this.communityStakers[0],this.communityStakees[0],)).amount,).to.equal(20000);//Step2: Round1 - total slashed amount 80000 x 2expect(awaitthis.identityStaking.totalSlashed(1)).to.equal(160000);//Step3: Round1 - Alice appealed and full slash amount is released 80000 x 2awaitthis.identityStaking.connect(this.owner).release(this.selfStakers[0],this.selfStakers[0],80000,1);awaitthis.identityStaking.connect(this.owner).release(this.communityStakers[0],this.communityStakees[0],80000,1);//Step3: Round1 - After release, Alice has full staked balance 100000 x 2expect((awaitthis.identityStaking.selfStakes(this.selfStakers[0])).amount).to.equal(100000);expect((awaitthis.identityStaking.communityStakes(this.communityStakers[0],this.communityStakees[0])).amount).to.equal(100000);expect(awaitthis.identityStaking.totalSlashed(1)).to.equal(0);// Alice's lock expiredawaittime.increase(twelveWeeksInSeconds+1);//Step4: Alice trying to withdraw 100000 x 2 from selfStake and communityStake. Tx reverted with underflow error.awaitexpect((this.identityStaking.connect(this.userAccounts[0]).withdrawSelfStake(100000))).to.be.revertedWithPanic(PANIC_CODES.ARITHMETIC_UNDER_OR_OVERFLOW);awaitexpect((this.identityStaking.connect(this.userAccounts[0]).withdrawCommunityStake(this.communityStakees[0],100000))).to.be.revertedWithPanic(PANIC_CODES.ARITHMETIC_UNDER_OR_OVERFLOW);//Step4: Alice could only withdraw 20000 x 2. Alice lost 80000 x 2.awaitthis.identityStaking.connect(this.userAccounts[0]).withdrawSelfStake(20000);awaitthis.identityStaking.connect(this.userAccounts[0]).withdrawCommunityStake(this.communityStakees[0],20000);})
Tools Used
Hardhat
Recommended Mitigation Steps
Inrelease(), also updateuserTotalStaked.
nutrina (Gitcoin) confirmed
Alex the Entreprenerd (judge) commented:
The warden has shown how, due to incorrect accounting,userTotalStakedmay end up being less than intended, causing a loss of funds to users.Due to the impact, I agree with High Severity.
Gitcoin mitigated:
ThisPRfixes theuserTotalStakedinvariant (accounting error)here.
Status:Mitigation confirmed. Full details in reports fromoakcobalt,Stormyand0xDING99YA.