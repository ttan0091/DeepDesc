[H-04] Incorrectgnosis_safe_disable_module_offsetconstant leads to removing the rental safe’smodulewithout verification
Submitted byserial-coder, also found byEV_om,rbserver, zzzitron (1,2),AkshaySrivastav,mussucal,kaden,0xAlix2,Beepidibop, andhaxatron
Thegnosis_safe_disable_module_offsetconstant was incorrectly specified to point at an incorrect function parameter of thedisableModule(address prevModule, address module).
Specifically, the offset constant will point at theprevModule(1st param) instead of themodule(2nd param).
Impact
When a safe transaction initiated from a rental safe containing a call to the safe’sdisableModule()is invoked, theGuard::checkTransaction()cannot verify themoduleexpected to be removed.
If theprevModulewas a non-whitelisted extension, the safe transaction will be reverted.
However, if theprevModulewas a whitelisted extension, themodulewill be removed without verification. Removing the rental safe’smodulewithout verification can lead to other issues or attacks since the removedmodulecan be a critical component (e.g., removing the protocol’sStoppolicy contract).
Proof of Concept
The snippet below presents some of the Gnosis Safe configurations of thereNFT protocol. Thegnosis_safe_disable_module_selectorconstant contains the function selector (0xe009cfde) of the rental safe’sModuleManager::disableModule(address prevModule, address module).
Meanwhile, thegnosis_safe_disable_module_offsetconstant contains a memory offset (0x24) intended to point at themoduleparam of thedisableModule().
// FILE: https://github.com/re-nft/smart-contracts/blob/3ddd32455a849c3c6dc3c3aad7a33a6c9b44c291/src/libraries/RentalConstants.sol///////////////////////////////////////////////////////////////////////////////////                  Gnosis Safe Function Selectors And Offsets                 ///////////////////////////////////////////////////////////////////////////////////...// bytes4(keccak256("disableModule(address,address)"));@1bytes4constantgnosis_safe_disable_module_selector=0xe009cfde;//@audit -- The declaration of function selector: ModuleManager::disableModule(address prevModule, address module)...@2uint256constantgnosis_safe_disable_module_offset=0x24;//@audit -- The memory offset intended to point at the 'module' param of the disableModule() was incorrectly specified to the 'prevModule' param instead
@1 -- The declaration of function selector: ModuleManager::disableModule(address prevModule, address module):https://github.com/re-nft/smart-contracts/blob/3ddd32455a849c3c6dc3c3aad7a33a6c9b44c291/src/libraries/RentalConstants.sol#L58@2 -- The memory offset intended to point at the 'module' param of the disableModule() was incorrectly specified to the 'prevModule' param instead:https://github.com/re-nft/smart-contracts/blob/3ddd32455a849c3c6dc3c3aad7a33a6c9b44c291/src/libraries/RentalConstants.sol#L62
The below snippet shows the function signature of the rental safe’sModuleManager::disableModule():function disableModule(address prevModule, address module) external
Let’s break down the value of thegnosis_safe_disable_module_offsetconstant (0x24):
0x24 == 36 == 32 (the calldata’s array length) + 4 (the function selector)
As you can see, thegnosis_safe_disable_module_offsetwas incorrectly specified to point at theprevModuleparam (1st param) instead of themoduleparam (2nd param) that refers to themoduleexpected to be removed.
// FILE: https://github.com/re-nft/smart-contracts/blob/3ddd32455a849c3c6dc3c3aad7a33a6c9b44c291/src/interfaces/ISafe.sol/***@noticeDisables the module`module`for the Safe.**@devThis can only be done via a Safe transaction.*@3   *@paramprevModulePrevious module in the modules linked list.@3   *@parammoduleModule to be removed.*/@3functiondisableModule(addressprevModule,addressmodule)external;//@audit -- The memory offset must point at the second param because it would be the module to be removed
@3 -- The memory offset must point at the second param because it would be the module to be removed:https://github.com/re-nft/smart-contracts/blob/3ddd32455a849c3c6dc3c3aad7a33a6c9b44c291/src/interfaces/ISafe.sol#L98-L101
With the incorrectgnosis_safe_disable_module_offsetconstant, once theGuard::_checkTransaction()is triggered to verify the safe transaction containing acall to the safe’sdisableModule(), the address of theprevModulecontractwill be extracted and assigned to theextensionvariable instead of themodulecontract’s.
Consequently, the address of theprevModulecontractwill be verified for the whitelist by theGuard::_revertNonWhitelistedExtension()instead of the expectedmodulecontract address.
// FILE: https://github.com/re-nft/smart-contracts/blob/3ddd32455a849c3c6dc3c3aad7a33a6c9b44c291/src/policies/Guard.solfunction_checkTransaction(addressfrom,addressto,bytesmemorydata)privateview{bytes4selector;// Load in the function selector.assembly{selector :=mload(add(data,0x20))}...// some if-else cases@4}elseif(selector==gnosis_safe_disable_module_selector) {//@audit -- Check for calls to the disableModule() initiated from Safe contracts// Load the extension address from calldata.addressextension=address(uint160(uint256(@5_loadValueFromCalldata(data,gnosis_safe_disable_module_offset)//@audit -- Since the gnosis_safe_disable_module_offset constant points at the incorrect param (i.e., prevModule), the extension variable will contain an address of the prevModule)));// Check if the extension is whitelisted.@6_revertNonWhitelistedExtension(extension);//@audit -- The address of the prevModule will be checked for the whitelist instead of the expected module to be removed}...// else case}
@4 -- Check for calls to the disableModule() initiated from Safe contracts:https://github.com/re-nft/smart-contracts/blob/3ddd32455a849c3c6dc3c3aad7a33a6c9b44c291/src/policies/Guard.sol#L255@5 -- Since the gnosis_safe_disable_module_offset constant points at the incorrect param (i.e., prevModule), the extension variable will contain an address of the prevModule:https://github.com/re-nft/smart-contracts/blob/3ddd32455a849c3c6dc3c3aad7a33a6c9b44c291/src/policies/Guard.sol#L260@6 -- The address of the prevModule will be checked for the whitelist instead of the expected module to be removed:https://github.com/re-nft/smart-contracts/blob/3ddd32455a849c3c6dc3c3aad7a33a6c9b44c291/src/policies/Guard.sol#L266
Besides, I also noticed that the developer also assumed that thedisableModule()would have one function parameter while writing the test functions:test_Success_CheckTransaction_Gnosis_DisableModule()andtest_Reverts_CheckTransaction_Gnosis_DisableModule().
That can confirm why the test functions cannot catch up with the mistake.
// FILE: https://github.com/re-nft/smart-contracts/blob/3ddd32455a849c3c6dc3c3aad7a33a6c9b44c291/test/unit/Guard/CheckTransaction.t.solfunctiontest_Success_CheckTransaction_Gnosis_DisableModule()public{// impersonate the admin policy adminvm.prank(deployer.addr);// enable this address to be added as a module by rental safesadmin.toggleWhitelistExtension(address(mockTarget),true);// Build up the `disableModule(address)` calldatabytesmemorydisableModuleCalldata=abi.encodeWithSelector(gnosis_safe_disable_module_selector,@7address(mockTarget)//@audit -- In the test function: test_Success_CheckTransaction_Gnosis_DisableModule(), the developer assumed that the disableModule() would have one param (incorrect!!));// Check the transaction_checkTransaction(address(this),address(mockTarget),disableModuleCalldata);}...functiontest_Reverts_CheckTransaction_Gnosis_DisableModule()public{// Build up the `disableModule(address)` calldatabytesmemorydisableModuleCalldata=abi.encodeWithSelector(gnosis_safe_disable_module_selector,@8address(mockTarget)//@audit -- Also in the test function: test_Reverts_CheckTransaction_Gnosis_DisableModule(), the developer assumed that the disableModule() would have one param (incorrect!!));// Expect revert because of an unauthorized extension_checkTransactionRevertUnauthorizedExtension(address(this),address(mockTarget),disableModuleCalldata);}
@7 -- In the test function: test_Success_CheckTransaction_Gnosis_DisableModule(), the developer assumed that the disableModule() would have one param (incorrect!!):https://github.com/re-nft/smart-contracts/blob/3ddd32455a849c3c6dc3c3aad7a33a6c9b44c291/test/unit/Guard/CheckTransaction.t.sol#L369@8 -- Also in the test function: test_Reverts_CheckTransaction_Gnosis_DisableModule(), the developer assumed that the disableModule() would have one param (incorrect!!):https://github.com/re-nft/smart-contracts/blob/3ddd32455a849c3c6dc3c3aad7a33a6c9b44c291/test/unit/Guard/CheckTransaction.t.sol#L557
Recommended Mitigation Steps
To point the memory offset at themoduleparam (2nd param), thegnosis_safe_disable_module_offsetconstant must be set to0x44(0x44 == 68 == 32 (the calldata’s array length) + 4 (the function selector) + 32 (1st param)).
// FILE: https://github.com/re-nft/smart-contracts/blob/3ddd32455a849c3c6dc3c3aad7a33a6c9b44c291/src/libraries/RentalConstants.sol///////////////////////////////////////////////////////////////////////////////////                  Gnosis Safe Function Selectors And Offsets                 ///////////////////////////////////////////////////////////////////////////////////...// bytes4(keccak256("disableModule(address,address)"));bytes4 constant gnosis_safe_disable_module_selector = 0xe009cfde;...-   uint256 constant gnosis_safe_disable_module_offset = 0x24;+   uint256 constant gnosis_safe_disable_module_offset = 0x44;
Alec1017 (reNFT) confirmed and commented:
PoC confirmed!
Note: To see full discussion, seehere.
reNFT mitigated:
The PRhere- Fixes offset value so that the proper address is checked when disabling a gnosis module from a safe.
Status:Mitigation confirmed. Full details in reports fromjuancito,EV_omandsin1st3r__.