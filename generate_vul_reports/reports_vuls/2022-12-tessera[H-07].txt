[H-07] User loses collateral converted to pendingBalance whencash()orlist()is called
Submitted byTrust, also found byLambda
https://github.com/code-423n4/2022-12-tessera/blob/f37a11407da2af844bbfe868e1422e3665a5f8e4/src/seaport/modules/OptimisticListingSeaport.sol#L295
https://github.com/code-423n4/2022-12-tessera/blob/f37a11407da2af844bbfe868e1422e3665a5f8e4/src/seaport/modules/OptimisticListingSeaport.sol#L232
Description
In OptimisticListingOpensea, there are several functions which update pendingBalances of a proposer:
list()cash()propose()
Unfortunately, inlist()andcash()the = operator is used instead of += when writing the new pendingBalances. For example:
function cash(address _vault, bytes32[] calldata _burnProof) external {// Reverts if vault is not registered(address token, uint256 id) = _verifyVault(_vault);// Reverts if active listing has not been settledListing storage activeListing = activeListings[_vault];// Reverts if listing has not been soldif (!_verifySale(_vault)) {revert NotSold();} else if (activeListing.collateral != 0) {uint256 collateral = activeListing.collateral;activeListing.collateral = 0;// Sets collateral amount to pending balances for withdrawalpendingBalances[_vault][activeListing.proposer] = collateral;}...
pendingBalances is not guaranteed to be zero. There could be funds from previous proposals which are not yet collected. Propose updates pendingBalance correctly:
// Sets collateral amount to pending balances for withdrawalpendingBalances[_vault][proposedListing.proposer] += proposedListing.collateral;
So, when propose is followed by another propose(), the pendingBalance is updated correctly, but in cash and list we don’t account for pre-existing balance. This issue would manifest even after the fix suggested in the issue “User can send a proposal and instantly take back their collateral” because reject functions would increment the pendingBalance and then it would be overriden.
Impact
User loses collateral converted to pendingBalance whencash()orlist()is called.
Proof of Concept
User callspropose()and gets pendingBalance = xUser callspropose()with an improved proposal and gets pendingBalance = 1.5xproposal is successfull and the listing purchased the NFTcash()is called to convert the Raes to ETH amount from the sell. pendingBalance is overridden by the current “collateral”  value. pendingBalance = 0.5xUser loses x collateral value which is stuck in the contract
Recommended Mitigation Steps
Change the = operator to += inlist()andcash().
mehtaculous (Tessera) confirmed and commented:
Agree with High severity. Solution is to replace=with+=for bothlistandcashfunctions.
stevennevins (Tessera) mitigated:
https://github.com/fractional-company/modular-fractional/pull/202Status:Mitigation confirmed bygzeon,IllIllI, andLambda.