[H-16] Reentrancy vulnerability in GiantMevAndFeesPool.withdrawETH
Submitted bycccz
GiantMevAndFeesPool.withdrawETH calls lpTokenETH.burn, then GiantMevAndFeesPool.beforeTokenTransfer, followed by a call to _distributeETHRewardsToUserForToken sends ETH to the user, which allows the user to call any function in the fallback. While GiantMevAndFeesPool.withdrawETH has the nonReentrant modifier, GiantMevAndFeesPool.claimRewards does not have the nonReentrant modifier.When GiantMevAndFeesPool.claimRewards is called in GiantMevAndFeesPool.withdrawETH, the idleETH is reduced but the ETH is not yet sent to the user, which increases totalRewardsReceived and accumulatedETHPerLPShare, thus making the user receive more rewards when calling GiantMevAndFeesPool.claimRewards.
Proof of Concept
https://github.com/code-423n4/2022-11-stakehouse/blob/4b6828e9c807f2f7c569e6d721ca1289f7cf7112/contracts/liquid-staking/GiantPoolBase.sol#L52-L64
Recommended Mitigation Steps
Change to
function withdrawETH(uint256 _amount) external nonReentrant {require(_amount >= MIN_STAKING_AMOUNT, "Invalid amount");require(lpTokenETH.balanceOf(msg.sender) >= _amount, "Invalid balance");require(idleETH >= _amount, "Come back later or withdraw less ETH");-  idleETH -= _amount;lpTokenETH.burn(msg.sender, _amount);+  idleETH -= _amount;(bool success,) = msg.sender.call{value: _amount}("");require(success, "Failed to transfer ETH");emit LPBurnedForETH(msg.sender, _amount);}
vince0656 (Stakehouse) confirmed