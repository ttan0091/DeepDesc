[H-16] Tokens can be stolen throughtransferTo
I know that it’s stated that:
VADER, USDV, SYNTHS all employ thetransferTo()function, which interrogates fortx.originand skips approvals. The author does not subscribe to the belief that this is dangerous
In my opinion, it can be very dangerous. Imagine the following scenario:
I create a custom attacker ERC20 token that has a hook in the_transferfunction that checks tx.origin for USDV/VADER/SYNTHS and callstransferToto steal these funds.I set up a honeypot by providing liquidity to theBASE <> ATTACKERpool.I target high-profile accounts holdinging VADER/USDV/SYNTHS and airdrop them free tokens.Block explorers / Vader swap websites could show that this token has value and can be traded for actualBASEtokens.User wants to sell the airdroppedATTACKERtoken to receive valuable tokens through the Vader swap and has all their tokens (that are even completely unrelated to the tokens being swapped) stolen.
In general, a holder of any of the core assets of the protocol risks all their funds being stolen if they ever interact with an unvetted external contract/token.
This could even be completely unrelated to the VADER protocol.
Recommend removingtransferToand usepermit+transferFrominstead to move tokens fromtx.origin.
strictly-scarce (vader) acknowledged:
This attack path has already been assessed as the most likely, no new information is being presented here.
Do not interact with attack contracts, interacting with an ERC20 is an attack contract.
0xBrian commented:
@strictly-scarce (vader) What would be the downside of adopting the suggested mitigation? Since we cannot communicate effectively with all users to tell them not to interact with certain kinds of contracts (and even if we could, they may not be able to discern which are OK and which aren’t), we don’t want to set up a thicket for fraudsters to operate. If the downside of the mitigation is not too bad, I think it could be worth it in order to deny fraudsters an opportunity to steal.
Mervyn853 commented:
Our decision matrix for severity:0: No-risk: Code style, clarity, off-chain monitoring (events etc), exclude gas-optimisations
1: Low Risk: UX, state handling, function incorrect as to spec
2: Funds-Not-At-Risk, but can impact the functioning of the protocol, or leak value with a hypothetical attack path with stated assumptions, but external requirements
3: Funds can be stolen/lost directly, or indirectly if a valid attack path shown that does not have handwavey hypotheticals.Recommended: 0