[H-18]multiHopSellCollateral()will fail due to call on an invalid market address causing bridged collateral to be locked up
Submitted bypeakbolt
https://github.com/Tapioca-DAO/tapioca-bar-audit/blob/master/contracts/markets/singularity/Singularity.sol#L409-L427
https://github.com/Tapioca-DAO/tapioca-bar-audit/blob/master/contracts/markets/singularity/SGLLeverage.sol#L81
https://github.com/Tapioca-DAO/tapiocaz-audit/blob/master/contracts/tOFT/modules/BaseTOFTLeverageModule.sol#L79-L108
https://github.com/Tapioca-DAO/tapiocaz-audit/blob/master/contracts/tOFT/modules/BaseTOFTLeverageModule.sol#L227
multiHopSellCollateral()allows users to leverage down by selling theTOFTcollateral on another chain and then send it to host chain (Arbitrum) for repayment of USDO loan.
However, it will fail as it tries to obtain therepayableAmounton the destination chain by callingIMagnetar.getBorrowPartForAmount()on a non-existing market. That is because Singularity/BigBang markets are only deployed on the host chain.
https://github.com/Tapioca-DAO/tapiocaz-audit/blob/master/contracts/tOFT/modules/BaseTOFTLeverageModule.sol#L205-L227
functionleverageDownInternal(uint256amount,IUSDOBase.ILeverageSwapDatamemoryswapData,IUSDOBase.ILeverageExternalContractsDatamemoryexternalData,IUSDOBase.ILeverageLZDatamemorylzData,addressleverageFor)publicpayable{_unwrap(address(this),amount);//swap to USDOIERC20(erc20).approve(externalData.swapper,amount);ISwapper.SwapDatamemory_swapperData=ISwapper(externalData.swapper).buildSwapData(erc20,swapData.tokenOut,amount,0,false,false);(uint256amountOut, ) =ISwapper(externalData.swapper).swap(_swapperData,swapData.amountOutMin,address(this),swapData.data);//@audit this call will fail as there is no market in destination chain//repayuint256repayableAmount=IMagnetar(externalData.magnetar).getBorrowPartForAmount(externalData.srcMarket,amountOut);
Impact
The issue will prevent users from usingmultiHopSellCollateral()to leverage down.
Furthermore the failure of the cross-chain transaction will cause the bridged collateral to be locked in the TOFT contract on a non-host chain as the refund mechanism will also revert andretryMessage()will continue to fail as this is a permanent error.
Proof of Concept
Consider the following scenario where a user leverage down by selling the collateral on Ethereum (a non-host chain).
User first triggersSingularity.multiHopSellCollateral()on host chain Arbitrum.That will callSGLLeverage.multiHopSellCollateral(), which will conduct a cross chain message viaITapiocaOFT(address(collateral)).sendForLeverage()to bridge over and sell the collateral on Ethereum mainnet.The collateral TOFT contract on Ethereum mainnet will receive the bridged collateral and cross-chain message via_nonBlockingLzReceive()and thenBaseTOFTLeverageModule.leverageDown().The execution continues withBaseTOFTLeverageModule.leverageDownInternal(), but it will revert as it attempt to callgetBorrowPartForAmount()for a non-existing market in Ethereum.The bridgex collateral will be locked in the TOFT contract on Ethereum mainnet as the refund mechanism will also revert andretryMessage()will continue to fail as this is a permanent error.
Recommended Mitigation Steps
Obtain the repayable amount on the Arbitrum (host chain) where the BigBang/Singularity markets are deployed.
0xRektora (Tapioca) confirmed