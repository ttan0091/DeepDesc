[H-01] User doesn’t have to deposit for a week into the market to get their weekly reward from theLendingLedger
Submitted bySpicyMeatball, also found bymert_eren,nonseodion,cducrest,immeas,popular00,0xComfyCat,GREY-HAWK-REACH,Yanchuan,ppetrov,kaden, andpep7siup
In theLendingLedgercontract, a user is rewarded with CANTO tokens depending on how long he has his deposit in the market. Rewards are distributed for each week during which the deposit was inside the market. However, the user can cheat this condition because we are rounding down to the start of the week, so the user can deposit at 23:59 at the end of the week and withdraw at 00:00 and still get rewarded as if he had his deposit for the whole week.
Proof of Concept
Test case for theLendingLedger.t.solfunction setupStateBeforeClaim() internal {whiteListMarket();vm.prank(goverance);ledger.setRewards(0, WEEK*10, amountPerEpoch);// deposit into market at 23:59 (week 4)vm.warp((WEEK * 5) - 1);int256 delta = 1.1 ether;vm.prank(lendingMarket);ledger.sync_ledger(lender, delta);// airdrop ledger enough token balance for user to claimpayable(ledger).transfer(1000 ether);// withdraw at 00:00 (week 5)vm.warp(block.timestamp + 1);vm.prank(lendingMarket);ledger.sync_ledger(lender, delta * (-1));}function testClaimValidLenderOneEpoch() public {setupStateBeforeClaim();uint256 balanceBefore = address(lender).balance;vm.prank(lender);ledger.claim(lendingMarket, 0, type(uint256).max);uint256 balanceAfter = address(lender).balance;assertTrue(balanceAfter - balanceBefore == 1 ether);uint256 claimedEpoch = ledger.userClaimedEpoch(lendingMarket, lender);assertTrue(claimedEpoch - WEEK*4 == WEEK);}
Tools Used
Foundry
Recommended Mitigation Steps
It’s difficult to propose a solution for this exploit without major changes in the contract’s architecture. Perhaps we can somehow split the amount based on the time the sync was made inside the week, let’s say Alice’slast_syncwas in the middle of week0, she deposited 1 ether, thus her amount for the current epoch will be 1/2 ether. However there is a caveat, how do we fill the gaps? We can’t fill them with 1/2 ether. We can use this struct though,
Amount {uint256 actualAmount,uint256 fraction}
so we can usefractionfor the current epoch andactualAmount = 1 etherto fill the gaps.
alcueca (Judge) increased severity to High and commented:
Chosen as best due to clarity, conciseness, and presence of executable PoC
The rationale behind the High severity is that the purpose of veRWA is to attract liquidity to certain contracts as voted by CANTO holders, and this vulnerability defeats the purpose of attracting liquidity completely.
OpenCoreCH (veRWA) commented:
Reward calculation is now based on a time-weighted balance. Btw, while implementing the fix I noticed that the PoC here does not really highlight the problem. In the PoC, there is only one lender, so even if we take the deposit time into account, this lender should receive 100% of the epoch rewards (as they provided 100% of the liquidity within the market during this epoch). I modified the PoC to a scenario where there are two lenders, with one that deposited only for one second and one for the whole week. The one that deposited for the whole week should receive ~604800 times more rewards for this epoch, which is now the case:
functiontestTimeWeightedClaiming()public{whiteListMarket();int256delta=1.1ether;vm.prank(goverance);ledger.setRewards(0,WEEK*10,amountPerEpoch);vm.startPrank(lendingMarket);// users[2] deposits at beginning of epochvm.warp(WEEK*4);ledger.sync_ledger(users[2],delta);// lender deposits at 23:59 (week 4)vm.warp((WEEK*5) -1);ledger.sync_ledger(lender,delta);vm.stopPrank();// airdrop ledger enough token balance for user to claimpayable(ledger).transfer(1000ether);// withdraw at 00:00 (week 5)vm.warp(WEEK*5);vm.prank(lendingMarket);ledger.sync_ledger(lender,delta* (-1));uint256balanceBefore=address(lender).balance;vm.prank(lender);ledger.claim(lendingMarket,0,type(uint256).max);uint256balanceAfter=address(lender).balance;// Lender should receive rewards for 1 secondassertEq(balanceAfter-balanceBefore,1*1ether*1.1ether/ (1.1ether*WEEK+1.1ether));uint256balanceBefore2=address(users[2]).balance;vm.prank(users[2]);ledger.claim(lendingMarket,0,type(uint256).max);uint256balanceAfter2=address(users[2]).balance;// User2 should receive rewards for 1 weekassertEq(balanceAfter2-balanceBefore2,WEEK*1ether*1.1ether/ (1.1ether*WEEK+1.1ether));}

OpenCoreCH (veRWA) confirmed on duplicate finding #71