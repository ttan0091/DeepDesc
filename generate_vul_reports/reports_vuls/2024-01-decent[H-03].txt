[H-03] WhenDecentBridgeExecutor.executefails, funds will be sent to a random address
Submitted byDadeKuma, also found byNPCsCorp,MrPotatoMagic,SBSecurity,deth,nmirchev8,Tendency,ether_sky,Kow,haxatron,EV_om,0xJaeger,ZdravkoHr,Giorgio,Soliditors,Aamir,Eeyore,Inference, andkutugu
https://github.com/decentxyz/decent-bridge/blob/7f90fd4489551b69c20d11eeecb17a3f564afb18/src/DecentEthRouter.sol#L101-L105
https://github.com/decentxyz/decent-bridge/blob/7f90fd4489551b69c20d11eeecb17a3f564afb18/src/DecentBridgeExecutor.sol#L63
When theDecentBridgeExecutor._executeWeth/_executeEthtarget call fails, a refund is issued to thefromaddress.
However, this address is wrongly set, so those refunds will be permanently lost.
Proof of Concept
UTB.bridgeAndExecute(Link) callsDecentBridgeAdapter.bridge(Link), which callsDecentEthRouter.bridgeWithPayload(Link), where the payload is constructed (Link):
function_bridgeWithPayload(uint8msgType,uint16_dstChainId,address_toAddress,uint_amount,uint64_dstGasForCall,bytesmemoryadditionalPayload,booldeliverEth)internal{(bytes32destinationBridge,bytesmemoryadapterParams,bytesmemorypayload) =_getCallParams(msgType,_toAddress,_dstChainId,_dstGasForCall,deliverEth,additionalPayload);...
Inside_getCallParamsthefromaddress is themsg.sender, i.e. theDecentBridgeAdapteraddress on the source chain (Link):
function_getCallParams(uint8msgType,address_toAddress,uint16_dstChainId,uint64_dstGasForCall,booldeliverEth,bytesmemoryadditionalPayload)privateviewreturns(bytes32destBridge,bytesmemoryadapterParams,bytesmemorypayload){uint256GAS_FOR_RELAY=100000;uint256gasAmount=GAS_FOR_RELAY+_dstGasForCall;adapterParams=abi.encodePacked(PT_SEND_AND_CALL,gasAmount);destBridge=bytes32(abi.encode(destinationBridges[_dstChainId]));if(msgType==MT_ETH_TRANSFER) {@>payload=abi.encode(msgType,msg.sender,_toAddress,deliverEth);}else{payload=abi.encode(msgType,@>msg.sender,//@audit 'from' address_toAddress,deliverEth,additionalPayload);}}
After the payload is constructed,DecentEthRoutersends the message:
dcntEth.sendAndCall{value:gasValue}(address(this),// from address that has dcntEth (so DecentRouter)_dstChainId,destinationBridge,// toAddress_amount,// amountpayload,//payload (will have recipients address)_dstGasForCall,// dstGasForCallcallParams// refundAddress, zroPaymentAddress, adapterParams);
Finally, on the destination chain,DecentEthRouterwill receive the message (Link):
functiononOFTReceived(uint16_srcChainId,bytescalldata,uint64,bytes32,uint_amount,bytesmemory_payload)externaloverrideonlyLzApp{//@audit from is the decentBridgeAdapter address on the source chain(uint8msgType,address_from,address_to,booldeliverEth) =abi.decode(_payload, (uint8,address,address,bool));...}
At the end of this function, theexecutoris invoked with the same_fromaddress:
}else{weth.approve(address(executor),_amount);executor.execute(_from,_to,deliverEth,_amount,callPayload);}
Finally, this is theexecutefunction inDecentBridgeExecutor(Link):
functionexecute(addressfrom,addresstarget,booldeliverEth,uint256amount,bytesmemorycallPayload)publiconlyOwner{weth.transferFrom(msg.sender,address(this),amount);if(!gasCurrencyIsEth|| !deliverEth) {_executeWeth(from,target,amount,callPayload);}else{_executeEth(from,target,amount,callPayload);}}
Both_executeWethand_executeEthhave the same issue and funds will be lost when the target call fails, for example_executeEth(Link):
function_executeEth(addressfrom,addresstarget,uint256amount,bytesmemorycallPayload)private{weth.withdraw(amount);(boolsuccess, ) =target.call{value:amount}(callPayload);if(!success) {@>payable(from).transfer(amount);//@audit wrong address as it uses the source address, not destination}}
Now,DecentBridgeAdapteras a refund address seems wrong, as I disclosed in another issue, but let’s suppose that it isn’t, as it’s possible to prove both scenarios.
As proof by contradiction, funds should be sent toDecentBridgeAdapter, and this would be a non-issue if these contracts are deployed withCREATE2, as they would have the same address. But they are not deployed like that.
There is hard evidence that they have different addresses, for example, these are the addresses forDcntEthandDecentEthRouterin two different chains, which are already deployed:
lib/decent-bridge/actual-deployments/latest/arbitrumAddresses.json
{"arbitrum_DcntEth":"0x8450e1A0DebF76fd211A03c0c7F4DdbB1eEF8A85","done":true,"arbitrum_DecentEthRouter":"0x17479B712A1FE1FFaeaf155379DE3ad1440fA99e"}
lib/decent-bridge/actual-deployments/latest/optimismAddresses.json
{"DcntEth":"0x4DB4ea27eA4b713E766bC13296A90bb42C5438D0","done":true,"DecentEthRouter":"0x57beDF28C3CB3F019f40F330A2a2B0e0116AA0c2"}
If we take a look at the deploy script forDecentBridgeAdapterit also doesn’t useCREATE2, as there isn’t a factory:
functiondeployDecentBridgeAdapter(addressutb,addressdecentEthRouter,addressdecentBridgeExecutor)internalreturns(DecentBridgeAdapterdecentBridgeAdapter) {stringmemorychain=vm.envString("CHAIN");boolgasIsEth=gasEthLookup[chain];addressweth=wethLookup[chain];addressbridgeToken=gasIsEth?address(0) :weth;@>decentBridgeAdapter=newDecentBridgeAdapter(gasIsEth,bridgeToken);decentBridgeAdapter.setUtb(utb);decentBridgeAdapter.setRouter(decentEthRouter);decentBridgeAdapter.setBridgeExecutor(decentBridgeExecutor);UTB(payable(utb)).registerBridge(address(decentBridgeAdapter));}
So these funds will be sent to a random address in any case.
Recommended Mitigation Steps
Theexecutor.executecall inDecentEthRouter.onOFTReceivedshould be changed to an appropriate address (e.g. the user refund address) instead of using_from:
}else{weth.approve(address(executor),_amount);executor.execute(_from,_to,deliverEth,_amount,callPayload);}
0xsomeone (Judge) commented:
The Warden has detailed how the encoding of the cross-chain payload will use an incorrect_fromparameter under normal operating conditions, leading to failed transfers at the target chain refunding the wrong address.This submission was selected as the best given that it precisely details that the_fromaddress is known to be incorrect at all times when the protocol is used normally.A high-risk rating is appropriate as any failed call will lead tofull fund loss for the cross-chain call.
wkantaros (Decent) confirmed