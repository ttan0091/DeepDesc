[H-21] Attacker can take loan for Victim
Submitted bycsanuragjain, also found bybin2chen,cergyk,evan,7siech,obront,KIntern_NA,Koolex, andunforgiven
An unapproved, non-owner of collateral can still take loan for the owner/operator of collateral even when owner did not needed any loan. This is happening due to incorrect checks as shown in POC. This leads to unintended loan and associated fees for users.
Proof of Concept
A new loan is originated viacommitToLienfunction by User X. Params used by User X are as below:
collateralId = params.tokenContract.computeId(params.tokenId) = 1CT.ownerOf(1) = User YCT.getApproved(1) = User ZCT.isApprovedForAll(User Y, User X) = falsereceiver = User Y
This internally make call to_requestLienAndIssuePayoutwhich then calls_validateCommitmentfunction for signature verificationLets see the signature verification part in_validateCommitmentfunction
function _validateCommitment(IAstariaRouter.Commitment calldata params,address receiver) internal view {uint256 collateralId = params.tokenContract.computeId(params.tokenId);ERC721 CT = ERC721(address(COLLATERAL_TOKEN()));address holder = CT.ownerOf(collateralId);address operator = CT.getApproved(collateralId);if (msg.sender != holder &&receiver != holder &&receiver != operator &&!CT.isApprovedForAll(holder, msg.sender)) {revert InvalidRequest(InvalidRequestReason.NO_AUTHORITY);}VIData storage s = _loadVISlot();address recovered = ecrecover(keccak256(_encodeStrategyData(s,params.lienRequest.strategy,params.lienRequest.merkle.root)),params.lienRequest.v,params.lienRequest.r,params.lienRequest.s);if ((recovered != owner() && recovered != s.delegate) ||recovered == address(0)) {revert IVaultImplementation.InvalidRequest(InvalidRequestReason.INVALID_SIGNATURE);}}
Ideally the verification should fail since :
a. User X is not owner of passed collateralb. User X is not approved for this collateralc. User X is not approved for all of User Y token
But observe the below if condition doing the required check:
uint256 collateralId = params.tokenContract.computeId(params.tokenId);ERC721 CT = ERC721(address(COLLATERAL_TOKEN()));address holder = CT.ownerOf(collateralId);address operator = CT.getApproved(collateralId);if (msg.sender != holder &&receiver != holder &&receiver != operator &&!CT.isApprovedForAll(holder, msg.sender)) {revert InvalidRequest(InvalidRequestReason.NO_AUTHORITY);}
In our case this if condition does not execute since receiver = holder
if (msg.sender != holder && // true since User X is not the ownerreceiver != holder && // false since attacker passed receiver as User Y which is owner of collateral, thus failing this if conditionreceiver != operator &&!CT.isApprovedForAll(holder, msg.sender)) {revert InvalidRequest(InvalidRequestReason.NO_AUTHORITY);}
This means the signature verification passes and loan is issued for collateral owner without his wish
Recommended Mitigation Steps
Revise the condition as shown below:
if (msg.sender != holder &&msg.sender != operator &&!CT.isApprovedForAll(holder, msg.sender)) {revert InvalidRequest(InvalidRequestReason.NO_AUTHORITY);}if (receiver != holder &&receiver != operator) {revert InvalidRequest(InvalidRequestReason.NO_AUTHORITY);}
SantiagoGregory (Astaria) confirmed via duplicate issue#565