[H-04] Yield ofLiquidityReservecan be stolen
Submitted by Picodes
https://github.com/code-423n4/2022-06-yieldy/blob/524f3b83522125fb7d4677fa7a7e5ba5a2c0fe67/src/contracts/LiquidityReserve.sol#L126
https://github.com/code-423n4/2022-06-yieldy/blob/524f3b83522125fb7d4677fa7a7e5ba5a2c0fe67/src/contracts/LiquidityReserve.sol#L176
https://github.com/code-423n4/2022-06-yieldy/blob/524f3b83522125fb7d4677fa7a7e5ba5a2c0fe67/src/contracts/LiquidityReserve.sol#L206
Impact
Using sandwich attacks and JIT (Just-in-time liquidity), the yield ofLiquidityReservecould be extracted for liquidity providers.
Proof of Concept
The yield ofLiquidityReserveis distributed when a user callsinstantUnstakeReserve()inStaking. Then, ininstantUnstake,totalLockedValueincreases with the fee paid by the user withdrawing. The fee is shared between all liquidity providers as they all see the value of their shares increase.
Therefore, an attacker could do the following sandwich attack when spotting a call toinstantUnstakeReserve().
In a first tx before the user call, borrow a lot ofstakingTokenandaddLiquidityThe user call toinstantUnstakeReserve()leading to a fee of sayx\In a second tx after the user call,removeLiquidityand repay the loan, taking a large proportion of the user fee
The problem here is that you can instantly add and remove liquidity without penalty, and that the yield is instantly distributed.
Recommended Mitigation Steps
To mitigate this, you can
store the earned fees and distribute them across multiple blocks to make sure the attack wouldn’t be worth itadd a small fee when removing liquidity, which would make the attack unprofitableprevent users from withdrawing before X blocks or add a locking mechanism
0xean (Yieldy) disagreed with severity and commented:
This is not unique to the protocol and is a vulnerability in almost all of the LP designs that are prevalent today. There is no loss of user funds here either.Would downgrade to Low or QA.
Picodes (warden) commented:
In standard cases of JIT, for example in a DEX, the attacker takes a risk as the liquidity he adds is used during the swap, and this liquidity is useful for the protocol as leads to a better price for the user, which is not the case here
0xean (Yieldy) commented:
@Picodes - that is fair but the liquidity is still useful and I still don’t see how this qualifies as high severity.  Eventually it would mean that the liquidity reserve would need less liquidity parked in it if JITers always where hitting it.
Picodes (warden) commented:
To me it’s high because: (correct me if I am missing things)JIT is not useful here at all for the protocol, the liquidity they bring is not useful as does not get locked. It’s totally risk free, and as you said it’s a commun attack so it’s likely that someone uses itIt leads to a loss of LP funds:
Assume there is 100k unlocked in the pool, and someoneinstantUnstake100k, it’ll lock all the LP liquidity. But if someone JITs this, the fees will go to the attacker and not the LP which provided the service by accepting to have its liquidity locked.From a protocol point of view, LPing becomes unattractive as all the fees are stolen, breaking the product design
moose-code (judge) commented:
Agree going to leave this as high. Any whale that does a large unstake will be susceptible to having more of the fee’s eroded to a predatory sandwich attack which provides no value to the system.