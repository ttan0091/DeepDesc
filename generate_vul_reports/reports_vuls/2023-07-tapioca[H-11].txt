[H-11] TOFTexerciseOptioncan be used to steal all underlying erc20 tokens
Submitted bywindhustler, also found byAck
Unvalidated input data for theexerciseOptionfunction can be used to steal all the erc20 tokens from the contract.
Proof of Concept
EachBaseTOFTis a wrapper around anerc20token and extends theOFTV2contract to enable smooth cross-chain transfers through LayerZero.
Depending on the erc20 token which is used usually the erc20 tokens will be held on one chain and then only the shares ofOFTV2get transferred around (burnt on one chain, minted on another chain).
Subject to this attack isTapiocaOFTsormTapiocaOFTswhich store as anunderlying token an erc20 token(not native). In order to mintTOFTshares you need to deposit the underlying erc20 tokens into the contract, and you getTOFTshares.
The attack flow is the following:
The attack starts from theexerciseOption. Nothing is validated here and the only cost of the attack is theoptionsData.paymentTokenAmountwhich is burned from the attacker. This can be some small amount.When the message is received on the remote chain inside theexercisefunction it is important that nothing reverts for the attacker.For the attacker to go through the attacker needs to pass the following data:
function exerciseInternal(address from,uint256 oTAPTokenID,address paymentToken,uint256 tapAmount,address target,ITapiocaOptionsBrokerCrossChain.IExerciseLZSendTapDatamemory tapSendData,ICommonData.IApproval[] memory approvals) public {// pass zero approval so this is skippedif (approvals.length > 0) {_callApproval(approvals);}// target is the address which does nothing, but has the exerciseOption implementedITapiocaOptionsBroker(target).exerciseOption(oTAPTokenID,paymentToken,tapAmount);// tapSendData.withdrawOnAnotherChain = false so we enter else branchif (tapSendData.withdrawOnAnotherChain) {ISendFrom(tapSendData.tapOftAddress).sendFrom(address(this),tapSendData.lzDstChainId,LzLib.addressToBytes32(from),tapAmount,ISendFrom.LzCallParams({refundAddress: payable(from),zroPaymentAddress: tapSendData.zroPaymentAddress,adapterParams: LzLib.buildDefaultAdapterParams(tapSendData.extraGas)}));} else {// tapSendData.tapOftAddress is the address of the underlying erc20 token for this TOFT// from is the address of the attacker// tapAmount is the balance of erc20 tokens of this TOFTIERC20(tapSendData.tapOftAddress).safeTransfer(from, tapAmount);}}
So the attack is just simply transferring all the underlying erc20 tokens to the attacker.
The underlyingERC20token for eachTOFTcan be queried througherc20()function, and thetapAmountto pass isERC20balance of theTOFT.
This attack is possible because themsg.senderinside theexerciseInternalis the address of theTOFTwhich is the owner of all the ERC20 tokens that get stolen.
Recommended Mitigation Steps
Validate thattapSendData.tapOftAddressis the address ofTapOFTtoken either while sending the message or during the reception of the message on the remote chain.
0xRektora (Tapioca) confirmed