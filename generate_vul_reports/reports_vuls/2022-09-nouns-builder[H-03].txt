[H-03] Multiple vote checkpoints per block will lead to incorrect vote accounting
Submitted by berndartmueller, also found by 0x52, 0xSky, bin2chen, cccz, Chom, davidbrai, elprofesor, izhuer, m9800, PwnPatrol, and rvierdiiev
Voting power for each NFT owner is persisted within timestamp-dependent checkpoints. Every voting power increase or decrease is recorded. However, the implementation ofERC721Votescreates separate checkpoints with the same timestamp for each interaction, even when the interactions happen in the same block/timestamp.
Impact
Checkpoints with the sametimestampwill cause issues within theERC721Votes.getPastVotes(..)function and will return incorrect votes for a given_timestamp.
Proof of Concept
lib/token/ERC721Votes.sol#L252-L253
/// @dev Records a checkpoint/// @param _account The account address/// @param _id The checkpoint id/// @param _prevTotalVotes The account's previous voting weight/// @param _newTotalVotes The account's new voting weightfunction_writeCheckpoint(address_account,uint256_id,uint256_prevTotalVotes,uint256_newTotalVotes)private{// Get the pointer to store the checkpointCheckpointstoragecheckpoint=checkpoints[_account][_id];// Record the updated voting weight and current timecheckpoint.votes=uint192(_newTotalVotes);checkpoint.timestamp=uint64(block.timestamp);emitDelegateVotesChanged(_account,_prevTotalVotes,_newTotalVotes);}
Consider the following example and the votes checkpoint snapshots:
Note: Bob owns a smart contract used to interact with the protocol
Transaction 0:Bob’s smart contract receives 1 NFT through minting (1 NFT equals 1 vote)
Checkpoint IndexTimestampVotes001
Transaction 1:Bob’s smart contract receives one more NFT through minting
Checkpoint IndexTimestampVotes001112
Transaction 1:Within the same transaction 1, Bob’s smart-contract delegates 2 votes to Alice
Checkpoint IndexTimestampVotes001112210
Transaction 1:Again within the same transaction 1, Bob’s smart contract decides to reverse the delegation and self-delegates
Checkpoint IndexTimestampVotes001112210312
Transaction 1:Bob’s smart contract buys one more NFT
Checkpoint IndexTimestampVotes001112210312423
Bob now wants to vote (via his smart contract) on a governance proposal that has been created ontimeCreated = 1(timestamp 1).
Internally, theGovernor._castVotefunction determines the voter’s weight by callinggetVotes(_voter, proposal.timeCreated).
governance/governor/Governor.sol#L275
weight=getVotes(_voter,proposal.timeCreated);
getVotescallsERC721.getPastVotesinternally:
governance/governor/Governor.sol#L462
functiongetVotes(address_account,uint256_timestamp)publicviewreturns(uint256) {returnsettings.token.getPastVotes(_account,_timestamp);}
ERC721.getPastVotes(..., 1)tries to find the checkpoint within thewhileloop:
# Iterationlowmiddlehigh0024
Themiddlecheckpoint with index2matches the given timestamp1and returns0votes. This is incorrect, as Bob has 2 votes. Bob is not able to vote properly.
(Please be aware that this is just one of many examples of how this issue can lead to incorrect vote accounting. In other cases, NFT owners could have more voting power than they are entitled to)
Recommended mitigation steps
Consider batching multiple checkpoints writes per block/timestamp similar to how NounsDAO records checkpoints.
Alex the Entreprenerd (judge) commented:
The Warden has shown how the checkpoint math can be gamed, opening up governance to flashloan exploits, infinite voting power and overall breaking all of governance quorum and execution thresholds.Because any attacker can spam create checkpoints, to manipulate the result of the Binary Search, they can manipulate their balance to make the Governor think it’s way higher than intended.Mitigation requires ensuring that the only balance recorded for a block is the latest value (end of flashloan so the balance goes back down).Because the finding breaks accounting, allowing governance takeover, and the invariants of ERC721Votes are broken (votes are not what they are), I agree with High Severity.
kulkarohan (Nouns Builder) confirmed