[H-01] When price is within position’s range,depositat TokenisableRange can cause loss of funds
Submitted byxuwinnie
When slot0 price is within the range of tokenized position, functiondepositneeds to be called with both parameters,n0andn1, greater than zero. However, if price moves outside the range during the transaction, user will be charged an excessive fee.
Proof of Concept
if ( fee0+fee1 > 0 && ( n0 > 0 || fee0 == 0) && ( n1 > 0 || fee1 == 0 ) ){address pool = V3_FACTORY.getPool(address(TOKEN0.token), address(TOKEN1.token), feeTier * 100);(uint160 sqrtPriceX96,,,,,,)  = IUniswapV3Pool(pool).slot0();(uint256 token0Amount, uint256 token1Amount) = LiquidityAmounts.getAmountsForLiquidity( sqrtPriceX96, TickMath.getSqrtRatioAtTick(lowerTick), TickMath.getSqrtRatioAtTick(upperTick), liquidity);if (token0Amount + fee0 > 0) newFee0 = n0 * fee0 / (token0Amount + fee0);if (token1Amount + fee1 > 0) newFee1 = n1 * fee1 / (token1Amount + fee1);fee0 += newFee0;fee1 += newFee1;n0   -= newFee0;n1   -= newFee1;}
Suppose range is [120, 122] and current price is 121. Alice callsdepositwith{n0: 100, n1:100}, if Price moves to 119 during execution (due to market fluctuations or malicious frontrunning),getAmountsForLiquiditywill return 0 fortoken1Amount. As a result,newFee1will be equal ton1, which means all the 100 token1 will be charged as fee.
(uint128 newLiquidity, uint256 added0, uint256 added1) = POS_MGR.increaseLiquidity(INonfungiblePositionManager.IncreaseLiquidityParams({tokenId: tokenId,amount0Desired: n0,amount1Desired: n1,amount0Min: n0 * 95 / 100,amount1Min: n1 * 95 / 100,deadline: block.timestamp}));
Then,increaseLiquiditywill succeed sinceamount1Minis now zero.
Recommended Mitigation Steps
Don’t use this to calculate fee:
if ( fee0+fee1 > 0 && ( n0 > 0 || fee0 == 0) && ( n1 > 0 || fee1 == 0 ) ){address pool = V3_FACTORY.getPool(address(TOKEN0.token), address(TOKEN1.token), feeTier * 100);(uint160 sqrtPriceX96,,,,,,)  = IUniswapV3Pool(pool).slot0();(uint256 token0Amount, uint256 token1Amount) = LiquidityAmounts.getAmountsForLiquidity( sqrtPriceX96, TickMath.getSqrtRatioAtTick(lowerTick), TickMath.getSqrtRatioAtTick(upperTick), liquidity);if (token0Amount + fee0 > 0) newFee0 = n0 * fee0 / (token0Amount + fee0);if (token1Amount + fee1 > 0) newFee1 = n1 * fee1 / (token1Amount + fee1);fee0 += newFee0;fee1 += newFee1;n0   -= newFee0;n1   -= newFee1;}
Always use this:
uint256 TOKEN0_PRICE = ORACLE.getAssetPrice(address(TOKEN0.token));uint256 TOKEN1_PRICE = ORACLE.getAssetPrice(address(TOKEN1.token));require (TOKEN0_PRICE > 0 && TOKEN1_PRICE > 0, "Invalid Oracle Price");// Calculate the equivalent liquidity amount of the non-yet compounded fees// Assume linearity for liquidity in same tick range; calculate feeLiquidity equivalent and consider it part of base liquidityfeeLiquidity = newLiquidity * ( (fee0 * TOKEN0_PRICE / 10 ** TOKEN0.decimals) + (fee1 * TOKEN1_PRICE / 10 ** TOKEN1.decimals) )/ ( (added0   * TOKEN0_PRICE / 10 ** TOKEN0.decimals) + (added1   * TOKEN1_PRICE / 10 ** TOKEN1.decimals) );
Keref (Good Entry) disputed and commented:
Again this concurrency execution environment stuff.
There is no price moving “during” execution.
xuwinnie (Warden) commented:
Again this concurrency execution environment stuff. There is no price moving “during” execution.Hi @Keref, I guess there could be some misunderstanding. Here I mean when price is 121, user will need to submit the tx with {n0: 100, n1:100}, and price could move to 119 when tx gets executed. (something similar to slippage)
Keref (Good Entry) confirmed and commented:
Hi, sorry I misunderstood the report, accepted.SeePR#4
Good Entry Mitigated:
Remove complex fee clawing strategy.PR:https://github.com/GoodEntry-io/ge/pull/4
Status:Mitigation confirmed. Full details in reports fromkutugu,xuwinnieand3docSec.