[H-19] Migration can permanently fail if user specifies different lengths forselectorsandplugins
Submitted by scaraven, also found by berndartmueller
https://github.com/code-423n4/2022-07-fractional/blob/8f2697ae727c60c93ea47276f8fa128369abfe51/src/Vault.sol#L73-L82
https://github.com/code-423n4/2022-07-fractional/blob/8f2697ae727c60c93ea47276f8fa128369abfe51/src/modules/Migration.sol#L72-L99
https://github.com/code-423n4/2022-07-fractional/blob/8f2697ae727c60c93ea47276f8fa128369abfe51/src/VaultRegistry.sol#L174
Impact
Inpropose()in Migration.sol, there is no check that the lengths of theselectorsandpluginsarrays are the same. This means that if a migration is successful, theinstall()function in Vault.sol could revert beacuse we access an array out of bounds. This prevents a new vault being created thereby permanently locking assets inside the vault.
Proof of Concept
User starts a new migration proposal whereselectors.length != plugins.lengthEnough users join proposal and the buyout bid startsBuyout bid is successful and migration starts withsettleVault()A new vault is cloned withcreate()->registry.deployFor()->vault.install(selectors, plugins)a. Ifselectors.length > plugins.lengththen we get an out of bounds error and transaction revertsb. Ifselectors.length < plugins.lengththen the excess values inpluginsis ignored which is tolerableIn scenario a., the migration fails and a new migration cannot start so assets in the vault are permanently locked
This may seem quite circumstantial as this problem only occurs if a user specifiesselectorsandpluginswrongly however it is very easy for an attacker to perform this maliciously with no cost on their behalf, it is highly unlikely that users will be able to spot a malicious migration.
Tools Used
VS Code
Recommended Mitigation Steps
Consider adding a check inpropose()to make sure that the lengths match i.e.
functionpropose(address_vault,address[]calldata_modules,address[]calldata_plugins,bytes4[]calldata_selectors,uint256_newFractionSupply,uint256_targetPrice)external{// @Audit Make sure that selectors and plugins matchrequire(_selectors.length==_plugins.length,"Plugin lengths do not match");// Reverts if address is not a registered vault(,uint256id) =IVaultRegistry(registry).vaultToToken(_vault);if(id==0)revertNotVault(_vault);// Reverts if buyout state is not inactive(, ,Statecurrent, , , ) =IBuyout(buyout).buyoutInfo(_vault);Staterequired=State.INACTIVE;if(current!=required)revertIBuyout.InvalidState(required,current);// Initializes migration proposal infoProposalstorageproposal=migrationInfo[_vault][++nextId];proposal.startTime=block.timestamp;proposal.targetPrice=_targetPrice;proposal.modules=_modules;proposal.plugins=_plugins;proposal.selectors=_selectors;proposal.oldFractionSupply=IVaultRegistry(registry).totalSupply(_vault);proposal.newFractionSupply=_newFractionSupply;}
Additionally, I would suggest adding such a check in theinstall()function as this may prevent similiar problems if new modules are added.
stevennevins (Fractional) confirmed
HardlyDifficult (judge) commented:
A misconfiguration of a migration can result in permanently locked up funds. Agree with High risk here.