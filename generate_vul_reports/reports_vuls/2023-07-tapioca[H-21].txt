[H-21] Incorrect liquidation reward computation causes excess liquidator rewards to be given
Submitted bypeakbolt, also found byminhtrng,bin2chen,carrotsmuggler,0x007, and 0xRobocop (1,2)
https://github.com/Tapioca-DAO/tapioca-bar-audit/blob/2286f80f928f41c8bc189d0657d74ba83286c668/contracts/markets/bigBang/BigBang.sol#L577
https://github.com/Tapioca-DAO/tapioca-bar-audit/blob/2286f80f928f41c8bc189d0657d74ba83286c668/contracts/markets/singularity/SGLLiquidation.sol#L310-L314
In_liquidateUser()for BigBang and Singularity, the liquidator reward is derived by_getCallerReward(). However, it is incorrectly computed usinguserBorrowPart[user], which is the portion of borrowed amount that does not include the accumulated fees (interests).
https://github.com/Tapioca-DAO/tapioca-bar-audit/blob/2286f80f928f41c8bc189d0657d74ba83286c668/contracts/markets/bigBang/BigBang.sol#L576-L580
uint256callerReward=_getCallerReward(//@audit - userBorrowPart[user] is incorrect as it does not include accumulated feesuserBorrowPart[user],startTVLInAsset,maxTVLInAsset);
Using onlyuserBorrowPart[user]is inconsistent with liquidation calculation inMarket.sol#L423-L424, which is based on borrowed amount including accumulated fees.
https://github.com/Tapioca-DAO/tapioca-bar-audit/blob/2286f80f928f41c8bc189d0657d74ba83286c668/contracts/markets/Market.sol#L423-L424
function_isSolvent(addressuser,uint256_exchangeRate)internalviewreturns(bool) {...returnyieldBox.toAmount(collateralId,collateralShare*(EXCHANGE_RATE_PRECISION/FEE_PRECISION) *collateralizationRate,false) >=//@audit - note that the collateralizion calculation is based on borrowed amount with fees (using totalBorrow.elastic)// Moved exchangeRate here instead of dividing the other side to preserve more precision(borrowPart*_totalBorrow.elastic*_exchangeRate) /_totalBorrow.base;}
As the protocol uses a dynamic liquidation incentives mechanism (see below), the liquidator will be given more rewards than required if the liquidator reward is derived by borrowed amount without accumulated fees. That is because the dynamic liquidation incentives mechanism decreases the rewards as it reaches 100% LTV. So computing the liquidator rewards using a lower value (without fees) actually gives liquidator a higher portion of the rewards.
https://github.com/Tapioca-DAO/tapioca-bar-audit/blob/2286f80f928f41c8bc189d0657d74ba83286c668/contracts/markets/Market.sol#L442-L462
function_getCallerReward(uint256borrowed,uint256startTVLInAsset,uint256maxTVLInAsset)internalviewreturns(uint256) {if(borrowed==0)return0;if(startTVLInAsset==0)return0;if(borrowed<startTVLInAsset)return0;if(borrowed>=maxTVLInAsset)returnminLiquidatorReward;uint256rewardPercentage= ((borrowed-startTVLInAsset) *FEE_PRECISION) / (maxTVLInAsset-startTVLInAsset);int256diff=int256(minLiquidatorReward) -int256(maxLiquidatorReward);int256reward= (diff*int256(rewardPercentage)) /int256(FEE_PRECISION) +int256(maxLiquidatorReward);returnuint256(reward);}
Impact
The protocol is shortchanged as it gives liquidator more rewards than required.
Proof of Concept
Add the following console.log toBigBang.sol#L581`
console.log("    callerReward (without fees) =\t%d (actual)",callerReward);callerReward=_getCallerReward(//userBorrowPart[user],//@audit borrowed amount with fees(userBorrowPart[user] *totalBorrow.elastic) /totalBorrow.base,startTVLInAsset,maxTVLInAsset);console.log("    callerReward (with fees)  =\t%d (expected)",callerReward);
Add and run the following test inbigBang.test.ts. The console.log will show that the expected liquidator reward is lower when computed using borrowed amount with fees.
it.only('peakbolt - liquidation reward computation',async()=>{const{wethBigBangMarket,weth,wethAssetId,yieldBox,deployer,eoa1,__wethUsdcPrice,__usd0WethPrice,multiSwapper,usd0WethOracle,timeTravel,} =awaitloadFixture(register);awaitweth.approve(yieldBox.address,ethers.constants.MaxUint256);awaityieldBox.setApprovalForAll(wethBigBangMarket.address,true);awaitweth.connect(eoa1).approve(yieldBox.address,ethers.constants.MaxUint256);awaityieldBox.connect(eoa1).setApprovalForAll(wethBigBangMarket.address,true);constwethMintVal=ethers.BigNumber.from((1e18).toString()).mul(10,);awaitweth.connect(eoa1).freeMint(wethMintVal);constvalShare=awaityieldBox.toShare(wethAssetId,wethMintVal,false,);awaityieldBox.connect(eoa1).depositAsset(wethAssetId,eoa1.address,eoa1.address,0,valShare,);console.log("wethMintVal = %d",wethMintVal);console.log("__wethUsdcPrice = %d",__wethUsdcPrice);console.log("--------------------- addCollateral ------------------------");awaitwethBigBangMarket.connect(eoa1).addCollateral(eoa1.address,eoa1.address,false,0,valShare);//borrowconstusdoBorrowVal=wethMintVal.mul(74).div(100).mul(__wethUsdcPrice.div((1e18).toString()));console.log("--------------------- borrow ------------------------");awaitwethBigBangMarket.connect(eoa1).borrow(eoa1.address,eoa1.address,usdoBorrowVal);// Can't liquidateconstswapData=newethers.utils.AbiCoder().encode(['uint256'],[1],);timeTravel(100*86400);console.log("--------------------- price drop ------------------------");constpriceDrop=__usd0WethPrice.mul(15).div(10).div(100);awaitusd0WethOracle.set(__usd0WethPrice.add(priceDrop));awaitwethBigBangMarket.updateExchangeRate();constborrowPart=awaitwethBigBangMarket.userBorrowPart(eoa1.address,);console.log("--------------------- liquidate (success) ------------------------");awaitexpect(wethBigBangMarket.liquidate([eoa1.address],[borrowPart],multiSwapper.address,swapData,),).to.not.be.reverted;return;});
Recommended Mitigation Steps
ChangeBigBang.sol#L576-L580,SGLLiquidation.sol#L310-L314,Market.sol#L364from
uint256callerReward=_getCallerReward(userBorrowPart[user],startTVLInAsset,maxTVLInAsset);
to
uint256callerReward=_getCallerReward((userBorrowPart[user] *totalBorrow.elastic) /totalBorrow.base,startTVLInAsset,maxTVLInAsset);
0xRektora (Tapioca) confirmed via duplicate issue 89