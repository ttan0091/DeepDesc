[H-08]IndexTemplate.sol#compensate()will most certainly fail
Submitted by WatchPug
Precision loss while converting betweenthe amount of sharesandthe amount of underlying tokensback and forth is not handled properly.

https://github.com/code-423n4/2022-01-insure/blob/19d1a7819fe7ce795e6d4814e7ddf8b8e1323df3/contracts/IndexTemplate.sol#L438-L447
uint256_shortage;if(totalLiquidity() <_amount) {//Insolvency case_shortage=_amount-_value;uint256_cds=ICDSTemplate(registry.getCDS(address(this))).compensate(_shortage);_compensated=_value+_cds;}vault.offsetDebt(_compensated,msg.sender);
In the current implementation, when someone tries to resume the market after a pending period ends by callingPoolTemplate.sol#resume(),IndexTemplate.sol#compensate()will be called internally to make a payout. If the index pool is unable to cover the compensation, the CDS pool will then be used to cover the shortage.
However, whileCDSTemplate.sol#compensate()takes a parameter for the amount of underlying tokens, it usesvault.transferValue()to transfer corresponding_attributions(shares) instead of underlying tokens.
Due to precision loss, the_attributionstransferred in the terms of underlying tokens will most certainly be less than the shortage.
At L444, the contract believes that it’s been compensated for_value + _cds, which is lower than the actual value, due to precision loss.
At L446, when it callsvault.offsetDebt(_compensated, msg.sender), the tx will revert atrequire(underlyingValue(msg.sender) >= _amount).
As a result,resume()can not be done, and the debt can’t be repaid.
Proof of Concept
Given:
vault.underlyingValue = 10,000vault.valueAll = 30,000totalAttributions = 2,000,000_amount = 1,010,000_shortage = _amount - vault.underlyingValue = 1,000,000_attributions = (_amount * totalAttributions) / valueAll = 67,333,333actualValueTransfered = (valueAll * _attributions) / totalAttributions = 1009999
Expected results: actualValueTransfered = _shortage;
Actual results: actualValueTransfered < _shortage.
Impact
The precision loss isn’t just happening on special numbers, but will most certainly always revert the txs.
This will malfunction the contract as the index pool can notcompensate(), therefore the pool can notresume(). Causing the funds of the LPs of the pool and the index pool to be frozen, and other stakeholders of the same vault will suffer fund loss from an unfair share of the funds compensated before.
Recommendation
Change to:
https://github.com/code-423n4/2022-01-insure/blob/19d1a7819fe7ce795e6d4814e7ddf8b8e1323df3/contracts/IndexTemplate.sol#L439-L446
if(totalLiquidity() <_amount) {//Insolvency case_shortage=_amount-_value;uint256_cds=ICDSTemplate(registry.getCDS(address(this))).compensate(_shortage);_compensated=vault.underlyingValue(address(this));}vault.offsetDebt(_compensated,msg.sender);
oishun1112 (Insure) confirmed and disagreed with severity
oishun1112 (Insure) resolved