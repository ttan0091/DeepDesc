[H-02] Backdated _startTimestamp can lead to loss of funds
Submitted by csanuragjain, also found by defsec, leastwood, and pauliax
Impact
This can lead to loss of funds as there is no recovery function of funds stuck like this
Proof of Concept
User A creates a new promotion using createPromotion function. By mistake he provides 1 year ago value for\_startTimestampwith promotion duration as 6 monthsSince there is no check to see that\_startTimestamp > block.timestampso this promotion gets createdUser cannot claim this promotion if they were not having promotion tokens in the 1 year old promotion period. This means promotion amount remains with contractEven promotion creator cannot claim back his tokens since promotion end date has already passed socancelPromotionwill failAs there is no recovery token function in contract so even contract cant transfer this token and the tokens will remain in this contract with no one able to claim those
Recommended Mitigation Steps
Add below check in thecreatePromotionfunction
functioncreatePromotion(address_ticket,IERC20_token,uint216_tokensPerEpoch,uint32_startTimestamp,uint32_epochDuration,uint8_numberOfEpochs)externaloverridereturns(uint256) {require(_startTimestamp>block.timestamp,"should be after current time");}
PierrickGT (PoolTogether) confirmed and disagreed with severity:
It would indeed be an unfortunate event and we will implement this require. That being said, funds of the promotion creator would be at risk, because of an error he made, but not funds of a user, so I consider this bug as being of severity 2 (Med Risk) and not 3 (High Risk).
LSDan (judge) commented:
Per the Judge Onboarding document provided by Code423n4, this qualifies as a high risk issue. A UI bug or simple mistake could cause complete loss of funds as sponsor acknowledged.3 — High (H): vulns have a risk of 3 and are considered “High” severity when assets can be stolen/lost/compromised directly (or indirectly if there is a valid attack path that does not have hand-wavy hypotheticals).