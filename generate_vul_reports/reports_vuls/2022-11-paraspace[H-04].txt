[H-04] Anyone can prevent themselves from being liquidated as long as they hold one of the supported NFTs
Submitted byIllIllI, also found byAymen0909,pashov,hansfriese,0xNazgul,xiaoming90,Awesome,fatherOfBlocks,kaliberpoziomka8552,shark,unforgiven,csanuragjain,Atarpara,ali_shehab,web3er,pzeus,Kong,BClabs,bullseye,chaduke,datapunk, andnicobevi
Contrary to what the function comments say,removeFeeder()is able to be called by anyone, not just the owner. By removing all feeders (i.e. floor twap price oracle keepers), a malicious user can cause all queries for the price of NFTs reliant on theNFTFloorOracle(all NFTs except for the UniswapV3 ones), to revert, which will cause all calls toliquidateERC721()to revert.
Impact
If NFTs can’t be liquidated, positions will remain open for longer than they should, and the protocol may become insolvent by the time the issue is resolved.
Proof of Concept
TheonlyRole(DEFAULT_ADMIN_ROLE)should have been used instead ofonlyWhenFeederExisted…
File: /paraspace-core/contracts/misc/NFTFloorOracle.sol#1165/// @notice Allows owner to remove feeder.166/// @param _feeder feeder to remove167functionremoveFeeder(address_feeder)168external169onlyWhenFeederExisted(_feeder)170      {171_removeFeeder(_feeder);172:     }
https://github.com/code-423n4/2022-11-paraspace/blob/c6820a279c64a299a783955749fdc977de8f0449/paraspace-core/contracts/misc/NFTFloorOracle.sol#L165-L172
… sinceonlyWhenFeederExistedis already on the internal call to_removeFeeder()(onlyWhenFeederExisteddoesn’t do any authentication of the caller):
File: /paraspace-core/contracts/misc/NFTFloorOracle.sol#2326function_removeFeeder(address_feeder)327internal328onlyWhenFeederExisted(_feeder)329      {330uint8feederIndex=feederPositionMap[_feeder].index;331if(feederIndex>=0&&feeders[feederIndex] ==_feeder) {332feeders[feederIndex] =feeders[feeders.length-1];333feeders.pop();334}335deletefeederPositionMap[_feeder];336revokeRole(UPDATER_ROLE,_feeder);337emitFeederRemoved(_feeder);338:     }
https://github.com/code-423n4/2022-11-paraspace/blob/c6820a279c64a299a783955749fdc977de8f0449/paraspace-core/contracts/misc/NFTFloorOracle.sol#L326-L338
Note thatfeedersmust have theUPDATER_ROLE(revoked above) in order to update the price.
The fetching of the price will revert if the price is stale:
File: /paraspace-core/contracts/misc/NFTFloorOracle.sol#3234/// @param _asset The nft contract235/// @return price The most recent price on chain236functiongetPrice(address_asset)237external238view239override240returns(uint256price)241      {242uint256updatedAt=assetPriceMap[_asset].updatedAt;243require(244@>           (block.number-updatedAt) <=config.expirationPeriod,245"NFTOracle: asset price expired"246);247returnassetPriceMap[_asset].twap;248:     }
https://github.com/code-423n4/2022-11-paraspace/blob/c6820a279c64a299a783955749fdc977de8f0449/paraspace-core/contracts/misc/NFTFloorOracle.sol#L234-L248
And it will become stale if there are no feeders for enough time:
File: /paraspace-core/contracts/misc/NFTFloorOracle.sol#4195functionsetPrice(address_asset,uint256_twap)196public197 @>onlyRole(UPDATER_ROLE)198onlyWhenAssetExisted(_asset)199whenNotPaused(_asset)200      {201booldataValidity=false;202if(hasRole(DEFAULT_ADMIN_ROLE,msg.sender)) {203@>_finalizePrice(_asset,_twap);204return;205}206dataValidity=_checkValidity(_asset,_twap);207require(dataValidity,"NFTOracle: invalid price data");208// add price to raw feeder storage209_addRawValue(_asset,_twap);210uint256medianPrice;211// set twap price only when median value is valid212(dataValidity,medianPrice) =_combine(_asset,_twap);213if(dataValidity) {214@>_finalizePrice(_asset,medianPrice);215}216:     }
https://github.com/code-423n4/2022-11-paraspace/blob/c6820a279c64a299a783955749fdc977de8f0449/paraspace-core/contracts/misc/NFTFloorOracle.sol#L195-L216
File: /paraspace-core/contracts/misc/NFTFloorOracle.sol#5376function_finalizePrice(address_asset,uint256_twap)internal{377PriceInformationstorageassetPriceMapEntry=assetPriceMap[_asset];378assetPriceMapEntry.twap=_twap;379@>assetPriceMapEntry.updatedAt=block.number;380assetPriceMapEntry.updatedTimestamp=block.timestamp;381emitAssetDataSet(382_asset,383assetPriceMapEntry.twap,384assetPriceMapEntry.updatedAt385);386:     }
https://github.com/code-423n4/2022-11-paraspace/blob/c6820a279c64a299a783955749fdc977de8f0449/paraspace-core/contracts/misc/NFTFloorOracle.sol#L376-L386
Note that the default staleness interval is six hours:
File: /paraspace-core/contracts/misc/NFTFloorOracle.sol#610//expirationPeriod at least the interval of client to feed data(currently 6h=21600s/12=1800 in mainnet)11//we do not accept price lags behind to much12:uint128constantEXPIRATION_PERIOD=1800;
https://github.com/code-423n4/2022-11-paraspace/blob/c6820a279c64a299a783955749fdc977de8f0449/paraspace-core/contracts/misc/NFTFloorOracle.sol#L10-L12
The revertinggetPrice()function is called from theERC721OracleWrapperwhere it is not caught:
File: /paraspace-core/contracts/misc/ERC721OracleWrapper.sol#744functionsetOracle(address_oracleAddress)45external46onlyAssetListingOrPoolAdmins47       {48@>oracleAddress=INFTFloorOracle(_oracleAddress);49}50...5455functionlatestAnswer()externalviewoverridereturns(int256) {56@>returnint256(oracleAddress.getPrice(asset));57:      }
https://github.com/code-423n4/2022-11-paraspace/blob/c6820a279c64a299a783955749fdc977de8f0449/paraspace-core/contracts/misc/ERC721OracleWrapper.sol#L44-L57
And neither is it caught from any of the callers further up the chain (note that the fallback oracle can’t be hit since the call reverts before that):
File: /paraspace-core/contracts/misc/ERC721OracleWrapper.sol#810:contractERC721OracleWrapperisIEACAggregatorProxy{
https://github.com/code-423n4/2022-11-paraspace/blob/c6820a279c64a299a783955749fdc977de8f0449/paraspace-core/contracts/misc/ERC721OracleWrapper.sol#L10
File: /paraspace-core/contracts/misc/ParaSpaceOracle.sol#9114/// @inheritdoc IPriceOracleGetter115functiongetAssetPrice(addressasset)116public117view118override119returns(uint256)120      {121if(asset==BASE_CURRENCY) {122returnBASE_CURRENCY_UNIT;123}124125uint256price=0;126@>IEACAggregatorProxysource=IEACAggregatorProxy(assetsSources[asset]);127if(address(source) !=address(0)) {128@>price=uint256(source.latestAnswer());129}130if(price==0&&address(_fallbackOracle) !=address(0)) {131price=_fallbackOracle.getAssetPrice(asset);132}133134require(price!=0,Errors.ORACLE_PRICE_NOT_READY);135returnprice;136:     }
https://github.com/code-423n4/2022-11-paraspace/blob/c6820a279c64a299a783955749fdc977de8f0449/paraspace-core/contracts/misc/ParaSpaceOracle.sol#L114-L136
File: /paraspace-core/contracts/protocol/libraries/logic/GenericLogic.sol#10535function_getAssetPrice(addressoracle,addresscurrentReserveAddress)536internal537view538returns(uint256)539      {540@>returnIPriceOracleGetter(oracle).getAssetPrice(currentReserveAddress);541:     }
https://github.com/code-423n4/2022-11-paraspace/blob/c6820a279c64a299a783955749fdc977de8f0449/paraspace-core/contracts/protocol/libraries/logic/GenericLogic.sol#L535-L541
File: /paraspace-core/contracts/protocol/libraries/logic/GenericLogic.sol:_getUserBalanceForERC721()  #11388@>uint256assetPrice=_getAssetPrice(389params.oracle,390vars.currentReserveAddress391);392totalValue=393ICollateralizableERC721(vars.xTokenAddress)394.collateralizedBalanceOf(params.user) *395assetPrice;396:         }
https://github.com/code-423n4/2022-11-paraspace/blob/c6820a279c64a299a783955749fdc977de8f0449/paraspace-core/contracts/protocol/libraries/logic/GenericLogic.sol#L388-L396
File: /paraspace-core/contracts/protocol/libraries/logic/GenericLogic.sol:calculateUserAccountData()  #12214vars215.userBalanceInBaseCurrency=_getUserBalanceForERC721(216params,217vars218:                         );
https://github.com/code-423n4/2022-11-paraspace/blob/c6820a279c64a299a783955749fdc977de8f0449/paraspace-core/contracts/protocol/libraries/logic/GenericLogic.sol#L214-L218
File: /paraspace-core/contracts/protocol/libraries/logic/LiquidationLogic.sol#13286functionexecuteLiquidateERC721(287mapping(address=>DataTypes.ReserveData)storagereservesData,288mapping(uint256=>address)storagereservesList,289mapping(address=>DataTypes.UserConfigurationMap)storageusersConfig,290DataTypes.ExecuteLiquidateParamsmemoryparams291      )externalreturns(uint256) {292ExecuteLiquidateLocalVarsmemoryvars;...311(312vars.userGlobalCollateral,313,314vars.userGlobalDebt,//in base currency315,316,317,318,319,320vars.healthFactor,321322@>       ) =GenericLogic.calculateUserAccountData(323reservesData,324reservesList,325DataTypes.CalculateUserAccountDataParams({326userConfig:userConfig,327reservesCount:params.reservesCount,328user:params.borrower,329oracle:params.priceOracle330})331:         );
https://github.com/code-423n4/2022-11-paraspace/blob/c6820a279c64a299a783955749fdc977de8f0449/paraspace-core/contracts/protocol/libraries/logic/LiquidationLogic.sol#L286-L331
File: /paraspace-core/contracts/protocol/pool/PoolCore.sol#14457/// @inheritdoc IPoolCore458functionliquidateERC721(459addresscollateralAsset,460addressborrower,461uint256collateralTokenId,462uint256maxLiquidationAmount,463boolreceiveNToken464      )externalpayablevirtualoverridenonReentrant{465DataTypes.PoolStoragestorageps=poolStorage();466467@>LiquidationLogic.executeLiquidateERC721(468ps._reserves,469ps._reservesList,470:ps._usersConfig,
https://github.com/code-423n4/2022-11-paraspace/blob/c6820a279c64a299a783955749fdc977de8f0449/paraspace-core/contracts/protocol/pool/PoolCore.sol#L457-L470
A person close to liquidation can remove all feeders, giving themselves a free option on whether the extra time it takes for the admins to resolve the issue, is enough time for their position to go back into the green. Alternatively, a competitor can analyze what price most liquidations will occur at (based on on-chain data about every user’s account health), and can time the removal of feeders for maximum effect. Note that even if the admins re-add the feeders, the malicious user can just remove them again.
Recommended Mitigation Steps
Add theonlyRole(DEFAULT_ADMIN_ROLE)modifier toremoveFeeder().
yubo-ruan (Paraspace) confirmed via duplicate issue#55