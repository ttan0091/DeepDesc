[H-02]UniswapV2PriceOracle.solcurrentCumulativePrices()will revert whenpriceCumulativeaddition overflow
Submitted by WatchPug
UniswapV2PriceOracle.sol#L62
(uintprice0Cumulative,uintprice1Cumulative,uint32blockTimestamp) =address(pair).currentCumulativePrices();
Because the Solidity version used by the current implementation ofUniswapV2OracleLibrary.solis>=0.8.7, and there are some breaking changes in Solidity v0.8.0:
Arithmetic operations revert on underflow and overflow.
Ref:https://docs.soliditylang.org/en/v0.8.13/080-breaking-changes.html#silent-changes-of-the-semantics
While inUniswapV2OracleLibrary.sol, subtraction overflow is desired atblockTimestamp - blockTimestampLastincurrentCumulativePrices():
https://github.com/Uniswap/v2-periphery/blob/master/contracts/libraries/UniswapV2OracleLibrary.sol#L25-L33
if(blockTimestampLast!=blockTimestamp) {// subtraction overflow is desireduint32timeElapsed=blockTimestamp-blockTimestampLast;// addition overflow is desired// counterfactualprice0Cumulative+=uint(FixedPoint.fraction(reserve1,reserve0)._x) *timeElapsed;// counterfactualprice1Cumulative+=uint(FixedPoint.fraction(reserve0,reserve1)._x) *timeElapsed;}
In another word,Uniswap/v2-periphery/contracts/libraries/UniswapV2OracleLibraryonly works at solidity <0.8.0.
As a result, whenprice0Cumulativeorprice1Cumulativeis big enough,currentCumulativePriceswill revert due to overflow.
Impact
Since the overflow is desired in the original version, and itâ€™s broken because of using Solidity version >0.8. TheUniswapV2PriceOraclecontract will break when the desired overflow happens, and further breaks other parts of the system that relies onUniswapV2PriceOracle.
Recommended Mitigation Steps
Note: this recommended fix requires a fork of the library contract provided by Uniswap.
Change to:
if(blockTimestampLast!=blockTimestamp) {unchecked{// subtraction overflow is desireduint32timeElapsed=blockTimestamp-blockTimestampLast;// addition overflow is desired// counterfactualprice0Cumulative+=uint(FixedPoint.fraction(reserve1,reserve0)._x) *timeElapsed;// counterfactualprice1Cumulative+=uint(FixedPoint.fraction(reserve0,reserve1)._x) *timeElapsed;}}
jn-lp (Phuture Finance) confirmed and resolved