[H-02] Due to missing checks on minimum gas passed through LayerZero, executions can fail on the destination chain
Submitted byiamandreiski, also found byNPCsCorp,EV_om, windhustler (1,2), andnuthan2x
https://github.com/decentxyz/decent-bridge/blob/7f90fd4489551b69c20d11eeecb17a3f564afb18/src/DecentEthRouter.sol#L148-L194
https://github.com/decentxyz/decent-bridge/blob/7f90fd4489551b69c20d11eeecb17a3f564afb18/src/DecentEthRouter.sol#L80-L111
In LayerZero, the destination chain’s function call requires a specific gas amount; otherwise, it will revert with an out-of-gas exception. It falls under the responsibility of the User Application to ensure that appropriate limits are established. These limits guide relayers in specifying the correct gas amount on the source chain, preventing users from inputting insufficient values for gas.
The contract logic inDecentEthRouter, assumes that a user will first get their estimated fees throughestimateSendAndCallFee()and pass it as an argument in eitherbridge()orbridgeWithPayload()to be added to the calculation together with the hardcodedGAS_FOR_RELAYso that it can be passed as the adapter params whenCommonOFT.LzCallParamsis called, although this is not enforced and is left on the user’s responsibility.
A user can pass an arbitrary value as the_dstGasForCallargument to be added to the hardcodedGAS_FOR_RELAYfee, thus sending less gas than required which can lead to out-of-gas exceptions.
Once the message is received by destination, the message is considered delivered (transitioning from INFLIGHT to either SUCCESS or STORED), even though it threw an out-of-gas error.
Any uncaught errors/exceptions (including out-of-gas) will cause the message to transition into STORED. A STORED message will block the delivery of any future message from source to all destination on the same destination chain and can be retried until the message becomes SUCCESS.
As per:https://layerzero.gitbook.io/docs/faq/messaging-properties
Proof of Concept
According to the LayerZero integration checklist:https://layerzero.gitbook.io/docs/troubleshooting/layerzero-integration-checklist
LayerZero recommends a 200,000 amount of gas to be enough for most chains and is set as default.
“200k for OFT for all EVMs except Arbitrum is enough. For Arbitrum, set as 2M.”
In the DecentEthRouter, theGAS_FOR_RELAYis hardcoded at 100,000.
uint256 GAS_FOR_RELAY = 100000;uint256 gasAmount = GAS_FOR_RELAY + _dstGasForCall;
The contract logic assumes that a user would willingly first call theestimateSendAndCallFeeto get thenativeFee+ thezroFeefomdcntEth.estimateSendAndCallFeeand then pass the addition of the nativeFee + zeroFee as the_dstGasForCallargument when callingbridge()orbridgeWithPayload():
function bridgeWithPayload(uint16 _dstChainId,address _toAddress,uint _amount,bool deliverEth,uint64 _dstGasForCall,bytes memory additionalPayload) public payable {return_bridgeWithPayload(MT_ETH_TRANSFER_WITH_PAYLOAD,_dstChainId,_toAddress,_amount,_dstGasForCall,additionalPayload,deliverEth);}
Once the internal_bridgeWithPayloadfunction is called:
bytes32 destinationBridge,bytes memory adapterParams,bytes memory payload) = _getCallParams(msgType,_toAddress,_dstChainId,_dstGasForCall,deliverEth,additionalPayload);ICommonOFT.LzCallParams memory callParams = ICommonOFT.LzCallParams({refundAddress: payable(msg.sender),zroPaymentAddress: address(0x0),adapterParams: adapterParams});
It calls the_getCallParamsfunction which will calculate and pack the needed arguments to be passed as the LayerZero call params, without performing any checks whether the total gas amount is sufficient or that the user passed argument_dstGasForCallis greater than the total of(uint nativeFee, uint zroFee) = dcntEth.estimateSendAndCallFee.
function _getCallParams(uint8 msgType,address _toAddress,uint16 _dstChainId,uint64 _dstGasForCall,bool deliverEth,bytes memory additionalPayload)privateviewreturns (bytes32 destBridge,bytes memory adapterParams,bytes memory payload){uint256 GAS_FOR_RELAY = 100000;uint256 gasAmount = GAS_FOR_RELAY + _dstGasForCall;adapterParams = abi.encodePacked(PT_SEND_AND_CALL, gasAmount);
This can lead to failed messages on the destination. Which would yield the above-message results of a possible blockage in the communication with the source and destination.
A malicious or an unbeknownst user can pass 1,000 as an argument for_dstGasForCall, making the total gas forwarded to theLzCallParams()101,000 which will make a certain type of calls fail (depending on payload), and especially calls made on Arbitrum.
Recommended Mitigation Steps
Validate/require that the_dstGasForCallparameter is greater thannativeFee+zroFeeor re-engineer the architecture to make theestimateSendAndCallFee()function a mandatory step of the process.
0xsomeone (Judge) increased severity to High and commented:
This and all duplicate exhibits highlight that theGAS_FOR_RELAYis a hard-coded value and that the overall gas supplied for a cross-chain call can be controlled by a user.A severity of high is appropriate given that the cross-chain LayerZero channel will be permanently blocked.None of the submissions have correctly proposed a solution as a mere adjustment of theGAS_FOR_RELAYis insufficient. TheDecentBridgeExecutorpermits arbitrary calls to be made that can force the transaction to run out-of-gas regardless of the gas limit imposed. This is properly defined in#697.A valid solution for this problem would be a combination of a minimum enforced at the transaction level and a maximum gas consumed enforced at the executor level, ensuring that the gas remainderafter the executor performs the arbitrary callis enough to store the failed message. This can be achieved by performing a subtraction from thegasleftvalue (hard to implement as it would need to take into account the cost ofkeccak256encoding the data payload) or by enforcing a fixed value that should be much less than the minimum imposed on the source chain.This submission was selected as the best given that it illustrates in-depth knowledge of the LayerZero system states and correctly highlights that a user can also maliciously block the channel.
wkantaros (Decent) acknowledged via duplicate #212, but disagreed with severity and commented:
This vulnerability is not a concern in Layer Zero v2. Decent designed the contracts expecting to use LZ v2 and have since implemented this upgrade.