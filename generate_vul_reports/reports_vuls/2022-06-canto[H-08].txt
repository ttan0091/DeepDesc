[H-08] Transferring any amount of the underlying token to the CNote contract will make the contract functions unusable
Submitted by Tutturu, also found by 0x52, hyh, p4st13r4, and WatchPug
The contract expects the balance of the underlying token to == 0 at all points when calling the contract functions by requiring getCashPrior() == 0, which checks token.balanceOf(address(this)) where token is the underlying asset.
An attacker can transfer any amount of the underlying asset directly to the contract and make all of the functions requiring getCashPrior() == 0 to revert.
Proof of Concept
CNote.sol#L43CNote.sol#L114CNote.sol#198CNote.sol#310
Attacker gets any balance of Note (amount = 1 token)Attacker transfers the token to CNote which uses Note as an underlying asset, by calling note.transfer(CNoteAddress, amount). The function is available since Note inherits from ERC20Any calls to CNote functions now revert due to getCashPrior() not being equal to 0
Recommended Mitigation Steps
Instead of checking the underlying token balance via balanceOf(address(this)) the contract could hold an internal balance of the token, mitigating the impact of tokens being forcefully transferred to the contract.
tkkwon1998 (Canto) confirmed
Alex the Entreprenerd (judge) commented:
The warden has shown how, via a simple transfer of 1 wei of token, the invariant ofgetCashPrior() == 0can be broken, bricking the functionality.Because of:the simplicity of the exploitThe impact being inability to interact with the contractA protocol invariant is brokenI agree with High Severity.Mitigation would require using delta balances and perhaps re-thinking the need for those intermediary checks.