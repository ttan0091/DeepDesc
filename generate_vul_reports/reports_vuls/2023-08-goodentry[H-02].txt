[H-02] Unused funds are not returned and not counted inGeVault
Submitted byJeiwan, also found byJeiwan,LokiThe5th,osmanozdemir1,said, andHChang26
Users can lose a portion of their deposited funds if some of their funds haven’t been deposited to the underlying Uniswap pools. There’s always a chance of such event since Uniswap pools take balanced token amounts when liquidity is added butGeVaultdoesn’t pre-compute balanced amounts. As a result, depositing and withdrawing can result in a partial loss of funds.
Proof of Concept
TheGeVault.deposit()function is used by users to deposits funds into ticks and underlying Uniswap pools. The function takes funds from the caller and callsrebalance()to distribute the funds among the ticks. TheGeVault.rebalance()function first removes liquidity from all ticks and then deposits the removed assets plus the user assets back in to the ticks:
functionrebalance()public{require(poolMatchesOracle(),"GEV: Oracle Error");removeFromAllTicks();if(isEnabled)deployAssets();}
TheGeVault.deployAssets()function calls theGeVault.depositAndStash()function, which actually deposits tokens into aTokenisableRangecontract by calling theTokenisableRange.deposit(). The function deposits tokens into a Uniswap V3 pool and returns unspent tokens to the caller:
(uint128newLiquidity,uint256added0,uint256added1) =POS_MGR.increaseLiquidity(...);..._mint(msg.sender,lpAmt);TOKEN0.token.safeTransfer(msg.sender,n0-added0);TOKEN1.token.safeTransfer(msg.sender,n1-added1);
However, theGeVault.depositAndStash()function doesn’t handle the returned unspent tokens. Since Uniswap V3 pools take balanced token amounts (respective to the current pool price) and since the funds deposited into ticks are not balanced (deployAssets()splits token amounts in halves), there’s always a chance that theTokenisableRange.deposit()function won’t consume all specified tokens and will return some of them to theGeVaultcontract. However,GeVaultwon’t return the unused tokens to the depositor.
Moreover, the contract won’t include them in the TVL calculation:
TheGeVault.getTVL()function computes the total LP token balance of the contract (getTickBalance(k)) and the price of each LP token (t.latestAnswer()), to compute the total value of the vault.TheGeVault.getTickBalance()function won’t count the unused tokens because it only returns the amount of LP tokens deposited into the lending pool. I.e. only the liquidity deposited to Uniswap pools is counted.TheTokenisableRange.latestAnswer()function computes the total value (TokenisableRange.sol#L355) of the liquidity deposited into the Uniswap pool (TokenisableRange.sol#L338). Thus, the unused tokens won’t be counted here as well.TheGeVault.getTVL()function is used to compute the amount of tokens to return to the depositor during withdrawal.
Thus, the unused tokens will be locked in the contract until they’re deposited into ticks. However, rebalancing and depositing of tokens can result in new unused tokens that won’t be counted in the TVL.
Recommended Mitigation Steps
In theGeVault.deposit()function, consider returning unspent tokens to the depositor. Extra testing is needed to guarantee that rebalancing doesn’t result in unspent tokens, or, alternatively, such tokens could be counted in a storage variable and excluded from the balance of unspent tokens during depositing.
Alternatively, consider countingGeVault’s token balances in thegetTVL()function. This won’t require returning unspent tokens during depositing and will allow depositors to withdraw their entire funds.
Keref (Good Entry) confirmed and commented:
Seeupdate.
Good Entry Mitigated:
Take unused funds into account for TVL.PR:https://github.com/GoodEntry-io/ge/commit/a8ba6492b19154c72596086f5531f6821b4a46a2
Status:Mitigation confirmed. Full details in reports fromkutugu,xuwinnieand3docSec.