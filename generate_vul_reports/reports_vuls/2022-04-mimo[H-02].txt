[H-02] Fund loss or theft by attacker with creating a flash loan and setting SuperVault as receiver so executeOperation() will be get called by lendingPool but with attackers specified params
Submitted by unforgiven, also found by Picodes
According to Aave documentation, when requesting flash-loan, it’s possible to specify areceiver, so functionexecuteOperation()of thatreceiverwill be called bylendingPool.https://docs.aave.com/developers/v/2.0/guides/flash-loansIn theSuperVaultthere is no check to prevent this attack so attacker can use this and performgriefing attackand make miner contract lose all its funds. or he can create specifically craftedparamsso whenexecuteOperation()is called bylendingPool, attacker could steal vault’s user funds.
Proof of Concept
To exploit this attacker will do this steps:
will callAave lendingPoolto get a flash-loan and specifySuperVaultasreceiverof flash-loan. and also create a specificparamsthat invokeOperation.REBALANCEaction to change user vault’s collateral.lendingPoolwill callexecuteOperation()ofSuperVaultwith attacker specified data.executeOperation()will checkmsg.senderand will process the function call which will cause some dummy exchanges that will cost user exchange fee and flash-loan fee.attacker will repeat this attack until user losses all his funds.
function executeOperation(address[] calldata assets,uint256[] calldata amounts,uint256[] calldata premiums,address,bytes calldata params) external returns (bool) {require(msg.sender == address(lendingPool), "SV002");(Operation operation, bytes memory operationParams) = abi.decode(params, (Operation, bytes));IERC20 asset = IERC20(assets[0]);uint256 flashloanRepayAmount = amounts[0] + premiums[0];if (operation == Operation.LEVERAGE) {leverageOperation(asset, flashloanRepayAmount, operationParams);}if (operation == Operation.REBALANCE) {rebalanceOperation(asset, amounts[0], flashloanRepayAmount, operationParams);}if (operation == Operation.EMPTY) {emptyVaultOperation(asset, amounts[0], flashloanRepayAmount, operationParams);}asset.approve(address(lendingPool), flashloanRepayAmount);return true;}
To steal user fund inSupperVaultattacker needs more steps. in all these actions (Operation.REBALANCE,Operation.LEVERAGE,Operation.EMPTY) contract will callaggregatorSwap()with data that are controlled by attacker.
function aggregatorSwap(uint256 dexIndex,IERC20 token,uint256 amount,bytes memory dexTxData) internal {(address proxy, address router) = _dexAP.dexMapping(dexIndex);require(proxy != address(0) && router != address(0), "SV201");token.approve(proxy, amount);router.call(dexTxData);}
Attacker can put special data indexTxDatathat make contract to do an exchange with bad price. To do this, attacker will create a smart contract that will do this steps:
manipulate price in exchange with flash loan.make a call toexecuteOperation()byAave flash-loanwithreceiverand specificparamsso thatSuperVaultwill make calls to manipulated exchange for exchanging.do the reverse of #1 and pay the flash-loan and steal the user fund.
The details are:
Attacker can manipulate swapping pool price with flash-loan, then Attacker will create specificparamsand perform steps 1 to 4. so contract will try to exchange tokens and because of attacker price manipulation and specificdexTxData, contract will have bad deals.
After that, attacker can reverse the process of swap manipulation and get his  flash-loan tokens and some ofSuperVaultfunds and. then pay the flash-loan.
Tools Used
VIM
Recommended Mitigation Steps
There should be some state variable which stores the fact thatSuperVaultimitated flash-loan.
When contract tries to start flash-loan, it sets theisFlashtoTrueandexecuteOperation()only accepts calls ifisFlashisTrue. and after the flash loan code will setisFlashtoFalse.
m19 (Mimo DeFi) confirmed and commented:
We definitely confirm this issue and intend to fix it.