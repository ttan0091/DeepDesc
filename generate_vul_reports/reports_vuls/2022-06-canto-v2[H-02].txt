[H-02] Deny of service inCNote.doTransferOut
Submitted by 0x1f8b, also found by Lambda
https://github.dev/Plex-Engineer/lending-market-v2/blob/2646a7676b721db8a7754bf5503dcd712eab2f8a/contracts/CNote.sol#L148
TheCNote.doTransferOutmethod is susceptible to denial of service.
Proof of Concept
The logic of thedoTransferOutmethod inCNoteis as follows:
functiondoTransferOut(addresspayableto,uintamount)virtualoverrideinternal{require(address(_accountant) !=address(0));EIP20Interfacetoken=EIP20Interface(underlying);if(to!=address(_accountant)) {uinterr=_accountant.supplyMarket(amount);if(err!=0) {revertAccountantRedeemError(amount); }}token.transfer(to,amount);boolsuccess;assembly{switchreturndatasize()case0{ success :=not(0) }case32{returndatacopy(0,0,32)success :=mload(0)}default{revert(0,0) }}require(success,"TOKEN_TRANSFER_OUT_FAILED");require(token.balanceOf(address(this)) ==0,"cNote::doTransferOut: TransferOut Failed");// <-- ERROR}
ThedoTransferOutmethod receives anamountwhich is transferred toto, after it the balance of the contract token is checked to be equal to zero or the transaction will be reverted.
In the following cases a denial of service will occur:
In the case that is used anamountdifferent than the balance, the transaction will be reverted.In the case that an attacker front-runs the transaction and sends one token more than the established by the_accountant.In case of increasing balance tokens likemDaithat constantly change their balance, the established by the_accountantwill be different when the transaction is persisted.
Recommended Mitigation Steps
Use balance differences instead of the 0 check.
nivasan1 (Canto) confirmed
Alex the Entreprenerd (judge) commented:
The warden has shown how, anyone, via a simple transfer ofunderlyingcan deny the functionality ofdoTransferOut.Because the function is used in multiple functions inherited fromCToken, and the griefing can be easily run by anyone, I believe High Severity to be appropriate.