[H-04] Vader TWAP averages wrong
Submitted by cmichel
The vader price inLiquidityBasedTWAP.getVaderPriceis computed using thepastLiquidityWeightsandpastTotalLiquidityWeightreturn values of thesyncVaderPrice.
ThesyncVaderPricefunction does not initialize all weights and the total liquidity weight does not equal the sum of the individual weights because it skips initializing the pair with the previous data if the TWAP update window has not been reached yet:
functionsyncVaderPrice()publicoverridereturns(uint256[]memorypastLiquidityWeights,uint256pastTotalLiquidityWeight){uint256_totalLiquidityWeight;uint256totalPairs=vaderPairs.length;pastLiquidityWeights=newuint256[](totalPairs);pastTotalLiquidityWeight=totalLiquidityWeight[uint256(Paths.VADER)];for(uint256i;i<totalPairs; ++i) {IUniswapV2Pairpair=vaderPairs[i];ExchangePairstoragepairData=twapData[address(pair)];// @audit-info lastMeasurement is set in _updateVaderPrice to block.timestampuint256timeElapsed=block.timestamp-pairData.lastMeasurement;// @audit-info update period depends on pair// @audit-issue if update period not reached => does not initialize pastLiquidityWeights[i]if(timeElapsed<pairData.updatePeriod)continue;uint256pastLiquidityEvaluation=pairData.pastLiquidityEvaluation;uint256currentLiquidityEvaluation=_updateVaderPrice(pair,pairData,timeElapsed);pastLiquidityWeights[i] =pastLiquidityEvaluation;pairData.pastLiquidityEvaluation=currentLiquidityEvaluation;_totalLiquidityWeight+=currentLiquidityEvaluation;}totalLiquidityWeight[uint256(Paths.VADER)] =_totalLiquidityWeight;}
POC
This bug leads to several different issues. A big one is that an attacker can break the price functions and make them revert.
Observe what happens if an attacker callssyncVaderPricetwice in the same block:
The first time any pairs that need to be updated are updatedOn the second call_totalLiquidityWeightis initialized to zero and all pairs have already been updated and thus skipped._totalLiquidityWeightnever increases and the storage variabletotalLiquidityWeight[uint256(Paths.VADER)] = _totalLiquidityWeight = 0;is set to zero.DoS because calls togetStaleVaderPrice/getVaderPricewill revert in_calculateVaderPricewhich divides bytotalLiquidityWeight = 0.
Attacker keeps double-callingsyncVaderPriceevery time an update window of one of the pairs becomes eligible to be updated.
Impact
This bug leads to using wrong averaging and ignoring entire pairs due to their weights being initialized to zero and never being changed if the update window is not met.
This in turn makes it easier to manipulate the price as potentially only a single pair needs to be price-manipulated.
Itâ€™s also possible to always set thetotalLiquidityWeightto zero by callingsyncVaderPricetwice which in turn reverts all transactions making use of the price because of a division by zero in_caluclateVaderPrice.
An attacker can break theUSDV.mintminting forever and any router calls toVaderReserve.reimburseImpermanentLossalso fail as they perform a call to the reverting price function.
Recommended Mitigation Steps
Even iftimeElapsed < pairData.updatePeriod, the old pair weight should still contribute to the total liquidity weight and be set inpastLiquidityWeights.
Move the_totalLiquidityWeight += currentLiquidityEvaluationand thepastLiquidityWeights[i] = pastLiquidityEvaluationassignments before thecontinue.
SamSteinGG (Vader) confirmed