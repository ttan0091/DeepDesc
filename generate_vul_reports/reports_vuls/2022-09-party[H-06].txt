[H-06]  A majority attack can steal precious NFT from the party by crafting and chaining two proposals
Submitted by Trust, also found by ladboy233 and Lambda
https://github.com/PartyDAO/party-contracts-c4/blob/3896577b8f0fa16cba129dc2867aba786b730c1b/contracts/proposals/ProposalExecutionEngine.sol#L116
https://github.com/PartyDAO/party-contracts-c4/blob/3896577b8f0fa16cba129dc2867aba786b730c1b/contracts/proposals/FractionalizeProposal.sol#L54-L62
Description
The PartyGovernance system has many defenses in place to protect against a majority holder stealing the NFT. Majority cannot exfiltrate the ETH gained from selling precious NFT via any proposal, and it’s impossible to sell NFT for any asset except ETH. If the party were to be compensated via an ERC20 token, majority could pass an ArbitraryCallsProposal to transfer these tokens to an attacker wallet. Unfortunately, FractionalizeProposal is vulnerable to this attack. Attackers could pass two proposals and wait for them to be ready for execution. Firstly, a FractionalizeProposal to fractionalize the NFT and mint totalVotingPower amount of ERC20 tokens of the created vault. Secondly, an ArbitraryCallsProposal to transfer the entire ERC20 token supply to an attacker address. At this point, attacker can callvault.redeem()to burn the outstanding token supply and receive the NFT back.
Impact
A 51% majority could steal the precious NFT from the party and leave it empty.
Proof of Concept
The only non-trivial component of this attack is that the created vault, whose tokens we wish to transfer out, has an undetermined address untilVAULT_FACTORY.mint()is called, which creates it. The opcode which creates the vault contract is CREATE, which calculates the address withkeccak256(VAULT_FACTORY, nonce). Nonce will keep changing while new, unrelated NFTs are fractionalized. The attack needs to prepare both FractionalizedProposal and ArbitraryCallsProposal ahead of time, so that they could be chained immediately, meaning there would be no time for other members to calldistribute()on the party, which would store the fractionalized tokens safely in the distributor.
In order to solve this chicken and the egg problem, we will use a technique taken from traditional low-level exploitation called heap feng shui.
Firstly, calculate off-chain, the rate new NFTs are fractionalized, and multiple by a safety factor (like 1.2X), and multiply again by the proposal execution delay. This number, added to the currentVAULT_FACTORYnonce, will be ourtarget_nonce. Calculatetarget_vault = keccak256(VAULT_FACTORY, target_nonce),before_target_vault = keccak256(VAULT_FACTORY, target_nonce-1)
Firstly, we will create a contract which has an attack function that:
Loop while beforetargetvault != createdvault:
• Mint new dummy attackerNFT
• createdvault = VAULTFACTORY.mint(attacker_NFT…)Call execute()on the FractionalizedProposal  // We will feed the execute() parameters to the contract in a separate contract setter. Note that this is guaranteed to create target_vault on the correct address.Call execute()on the ArbitraryCallsProposal
Then, we propose the two proposals:
Propose a FractionalizedProposal, with any list price and the precious NFT as parameterPropose an ArbitraryCallsProposal, with target = target_vault, data = transfer(ATTACKER, totalVotingPower)
Then, we set theexecute()parameters passed in step 2 and 3 of the attack contract using the proposalID allocated for them.
Then, we wait for execution delay to finish.
Finally, run theattack()function prepared earlier. This will increment theVAULT_FACTORYnonce until it is the one we count on during the ArbitraryCallsProposal. Pass enough gas to be able to burn enough nonces.
At this point, attacker has all the vault tokens, so he may call vault.redeem() and receive the precious NFT.
Recommended Mitigation Steps
Enforce a minimum cooldown between proposals. This will mitigate additional weaknesses of the proposal structure. Here, this will give users the opportunity to calldistribute()to put the vault tokens safe in distributor.A specific fix here would be to calldistribute()at the end of FractionalizeProposal so that there is no window to steal the funds.
merklejerk (PartyDAO) confirmed and commented:
Will fix by creating an automatic distribution at the end of a successful fractionalize proposal.
HardlyDifficult (judge) commented:
Agree with High risk - this scenario allows a majority owner to steal from others in the party.
0xble (PartyDAO) resolved:
Resolved:https://github.com/PartyDAO/partybidV2/pull/131