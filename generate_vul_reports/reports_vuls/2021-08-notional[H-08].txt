[H-08] DOS by Frontrunning NoteERC20initialize()Function
Submitted by leastwood
Thescripts/folder outlines a number of deployment scripts used by the Notional team. Some of the contracts deployed utilize the ERC1967 upgradeable proxy standard. This standard involves first deploying an implementation contract and later a proxy contract which uses the implementation contract as its logic.
When users make calls to the proxy contract, the proxy contract will delegate call to the underlying implementation contract.NoteERC20.solandRouter.solboth implement aninitialize()function which aims to replace the role of theconstructor()when deploying proxy contracts. It is important that these proxy contracts are deployed and initialized in the same transaction to avoid any malicious front-running.
However,scripts/deployment.pydoes not follow this pattern when deployingNoteERC20.sol’s proxy contract. As a result, a malicious attacker could monitor the Ethereum blockchain for bytecode that matches theNoteERC20contract and front-run theinitialize()transaction to gain ownership of the contract. This can be repeated as a Denial Of Service (DOS) type of attack, effectively preventing Notional’s contract deployment, leading to unrecoverable gas expenses. Seedeployment.pyL44-L60, anddeploy_governance.pyL71-L105.
As theGovernanceAlpha.solandNoteERC20.solare co-dependent contracts in terms of deployment, it won’t be possible to deploy the governance contract before deploying and initializing the token contract. Therefore, it would be worthwhile to ensure theNoteERC20.solproxy contract is deployed and initialized in the same transaction, or ensure theinitialize()function is callable only by the deployer of theNoteERC20.solcontract. This could be set in the proxy contractsconstructor().
jeffywu (Notional) confirmed