[H-01]YaxisVaultAdapter.sol#withdraw()will most certainly fail
Submitted by WatchPug
The actual token withdrawn fromvault.withdraw()will most certainly less than the_amount, due to precision loss in_tokensToShares()andvault.withdraw().
As a result,IDetailedERC20(_token).safeTransfer(_recipient, _amount)will revert due to insufficant balance.
Based on the simulation we ran, it will fail99.99%of the time unless thepps == 1e18.
https://github.com/code-423n4/2021-11-yaxis/blob/146febcb61ae7fe20b0920849c4f4bbe111c6ba7/contracts/v3/alchemix/adapters/YaxisVaultAdapter.sol#L68-L72
functionwithdraw(address_recipient,uint256_amount)externaloverrideonlyAdmin{vault.withdraw(_tokensToShares(_amount));address_token=vault.getToken();IDetailedERC20(_token).safeTransfer(_recipient,_amount);}
https://github.com/code-423n4/2021-11-yaxis/blob/146febcb61ae7fe20b0920849c4f4bbe111c6ba7/contracts/v3/Vault.sol#L181-L187
functionwithdraw(uint256_shares)publicoverride{uint256_amount= (balance().mul(_shares)).div(IERC20(address(vaultToken)).totalSupply());
Recommendation
Change to:
functionwithdraw(address_recipient,uint256_amount)externaloverrideonlyAdmin{address_token=vault.getToken();uint256beforeBalance=IDetailedERC20(_token).balanceOf(address(this));vault.withdraw(_tokensToShares(_amount));IDetailedERC20(_token).safeTransfer(_recipient,IDetailedERC20(_token).balanceOf(address(this)) -beforeBalance);}
Xuefeng-Zhu (yAxis) confirmed