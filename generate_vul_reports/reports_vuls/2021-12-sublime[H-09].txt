[H-09]PriceOracleDoes Not Filter Price Feed Outliers
Submitted by leastwood
Impact
If for whatever reason the Chainlink oracle returns a malformed price due to oracle manipulation or a malfunctioned price, the result will be passed onto users, causing unintended consequences as a result.
In the same time it’s possible to construct mitigation mechanics for such cases, so user economics be affected by sustainable price movements only. As price outrages provide a substantial attack surface for the project it’s worth adding some complexity to the implementation.
Proof of Concept
https://github.com/code-423n4/2021-12-sublime/blob/main/contracts/PriceOracle.sol#L149-L161
functiongetLatestPrice(addressnum,addressden)externalviewoverridereturns(uint256,uint256) {uint256_price;uint256_decimals;(_price,_decimals) =getChainlinkLatestPrice(num,den);if(_decimals!=0) {return(_price,_decimals);}(_price,_decimals) =getUniswapLatestPrice(num,den);if(_decimals!=0) {return(_price,_decimals);}revert("PriceOracle::getLatestPrice - Price Feed doesn't exist");}
The above code outlines how prices are utilised regardless of their actual value (assuming it is always a non-zero value).
Recommended Mitigation Steps
Consider querying both the Chainlink oracle and Uniswap pool for latest prices, ensuring that these two values are within some upper/lower bounds of each other. It may also be useful to track historic values and ensure that there are no sharp changes in price. However, the first option provides a level of simplicity as UniswapV3’s TWAP implementation is incredibly resistant to flash loan attacks. Hence, the main issue to address is a malfunctioning Chainlink oracle.
ritik99 (Sublime) disputed:
The described suggestion is fairly complex - besides the increase in code complexity, we’d also have to decide the bounds within which the Uniswap and Chainlink oracles should report prices that won’t be trivial. We’ve also noted in theassumptionssection of our contest repo that oracles are assumed to be accurate
0xean (judge) commented:
” We expect these feeds to be fairly reliable.” - Based on this quote, I am going to leave this open at the current risk level.  These are valid changes that could significantly reduce the risk of the implementation and unintended liquidations.Fairly reliable != 100% reliable