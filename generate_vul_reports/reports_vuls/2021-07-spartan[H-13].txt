[H-13] Flash loan manipulation ongetPoolShareWeightofUtils
Submitted by shw
ThegetPoolShareWeightfunction returns a user’s pool share weight by calculating how many SPARTAN the user’s LP tokens account for. However, this approach is vulnerable to flash loan manipulation since an attacker can swap a large number of TOKEN to SPARTAN to increase the number of SPARTAN in the pool, thus effectively increasing his pool share weight.
According to the implementation ofgetPoolShareWeight,a user’s pool share weight is calculated byuints * baseAmount / totalSupply, whereuintsis the number of user’s LP tokens,totalSupplyis the total supply of LP tokens, andbaseAmountis the number of SPARTAN in the pool. Thus, a user’s pool share weight is proportional to the number of SPARTAN in the pool. Consider the following attack scenario:
Supposing the attacked pool is SPARTAN-WBNB. The attacker first prepares some LP tokens (WBNB-SPP) by adding liquidity to the pool.The attacker then swaps a large number of WBNB to SPARTAN, which increases the pool’sbaseAmount. He could split his trade into small amounts to reduce slip-based fees.The attacker now wants to increase his weight in theDaoVault. He adds his LP tokens to the pool by calling thedepositfunction ofDao.Daothen callsdepositLPofDaoVault, causing the attacker’s weight to be recalculated. Due to the large proportion of SPARTAN in the pool, the attacker’s weight is artificially increased.With a higher member weight, the attacker can, for example, vote the current proposal with more votes than he should have or obtain more rewards when callingharvestof theDaocontract.The attacker then swaps back SPARTAN to WBNB and only loses the slip-based fees.
Referenced code:Utils.sol#L46-L50,Utils.sol#L70-L77,DaoVault.sol#L44-L56,Dao.sol#L201, andDao.sol#L570.
A possible mitigation is to record the current timestamp when a user’s weight in theDaoVaultorBondVaultis recalculated and force the new weight to take effect only after a certain period, e.g., a block time. This would prevent the attacker from launching the attack since there is typically no guarantee that he could arbitrage the WBNB back in the next block.
SamusElderg (Spartan) confirmed and disagreed with severity:
Recommended mitigation has been included in contributors ongoing discussions to make this more resistant to manipulation
ghoul-sol (judge) commented:
Keeping high risk because of impact