[H-59] The BigBang contract take more fees than it should
Submitted by0xRobocop, also found bymojito_auditor,KIntern_NA,xuwinnie, andrvierdiiev
The repay function in the BigBang contract is used for users to repay their loans. The mechanics of the function are simple:
Update the exchange rateAccrue the fees generatedCall internal function _repay
The internal function _repay handles the state changes regarding the user debt. Specifically, fees are taken by withdrawing all the user’s debt from yieldbox and burning the proportion that does not correspond to fees. The fees stay in the contract’s balance to later be taken by the penrose contract. The logic can be seen here:
function_repay(addressfrom,addressto,uint256part)internalreturns(uint256amount) {(totalBorrow,amount) =totalBorrow.sub(part,true);userBorrowPart[to] -=part;uint256toWithdraw= (amount-part);//acrrued// @audit-issue Takes more fees than it shoulduint256toBurn=amount-toWithdraw;yieldBox.withdraw(assetId,from,address(this),amount,0);//burn USDOif(toBurn>0) {IUSDOBase(address(asset)).burn(address(this),toBurn);}emitLogRepay(from,to,amount,part);}
The problem is that the function burns less than it should, hence, taking more fees than it should.
Proof of Concept
I will provide a symbolic proof and coded proof to illustrate the issue. To show the issue clearly we will assume that there is no opening fee, and that the yearly fee is of 10%. Hence, for the coded PoC it is important to change the values ofbigBangEthDebtRateandborrowOpeningFee:
// Penrose contractbigBangEthDebtRate=1e17;// BigBang contractborrowOpeningFee;
Symbolic
How much fees do the protocol should take?. The answer of this question can be represented in the following equation:
ProtocolFees = CurrentUserDebt - OriginalUserDebt
The fees accrued for the protocol is the difference of the current debt of the user and the original debt of the user. If we examine the implementation of the _repay function we found the next:
//uint256 amount;(totalBorrow,amount) =totalBorrow.sub(part,true);userBorrowPart[to] -=part;uint256toWithdraw= (amount-part);//acrrued// @audit-issue Takes more fees than it shoulduint256toBurn=amount-toWithdraw;yieldBox.withdraw(assetId,from,address(this),amount,0);//burn USDOif(toBurn>0) {IUSDOBase(address(asset)).burn(address(this),toBurn);}
The important variables are:
partrepresents the base part of the debt of the useramountis the elastic part that was paid givingpart, elastic means this is the real debt.
At the following line the contract takesamountwhich is the real user debt from yield box:
yieldBox.withdraw(assetId,from,address(this),amount,0);
Then it burns some tokens:
if(toBurn>0) {IUSDOBase(address(asset)).burn(address(this),toBurn);}
But howtoBurnis calculated?:
uint256toWithdraw= (amount-part);//acrrueduint256toBurn=amount-toWithdraw;
toBurnis justpart. Hence, the contract is computing the fees as:
ProtocolFees = amount - part. Rewriting this with the first equation terms will be:
ProtocolFees = CurrentDebt - part.
But it ispartequal toOriginalDebt?. Remember thatpartis not the actual debt, is just the part of the real debt to be paid, this can be found in a comment in the code:
elastic=Totaltokenamounttoberepayedbyborrowers,base=Totalpartsofthedebtheldbyborrowers.
So they are equal only for the first borrower, but for the others this wont be the case since the relation ofelasticandpartwont be 1:1 due to accrued fees, makingpart < OriginalDebt, and hence the protocol taking more fees. Let’s use some number to showcase it better:
TIME = 0First borrower A asks 1,000 units, state:part[A] = 1000total.part = 1000total.elastic = 1000TIME = 1 YEARpart[A] = 1000 --> no change from borrower Atotal.part = 1000 --> no change yettotal.elastic = 1100 --> fees accrued in one year 100 unitsSecond borrower B asks 1,000 units, state:part[B] = 909.09total.part = 1909.09total.elastic = 2100B part was computed as:1000 * 1000 / 1100 = 909.09TIME = 2 YEARFees are accrued, hence:total.elastic = 2100 * 1.1 = 2310.Hence the total fees accrued by the protocol are:2310 - 2000 = 310.These 310 are collected from A and B in the following proportions:A Fee = 210B Fee = 100Borrower B produced 100 units of fees, which makes sense, he asked for 1000 units at 10%/year.
When B repays its debt, he needs to repay 1,100 units. Then the contract burns the proportion that was real debt, the problem as stated above is that the function burns thepartand not the original debt, hence the contract will burn 909.09 units. Hence it took:
1100 - 909.09 = 190.91 units
The contract took 190.91 in fees rather than 100 units.
Coded PoC
Follow the next steps to run the coded PoC:
1.- Make the contract changes described at the beginning.2.- Add the following test undertest/bigBang.test.ts:
describe.only('borrow() & repay() check fees', ()=>{it('should borrow and repay check fees',async()=>{const{wethBigBangMarket,weth,wethAssetId,yieldBox,deployer,bar,usd0,__wethUsdcPrice,timeTravel,eoa1,} =awaitloadFixture(register);awaitweth.approve(yieldBox.address,ethers.constants.MaxUint256);awaityieldBox.setApprovalForAll(wethBigBangMarket.address,true);awaitweth.connect(eoa1).approve(yieldBox.address,ethers.constants.MaxUint256);awaityieldBox.connect(eoa1).setApprovalForAll(wethBigBangMarket.address,true);constwethMintVal=ethers.BigNumber.from((1e18).toString()).mul(10,);awaitweth.freeMint(wethMintVal);awaitweth.connect(eoa1).freeMint(wethMintVal);constvalShare=awaityieldBox.toShare(wethAssetId,wethMintVal,false,);awaityieldBox.depositAsset(wethAssetId,deployer.address,deployer.address,0,valShare,);awaitwethBigBangMarket.addCollateral(deployer.address,deployer.address,false,0,valShare,);awaityieldBox.connect(eoa1).depositAsset(wethAssetId,eoa1.address,eoa1.address,0,valShare,);awaitwethBigBangMarket.connect(eoa1).addCollateral(eoa1.address,eoa1.address,false,0,valShare);//borrowconstusdoBorrowVal=wethMintVal.mul(10).div(100).mul(__wethUsdcPrice.div((1e18).toString()));awaitwethBigBangMarket.borrow(deployer.address,deployer.address,usdoBorrowVal,);constuserBorrowPart=awaitwethBigBangMarket.userBorrowPart(deployer.address,);console.log('User A Borrow Part: '+userBorrowPart);timeTravel(365*86400);awaitwethBigBangMarket.connect(eoa1).borrow(eoa1.address,eoa1.address,usdoBorrowVal);timeTravel(365*86400);consteoa1BorrowPart=awaitwethBigBangMarket.userBorrowPart(eoa1.address,);console.log('User B Borrow Part: '+eoa1BorrowPart);constusd0Extra=ethers.BigNumber.from((1e18).toString()).mul(500);awaitusd0.mint(eoa1.address,usd0Extra);awaitusd0.connect(eoa1).approve(yieldBox.address,usd0Extra);awaityieldBox.connect(eoa1).depositAsset(awaitwethBigBangMarket.assetId(),eoa1.address,eoa1.address,usd0Extra,0,);constcontractusdoB1=awaitusd0.balanceOf(wethBigBangMarket.address,);console.log('Fees before repayment: '+contractusdoB1);// Repayment happensawaitwethBigBangMarket.connect(eoa1).repay(eoa1.address,eoa1.address,false,eoa1BorrowPart);constuserBorrowPartAfter=awaitwethBigBangMarket.userBorrowPart(eoa1.address,);// User paid all its debt.expect(userBorrowPartAfter.eq(0)).to.be.true;constcontractusdoB2=awaitusd0.balanceOf(wethBigBangMarket.address,);console.log('Fees after repayment: '+contractusdoB2);});});
Tools Used
Hardhat
Recommended Mitigation Steps
Not only store the user borrow part but also the original debt which isdebtAsked + openingFee. So, during repayment the contract can compute the real fees generated.
0xRektora (Tapioca) confirmed