[H-04] Access restrictions onCompoundToNotionalV2.notionalCallbackcan be bypassed
Submitted by cmichel
TheCompoundToNotionalV2.notionalCallbackis supposed to only be called from the verified contract that calls this callback. But, the access restrictions can be circumvented by simply providingsender = this, assenderis a parameter of the function that can be chosen by the attacker.
functionnotionalCallback(addresssender,addressaccount,bytescalldatacallbackData)externalreturns(uint256) {// @audit sender can be passed in by the attackerrequire(sender==address(this),"Unauthorized callback");
An attacker can call the function passing in an arbitraryaccountwhose tokens are then transferred to the contract.
Theaccountfirst has to approve this contract but this can happen with accounts that legitimately want to call the outer function and have to send a first transaction to approve the contract, but then an attacker front-runs the actual transaction.
It’s at least a griefing attack:
I can pass in a maliciouscTokenBorrowthat returns any token of my choice (through the.underlying()call) but whoserepayBorrowBehalfis a no-op.
This will lead to any of the victim’s approved tokens becoming stuck in the contract, essentially burning them:
// @audit using a malicious contract, this can be any tokenaddressunderlyingToken=CTokenInterface(cTokenBorrow).underlying();boolsuccess=IERC20(underlyingToken).transferFrom(account,address(this),cTokenRepayAmount);require(success,"Transfer of repayment failed");// Use the amount transferred to repay the borrow// @audit using a malicious contract, this can be a no-opuintcode=CErc20Interface(cTokenBorrow).repayBorrowBehalf(account,cTokenRepayAmount);
Note that the assumption at the end of the function ”// When this exits a free collateral check will be triggered” is not correct anymore but I couldn’t find a way to make use of it to lead to an invalid account state.
Recommend fixing the authorization check.
jeffywu (Notional) confirmed