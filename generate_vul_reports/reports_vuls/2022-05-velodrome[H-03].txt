[H-03] User rewards stop accruing after any_writeCheckpointcalling action
Submitted by hyh, also found by smiling_heretic, unforgiven, and xiaoming90
Any user balance affecting action, i.e. deposit, withdraw/withdrawToken or getReward, calls _writeCheckpoint to update the balance records used for the earned reward estimation. The issue is that _writeCheckpoint always sets false tovotedflag for the each new checkpoint due to wrong index used in the mapping access, while only voted periods are eligible for accruing the rewards.
This way any balance changing action of a voted user will lead to stopping of the rewards accrual for the user, until next vote will be cast. I.e. any action that has no relation to voting and should have only balance change as the reward accruing process impact, in fact removes any future rewards from the user until the next vote.
Setting the severity to be high as the impact here violates system logic and means next periods accrued rewards loss for a user.
Proof of Concept
_writeCheckpoint adds a new checkpoint if block.timestamp is not found in the last checkpoint:
Gauge.sol#L302-L313
function_writeCheckpoint(addressaccount,uintbalance)internal{uint_timestamp=block.timestamp;uint_nCheckPoints=numCheckpoints[account];if(_nCheckPoints>0&&checkpoints[account][_nCheckPoints-1].timestamp==_timestamp) {checkpoints[account][_nCheckPoints-1].balanceOf=balance;}else{boolprevVoteStatus= (_nCheckPoints>0) ?checkpoints[account][_nCheckPoints].voted:false;checkpoints[account][_nCheckPoints] =Checkpoint(_timestamp,balance,prevVoteStatus);numCheckpoints[account] =_nCheckPoints+1;}}
However, instead of moving vote status from the previous checkpoint it recordsfalsetoprevVoteStatusall the time as last status ischeckpoints[account][_nCheckPoints-1].voted, whilecheckpoints[account][_nCheckPoints]isnâ€™t created yet and is empty:
Gauge.sol#L309
boolprevVoteStatus= (_nCheckPoints>0) ?checkpoints[account][_nCheckPoints].voted:false;
Notice thatcheckpointsis a mapping and no range check violation happens:
Gauge.sol#L74-L75
/// @notice A record of balance checkpoints for each account, by indexmapping(address=>mapping(uint=>Checkpoint))publiccheckpoints;
This will effectively lead to rewards removal on any user action, as earned() used in rewards estimation counts only voted periods:
Gauge.sol#L483-L502
if(_endIndex>0) {for(uinti=_startIndex;i<_endIndex;i++) {Checkpointmemorycp0=checkpoints[account][i];Checkpointmemorycp1=checkpoints[account][i+1];(uint_rewardPerTokenStored0,) =getPriorRewardPerToken(token,cp0.timestamp);(uint_rewardPerTokenStored1,) =getPriorRewardPerToken(token,cp1.timestamp);if(cp0.voted) {reward+=cp0.balanceOf* (_rewardPerTokenStored1-_rewardPerTokenStored0) /PRECISION;}}}Checkpointmemorycp=checkpoints[account][_endIndex];uintlastCpWeeksVoteEnd=cp.timestamp- (cp.timestamp% (7days)) +BRIBE_LAG+DURATION;if(block.timestamp>lastCpWeeksVoteEnd) {(uint_rewardPerTokenStored,) =getPriorRewardPerToken(token,cp.timestamp);if(cp.voted) {reward+=cp.balanceOf* (rewardPerToken(token) -Math.max(_rewardPerTokenStored,userRewardPerTokenStored[token][account])) /PRECISION;}}
I.e. if a user has voted, then performed any of the operations that call _writeCheckpoint update: deposit, withdraw/withdrawToken or getReward, then this user will not have any rewards for the period between this operation and the next vote as all checkpoints that were created by _writeCheckpoint will havevoted == false.
Recommended Mitigation Steps
Update the index to be_nCheckPoints-1:
https://github.com/code-423n4/2022-05-velodrome/blob/7fda97c570b758bbfa7dd6724a336c43d4041740/contracts/contracts/Gauge.sol#L309
-boolprevVoteStatus= (_nCheckPoints>0) ?checkpoints[account][_nCheckPoints].voted:false;+boolprevVoteStatus= (_nCheckPoints>0) ?checkpoints[account][_nCheckPoints-1].voted:false;
pooltypes (Velodrome) disputed
Alex the Entreprenerd (judge) commented:
Due to 1 typo / oversight in the linebool prevVoteStatus = (_nCheckPoints > 0) ? checkpoints[account][_nCheckPoints].voted : false;All future checkpoints are registered as havingvotedset to false.Due to a configuration choice (or mistake as detailed in other findings), havingvotedset to false causes all rewards to not be receiveable.While the impact is loss of Yield (typically a medium finding), the finding shows how this bug will systematically impact all gauges for all users.Because of that, I believe High Severity to be appropriate.