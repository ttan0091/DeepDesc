[H-06] Gas price spikes cause the selected operator to be vulnerable to frontrunning and be slashed
Submitted by Chom, also found by Lambda and Trust
HolographOperator.sol#L354
require(gasPrice>=tx.gasprice,"HOLOGRAPH: gas spike detected");
/***@devselect operator that failed to do the job, is slashed the pod base fee*/_bondedAmounts[job.operator] -=amount;/***@devthe slashed amount is sent to current operator*/_bondedAmounts[msg.sender] +=amount;
Since you have designed a mechanism to prevent other operators to slash the operator due to “the selected missed the time slot due to a gas spike”. It can induce that operators won’t perform their job if a gas price spike happens due to negative profit.
But your designed mechanism has a vulnerability. Other operators can submit their transaction to the mempool and queue it usinggasPrice in bridgeInRequestPayload. It may get executed before the selected operator as the selected operator is waiting for the gas price to drop but doesn’t submit any transaction yet. If it doesn’t, these operators lose a little gas fee. But a slashed reward may be greater than the risk of losing a little gas fee.
require(timeDifference>0,"HOLOGRAPH: operator has time");
Once 1 epoch has passed, selected operator is vulnerable to slashing and frontrunning.
Recommended Mitigation Steps
Modify your operator node software to queue transactions immediately withgasPrice in bridgeInRequestPayloadif a gas price spike happened. Or allow gas fee loss tradeoff to prevent being slashed.
alexanderattar (Holograph) confirmed and commented:
Valid, we have not fully finalized this mechanism and will consider mitigation strategies.
gzeon (judge) increased severity to High and commented:
High risk because potential slashing.