[H-55]_sendTokenimplementation inBalancer.solis wrong which will make the underlying erc20 be send to a random address and lost
Submitted byVagner
The function_sendTokenis called onrebalanceto perform the rebalance operation by the owner which will transfer native token or the underlying ERC20 for a specific tOFT token to other chains. This function uses therouterfrom Stargate to transfer the tokens, but the implementation of theswapis done wrong which will make the tokens to be lost.
Proof of Concept
_sendTokencalls Stargateâ€™s routerswapfunction with the all the parameters needed as can be seen herehttps://github.com/Tapioca-DAO/tapiocaz-audit/blob/bcf61f79464cfdc0484aa272f9f6e28d5de36a8f/contracts/Balancer.sol#L322-L332, but the problem relies that the destination address is computed by callingabi.encode(connectedOFTs[_oft][_dstChainId].dstOft)instead of theabi.encodePacked(connectedOFTs[_oft][_dstChainId].dstOft)https://github.com/Tapioca-DAO/tapiocaz-audit/blob/bcf61f79464cfdc0484aa272f9f6e28d5de36a8f/contracts/Balancer.sol#L316-L318.
Per Stargate documentationhttps://stargateprotocol.gitbook.io/stargate/developers/how-to-swap, the address of the swap need to casted to bytes by usingabi.encodePackedand notabi.encode, casting which is done correctly in the_sendNativefunctionhttps://github.com/Tapioca-DAO/tapiocaz-audit/blob/bcf61f79464cfdc0484aa272f9f6e28d5de36a8f/contracts/Balancer.sol#L291. The big difference betweenabi.encodePackedandabi.encodeis thatabi.encodewill fill the remaining 12 bytes of casting a 20 bytes address with 0 values. Here is an example of casting the address0x5B38Da6a701c568545dCfcB03FcB875f56beddC4
bytesnormalAbi=0x0000000000000000000000005b38da6a701c568545dcfcb03fcb875f56beddc4;bytespackedAbi=0x5b38da6a701c568545dcfcb03fcb875f56beddc4;
This will hurt the whole logic of theswapsince when thelzReceivefunction on theBridge.solcontract from Startgate will be called, the address where the funds will be sent will be a wrong address. As you can see here thelzReceiveonBridge.solfor Abitrum for example uses assembly to load 20 bytes of thepayloadto thetoAddresshttps://arbiscan.io/address/0x352d8275aae3e0c2404d9f68f6cee084b5beb3dd#code#F1#L88which in our case, for the address that I provided as an example it would be
toAddress=0x0000000000000000000000005b38Da6A701c5685;
becauseabi.encodewas used instead ofabi.ecnodePacked.
Then it will try to swap the tokens to this address, by callingsgReceiveon it, which will not exist in most of the case and the assets will be lost, as specified by Stargate documentationhttps://stargateprotocol.gitbook.io/stargate/composability-stargatecomposed.sol
Recommended Mitigation Steps
Useabi.encodePackedinstead ofabi.encodeon_sendToken, same as the protocol does in_sendNative, so the assumptions will be correct.
0xRektora (Tapioca) confirmed