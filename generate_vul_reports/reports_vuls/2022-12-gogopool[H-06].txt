[H-06] MinipoolManager: node operator can avoid being slashed
Submitted byHollaDieWaldfee, also found byenckrish,imare,bin2chen,danyams,0xdeadbeef0x,cozzetti, andladboy233
When staking is done, a Rialto multisig callsMinipoolManager.recordStakingEnd(https://github.com/code-423n4/2022-12-gogopool/blob/aec9928d8bdce8a5a4efe45f54c39d4fc7313731/contracts/contract/MinipoolManager.sol#L385-L440).
If theavaxTotalRewardAmthas the value zero, theMinipoolManagerwill slash the node operator’s GGP.
The issue is that the amount to slash can be greater than the GGP balance the node operator has staked.
This will cause the call toMinipoolManager.recordStakingEndto revert because an underflow is detected.
This means a node operator can create a minipool that cannot be slashed.
A node operator must provide at least 10% ofavaxAssignedas collateral by staking GGP.
It is assumed that a node operator earns AVAX at a rate of 10% per year.
So if a Minipool is created with a duration of> 365 days, the 10% collateral is not sufficient to pay the expected rewards.
This causes the function call to revert.
Another cause of the revert can be that the GGP price in AVAX changes. Specifically if the GGP price falls, there needs to be slashed more GGP.
Therefore if the GGP price drops enough it can cause the call to slash to revert.
I think it is important to say that with any collateralization ratio this can happen. The price of GGP must just drop enough or one must use a long enough duration.
The exact impact of this also depends on how the Rialto multisig handles failed calls toMinipoolManager.recordStakingEnd.
It looks like if this happens,MinipoolManager.recordStakingError(https://github.com/code-423n4/2022-12-gogopool/blob/aec9928d8bdce8a5a4efe45f54c39d4fc7313731/contracts/contract/MinipoolManager.sol#L484-L515) is called.
This allows the node operator to withdraw his GGP stake.
So in summary a node operator can create a Minipool that cannot be slashed and probably remove his GGP stake when it should have been slashed.
Proof of Concept
When callingMinipoolManager.recordStakingEnd(https://github.com/code-423n4/2022-12-gogopool/blob/aec9928d8bdce8a5a4efe45f54c39d4fc7313731/contracts/contract/MinipoolManager.sol#L385-L440) and theavaxTotalRewardAmtparameter is zero, the node operator is slashed:
// No rewards means validation period failed, must slash node ops GGP.if(avaxTotalRewardAmt==0) {slash(minipoolIndex);}
TheMinipoolManager.slashfunction (https://github.com/code-423n4/2022-12-gogopool/blob/aec9928d8bdce8a5a4efe45f54c39d4fc7313731/contracts/contract/MinipoolManager.sol#L670-L683) then calculatesexpectedAVAXRewardsAmtand from thisslashGGPAmt:
uint256avaxLiquidStakerAmt=getUint(keccak256(abi.encodePacked("minipool.item",index,".avaxLiquidStakerAmt")));uint256expectedAVAXRewardsAmt=getExpectedAVAXRewardsAmt(duration,avaxLiquidStakerAmt);uint256slashGGPAmt=calculateGGPSlashAmt(expectedAVAXRewardsAmt);
Downstream there is then a revert due to underflow because of the following line inStaking.decreaseGGPStake(https://github.com/code-423n4/2022-12-gogopool/blob/aec9928d8bdce8a5a4efe45f54c39d4fc7313731/contracts/contract/Staking.sol#L94-L97):
subUint(keccak256(abi.encodePacked("staker.item",stakerIndex,".ggpStaked")),amount);
You can add the following foundry test toMinipoolManager.t.sol:
functiontestRecordStakingEndWithSlashFail()public{uint256duration=366days;uint256depositAmt=1000ether;uint256avaxAssignmentRequest=1000ether;uint256validationAmt=depositAmt+avaxAssignmentRequest;uint128ggpStakeAmt=100ether;vm.startPrank(nodeOp);ggp.approve(address(staking),MAX_AMT);staking.stakeGGP(ggpStakeAmt);MinipoolManager.Minipoolmemorymp1=createMinipool(depositAmt,avaxAssignmentRequest,duration);vm.stopPrank();addressliqStaker1=getActorWithTokens("liqStaker1",MAX_AMT,MAX_AMT);vm.prank(liqStaker1);ggAVAX.depositAVAX{value:MAX_AMT}();vm.prank(address(rialto));minipoolMgr.claimAndInitiateStaking(mp1.nodeID);bytes32txID=keccak256("txid");vm.prank(address(rialto));minipoolMgr.recordStakingStart(mp1.nodeID,txID,block.timestamp);vm.startPrank(address(rialto));skip(duration);minipoolMgr.recordStakingEnd{value:validationAmt}(mp1.nodeID,block.timestamp,0ether);}
See that it runs successfully withduration = 365 daysand fails withduration = 366 days.
The similar issue occurs when the GGP price drops. I chose to implement the test withdurationas the cause for the underflow because your tests use a fixed AVAX/GGP price.
Tools Used
VSCode, Foundry
Recommended Mitigation Steps
You should check if the amount to be slashed is greater than the node operator’s GGP balance. If this is the case, the amount to be slashed should be set to the node operator’s GGP balance.
I believe this check can be implemented within theMinipoolManager.slashfunction without breaking any of the existing accounting logic.
functionslash(int256index)private{addressnodeID=getAddress(keccak256(abi.encodePacked("minipool.item",index,".nodeID")));addressowner=getAddress(keccak256(abi.encodePacked("minipool.item",index,".owner")));uint256duration=getUint(keccak256(abi.encodePacked("minipool.item",index,".duration")));uint256avaxLiquidStakerAmt=getUint(keccak256(abi.encodePacked("minipool.item",index,".avaxLiquidStakerAmt")));uint256expectedAVAXRewardsAmt=getExpectedAVAXRewardsAmt(duration,avaxLiquidStakerAmt);uint256slashGGPAmt=calculateGGPSlashAmt(expectedAVAXRewardsAmt);setUint(keccak256(abi.encodePacked("minipool.item",index,".ggpSlashAmt")),slashGGPAmt);emitGGPSlashed(nodeID,slashGGPAmt);Stakingstaking=Staking(getContractAddress("Staking"));if(slashGGPAmt>staking.getGGPStake(owner)) {slashGGPAmt=staking.getGGPStake(owner);}staking.slashGGP(owner,slashGGPAmt);}
emersoncloud (GoGoPool) confirmed, but commented:
This is a combination of two other issues from other wardensSlash amount shouldn’t depend on duration:https://github.com/code-423n4/2022-12-gogopool-findings/issues/694GGP Slash shouldn’t revert:https://github.com/code-423n4/2022-12-gogopool-findings/issues/743
Alex the Entreprenerd (judge) commented:
This finding combines 2 issues:If price drops Slash can revert -> MediumAttacker can set Duration to too high to cause a revert -> HighAm going to dedupe this and the rest, but ultimately I think these are different findings, that should have been filed separately.
Alex the Entreprenerd (judge) commented:
The Warden has shown how a malicious staker could bypass slashing, by inputting a duration that is beyond the intended amount.Other reports have shown how to sidestep the slash or reduce it, however, this report shows how the bypass can be enacted maliciously to break the protocol functionality, to the attacker’s potential gain.Because slashing is sidestepped in it’s entirety, I believe this finding to be of High Severity.
emersoncloud (GoGoPool) mitigated:
If staked GGP doesn’t cover slash amount, slash it all:multisig-labs/gogopool#41
Status:Original finding mitigated, but a medium severity economical risk is still present. Full details in reports fromRaymondFam,ladboy233andhansfriese. Also included in Mitigation Review section below.