[H-02] Treasury fee is not collected inwithdrawEthWithInterest()
Submitted byadriro, also found byrbserverandminhquanym
The Particle exchange collects treasury fees from the lenderâ€™s interests. These interests are accumulated in theinterestAccruedmapping and are withdrawn using the_withdrawAccountInterest()function, which splits the portion that corresponds to the treasury.
https://github.com/code-423n4/2023-05-particle/blob/main/contracts/protocol/ParticleExchange.sol#L231-L246
231:function_withdrawAccountInterest(addresspayablelender)internal{232:uint256interest=interestAccrued[lender];233:if(interest==0)return;234:235:interestAccrued[lender] =0;236:237:if(_treasuryRate>0) {238:uint256treasuryInterest=MathUtils.calculateTreasuryProportion(interest,_treasuryRate);239:_treasury+=treasuryInterest;240:interest-=treasuryInterest;241:         }242:243:lender.transfer(interest);244:245:emitWithdrawAccountInterest(lender,interest);246:     }
Lines 238-240 calculate treasury fees and accumulate them in the_treasuryvariable, which is later withdrawn by the owner using thewithdrawTreasury()function.
However, these fees fail to be considered in the case ofwithdrawEthWithInterest():
https://github.com/code-423n4/2023-05-particle/blob/main/contracts/protocol/ParticleExchange.sol#L192-L223
192:functionwithdrawEthWithInterest(Liencalldatalien,uint256lienId)externaloverridevalidateLien(lien,lienId) {193:if(msg.sender!=lien.lender) {194:revertErrors.Unauthorized();195:         }196:197:if(lien.loanStartTime==0) {198:revertErrors.InactiveLoan();199:         }200:201:uint256payableInterest=_calculateCurrentPayableInterest(lien);202:203:// verify that the liquidation condition has met (borrower insolvent or auction concluded)204:if(payableInterest<lien.credit&& !_auctionConcluded(lien.auctionStartTime)) {205:revertErrors.LiquidationHasNotReached();206:         }207:208:// delete lien (delete first to prevent reentrancy)209:deleteliens[lienId];210:211:// transfer ETH with interest back to lender212:payable(lien.lender).transfer(lien.price+payableInterest);213:214:// transfer PnL to borrower215:if(lien.credit>payableInterest) {216:payable(lien.borrower).transfer(lien.credit-payableInterest);217:         }218:219:emitWithdrawETH(lienId);220:221:// withdraw interest from this account too222:_withdrawAccountInterest(payable(msg.sender));223:     }
As we can see in the previous snippet of code, the interests are calculated in line 201, but that amount is then transferred, along with the lien price, back to the lender in full in line 212, without deducting any treasury fees.
Recommendation
The interest can be simply accumulated in theinterestAccruedmapping, which is later withdrawn (correctly taking into account treasury fees) in the already present call to_withdrawAccountInterest().
functionwithdrawEthWithInterest(Liencalldatalien,uint256lienId)externaloverridevalidateLien(lien,lienId) {if(msg.sender!=lien.lender) {revertErrors.Unauthorized();}if(lien.loanStartTime==0) {revertErrors.InactiveLoan();}uint256payableInterest=_calculateCurrentPayableInterest(lien);// verify that the liquidation condition has met (borrower insolvent or auction concluded)if(payableInterest<lien.credit&& !_auctionConcluded(lien.auctionStartTime)) {revertErrors.LiquidationHasNotReached();}// delete lien (delete first to prevent reentrancy)deleteliens[lienId];+// accrue interest to lender+interestAccrued[lien.lender] +=payableInterest;@// transfer ETH back to lender@payable(lien.lender).transfer(lien.price);// transfer PnL to borrowerif(lien.credit>payableInterest) {payable(lien.borrower).transfer(lien.credit-payableInterest);}emitWithdrawETH(lienId);// withdraw interest from this account too_withdrawAccountInterest(payable(msg.sender));}
wukong-particle (Particle) acknowledged and commented:
We will likely fix the issue in another way. We will modifywithdrawNftWithInterestandwithdrawEthWithInterestintowithdrawNftandwithdrawEth, i.e. move the interest withdraw into the single account level interest withdraw function (similar to the suggestion made inhttps://github.com/code-423n4/2023-05-particle-findings/issues/31).
hansfriese (judge) increased severity to High and commented:
After discussion, I think that High is the appropriate severity because this issue incurs loss for the protocol.
wukong-particle (Particle) commented:
Fixed.