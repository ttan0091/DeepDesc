[H-13] Council veto protection does not work
Submitted by TomFrenchBlockchain
Council can veto proposals to remove them to remain in power.
Proof of Concept
The Vader governance contract has the concept of a “council” which can unilaterally accept or reject a proposal. To prevent a malicious council preventing itself from being replaced by the token holders, the veto function checks the calldata for any proposal action directed atGovernorAlphato see if it matches thechangeCouncilfunction selector.
Note this is done by reading from theproposal.calldatasarray.
https://github.com/code-423n4/2021-12-vader/blob/fd2787013608438beae361ce1bb6d9ffba466c45/contracts/governance/GovernorAlpha.sol#L568-L603
If we look at the structure of a proposal however we can see that the function selector is held (in the form of the signature) in thesignaturesarray rather than being included in the calldata. Thecalldataarray then holds just the function arguments for the call rather than specifying which function to call.
https://github.com/code-423n4/2021-12-vader/blob/fd2787013608438beae361ce1bb6d9ffba466c45/contracts/governance/GovernorAlpha.sol#L71-L72
https://github.com/code-423n4/2021-12-vader/blob/fd2787013608438beae361ce1bb6d9ffba466c45/contracts/governance/GovernorAlpha.sol#L356-L362
Indeed if we look at theTimeLockcontract we see that the signature is hashed to calculate the function selector and is prepended onto the calldata.
https://github.com/code-423n4/2021-12-vader/blob/fd2787013608438beae361ce1bb6d9ffba466c45/contracts/governance/Timelock.sol#L292-L299
Looking at the function signature of thechangeCouncilwe can see that the value that thevetofunction will check againstthis.changeCouncil.signaturewill be the first 4 bytes of an abi encoded address and so will always be zero no matter what function is being called.
https://github.com/code-423n4/2021-12-vader/blob/fd2787013608438beae361ce1bb6d9ffba466c45/contracts/governance/GovernorAlpha.sol#L623
High risk as this issue gives the council absolute control over the DAO such that they cannot be removed.
Recommended Mitigation Steps
Hash the function signatures to calculate function selectors and then check those rather than the calldata.
This is something that should be picked up by a test suite however, I’d recommend writing tests to ensure that protections you add to the code have any affect and more broadly check that the code behaves as expected.
SamSteinGG (Vader) acknowledged