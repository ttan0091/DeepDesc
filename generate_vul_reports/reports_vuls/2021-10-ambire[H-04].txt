[H-04]QuickAccManagerSmart Contract signature verification can be exploited
Submitted by cmichel
Several different signature modes can be used andIdentity.executeforwards thesignatureparameter to theSignatureValidatorlibrary.
The returnedsigneris then used for theprivilegescheck:
addresssigner=SignatureValidator.recoverAddrImpl(hash,signature,true);// signer will be QuickAccountContractrequire(privileges[signer] !=bytes32(0),'INSUFFICIENT_PRIVILEGE');
It’s possible to create a smart contract mode signature (SignatureMode.SmartWallet) for arbitrary transactions as theQuickAccManager.isValidSignatureuses an attacker-controlledididentity contract for the privileges check.
An attacker can just create an attacker contract returning the desired values and the smart-wallet signature appears to be valid:
// @audit id is attacker-controlled(addresspayableid,uinttimelock,bytesmemorysig1,bytesmemorysig2) =abi.decode(signature, (address,uint,bytes,bytes));// @audit this may not be used for authorization, attacker can return desired valueif(Identity(id).privileges(address(this)) ==accHash) {// bytes4(keccak256("isValidSignature(bytes32,bytes)")return0x1626ba7e;}else{return0xffffffff;}
POC
Assume anIdentitycontract is set up with aQuickAccManageras theprivilegesaccount, i.e.privileges[accHash] != 0.
We can construct aSignatureMode.SmartWalletsignature for anarbitraryhash:
CallIdentity.execute(txns, spoofedSignature)wherespoofedSignature = abi.encode(attackerContract, timelock=0, sig1=0, sig2=0, address(quickAccountManager), SignatureMode.SmartWallet)This will callrecoverAddrImpl(txnsHash, spoofedSignature, true), decode the bytesat the endofspoofedSignatureand determinemode = SignatureMode.SmartWalletandwallet = quickAccountManager. It will cut off these arguments and callquickAccountManager.isValidSignature(txnsHash, (attackerContract, 0, 0, 0))TheQuickAccManagerwill decode the signature, constructaccHashwhich is the hash of all zeroes (due to failed signatures returning 0). It will then callattacker.privileges(address(this))and the attacker contract can return theaccHashthat matches an account hash of failed signatures, i.e.,keccak256(abi.encode(QuickAccount(0,0,0))). The comparison is satisfied and it returns the success value.The checks inIdentity.executepass and the transactionstxnsare executed.
Impact
AnyIdentitycontract usingQuickAccManagercan be exploited.
Funds can then be stolen from the wallet.
Recommendation
The issue is thatQuickAccManagerblindly trusts the values insignature.
It might be enough to remove theidfrom thesignatureand usemsg.senderas the identity instead:Identity(msg.sender).privileges(address(this)) == accHash.
This seems to work with the currentIdentityimplementation but might not work if this is extended and theisValidSignatureis called from another contract and wants to verify a signature on a different identity.
In that case, theIdentity/SignatureValidatormay not blindly forward the attacker-supplied signature and instead needs to re-encode the parameters with trusted values before callingQuickAccManager.
Ivshti (Ambire) confirmed and patched:
great find! Mitigated inhttps://github.com/AmbireTech/adex-protocol-eth/commit/17c073d037ded76d56d6145faa92c1959fd47226but still figuring out whether this is the best way to do it
GalloDaSballo (judge) commented:
May need to sit on this one for another day before I can fully commentFundamentally by calling Identity.execute with mostly 0 data, you are able to call back toQuickAccManager. isValidSignaturewhich, due to the implementation ofecrecoverat the time, will return valid checks for address(0), allowing to bypass all the logic and returning true for the signature, allowing for the execution of arbitrary code.Again, need to sit on this oneBut wouldn’t you also be able to set a malicious smartContractWallet as theIERC1271Wallet, hence you can sidestep the entire logic, as your malicious contract wallet can be programmed to always return true on any input value?
Ivshti (Ambire) commented:
@GalloDaSballo (judge) this doesn’t have to do withaddress(0)Using smart wallets for signatures by itself is not a problem - since they authorize as themselves.The fundamental root of this issue is that ERC 1271 was designed with the assumption that 1 contract = 1 wallet. And as such,isValidSignatureonly returnstrue/false. This makes sense, as essentially we’re asking the wallet “is this a valid signature from you”, and then the wallet decides how to actually validate this it depending on it’s own behavior and permissions.However, the QuickAccManager is a singleton contract - one single QuickAccManager represents multiple users. As such, combining it with ERC 1271 is a logical misunderstanding, as we can’t really ask it “is this a valid sig for X identity” through the ERC 1271 interface. So instead, we encode the identity that we’re signing as in the sig itself, but then a malicious user could call a top-level identity with a sig that validates in the singletonQuickAccManager, but meant to validate with a differerent identity.Because what we pass toisValidSignatureis opaque data (the smart wallet may be any contract with any logic, not just ourQuickAccManager) we can’t just peak into the sig and see if it’s meant to validate with the caller identity.Excellent finding IMOThe current mitigation is hacky, and essentially leads to anisValidSignatureimplementation that is unusable (and doesn’t make sense) off-chain, but we prefer it to introducing a new sig type especially for QuickAccManager.
GalloDaSballo (judge) commented:
@Ivshti (Ambire) To clarify:
Would addingprivileges[QuickAccountManager] = bytes32(uint(1))enable the exploit?
Ivshti (Ambire) commented:
@GalloDaSballo (judge) yes, it would. Any authorized quickAcc would enable the exploit
GalloDaSballo (judge) commented:
I’m starting to get thisTheidsent toisValidSignatureis an untrusted, unverified address
The contract at that address can be programmed to have a functionprivilegeswhich would return anybytes32value to matchaccHashThis effectively allows to run arbitrary transactions.A way to mitigate would be to have a way to ensure the calledidis trusted
A registry of trusted ids may be effectiveThe mitigation the sponsor has chosen does solve for only using trusted Identities as in the case of a malicious Identity, the Identity would just validate it’s own transaction, not putting other Identities funds at risk.An alternative solution would be to change theIdentityFactoryto use the OpenZeppelin Clones Library (or similar) to ensure that the correct Logic is deployed (by deploying a minimal-proxy pointing to the trusted implementation).
This would require a fair tech-lift and would limit the type of deployments that the IdentityFactory can perform.The exploit was severe and the sponsor has mitigated by checking themsg.senderagainst theidprovided in the signature