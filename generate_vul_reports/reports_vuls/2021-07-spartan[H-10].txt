[H-10] Hijack token pool by burning liquidity token
Submitted by jonah1005
Poolallows users to burn lp tokens without withdrawing the tokens. This allows the hacker to mutate the pools’ rate to a point that no one can get any lp token anymore (even if depositing token).
The liquidity tokens are calculated atUtils:calcLiquidityUnits
// units = ((P (t B + T b))/(2 T B)) * slipAdjustment// P * (part1 + part2) / (part3) * slipAdjustmentuintslipAdjustment=getSlipAdustment(b,B,t,T);uintpart1=t*(B);uintpart2=T*(b);uintpart3=T*(B)*(2);uint_units= (P* (part1+ (part2))) / (part3);return_units*slipAdjustment/one;// Divide by 10**18
wherePstands fortotalSupplyof current Pool. IfPis too small (e.g, 1) then all the units would be rounding to 0.
Since any person can create aPoolatPoolFactory, hackers can create a Pool and burn his lp and settotalSupplyto 1. He will be the only person who owns the Pool’s lp from now on.Pool’s burn logicandUtils’ lp token formula.
Here’s a script of a user depositing 1M token to a pool wheretotalSupplyequals 1
dai_pool.functions.burn(init_amount-1).transact()print('total supply',dai_pool.functions.totalSupply().call())dai.functions.transfer(dai_pool.address,1000000*10**18).transact()dai_pool.functions.addForMember(user).transact()print('lp received from depositing 1M dai: ',dai_pool.functions.balanceOf(user).call())
Output:
totalsupply1lpreceivedfromdepositing1Mdai:0
Recommend removingburnor restrict it to privileged users only.
verifyfirst (Spartan) confirmed:
We agree to this issue and will restrict access to burn in the pool contract.
We have already proposed adding a 1 week withdraw coolOff for all users per pool from the genesis of creation. Users can only add liquidity within this period.