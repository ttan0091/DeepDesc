[H-04] CoreCollection can be reinitialized
Submitted by hyh, also found by 0xkatana, hubble, kirk-baird, leastwood, pedroais, rayn, rfa, Ruhum, saian, securerodd, and WatchPug
Reinitialization is possible for CoreCollection asinitializefunction setsinitializedflag, but doesn’t control for it, so the function can be rerun multiple times.
Such types of issues tend to be critical as all core variables can be reset this way, for examplepayableToken, which provides a way to retrieve all the contract funds.
However, setting priority to be medium asinitializeisonlyOwner. A run by an external attacker this way is prohibited, but the possibility of owner initiated reset either by mistake or with a malicious intent remains with the same range of system breaking consequences.
Proof of Concept
initializedoesn’t control for repetitive runs:
https://github.com/code-423n4/2022-03-joyn/blob/main/core-contracts/contracts/CoreCollection.sol#L87
Recommended Mitigation Steps
AddonlyUnInitializedmodifier to theinitializefunction:
https://github.com/code-423n4/2022-03-joyn/blob/main/core-contracts/contracts/CoreCollection.sol#L46-L49
sofianeOuafir (Joyn) confirmed, disagreed with severity and commented:
This is a high severity issue and we intend to fix it. The mitigation step looks great and will be considered to fix the issue.In my opinion, the severity level should be 3 (High Risk) instead of 2 (Med Risk)
deluca-mike (judge) increased severity to High and commented:
Not convinced this is a high severity issue, since erroneously changingpayableTokenvia a re-initialization can simply be corrected by a re-re-initialization to set it back correctly. Further, as the warden mentioned, the initialize function is behindonlyOwner.However, if it can be shown that users other than the owner can end up losing value due to the owner abusing or erroneously usinginitialize, then it can be promoted to High Severity.And just as I say that, #17 points that out clearly. So, yes, agreed, this is a High Severity issue.