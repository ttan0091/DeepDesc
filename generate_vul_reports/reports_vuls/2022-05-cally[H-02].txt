[H-02] Inefficiency in the Dutch Auction due to lower duration
Submitted by hubble, also found by Hawkeye and sseefried
The vulnerability or bug is in the implementation of the function getDutchAuctionStrike()
The AUCTION_DURATION is defined as 24 hours, and consider that the dutchAuctionReserveStrike (or reserveStrike) will never be set to 0 by user.
Now if a vault is created with startingStrike value of 55 and reserveStrike of 13.5 , the auction price will drop from 55 to 13.5 midway at ~12 hours.
So, after 12 hours from start of auction, the rate will be constant at reserveStrike of 13.5, and remaining time of 12 hours of auction is a waste.
Some other examples :
startStrike, reserveStrike, time-to-reach-reserveStrike55 , 13.5  , ~12 hours55 , 5     , ~16.7 hours55 , 1.5   , ~20 hours5  , 1.5   , ~11 hours
Impact
The impact is high wrt Usability, where users have reduced available time to participate in the auction (when price is expected to change).
The vault-Creators or the option-Buyers may or may not be aware of this inefficiency, i.e., how much effective time is available for auction.
Proof of Concept
Contract : Cally.sol
Function : getDutchAuctionStrike ()
Recommended Mitigation Steps
The function getDutchAuctionStrike() can be modified such that price drops to the reserveStrike exactly at 24 hours from start of auction.
/*delta = max(auctionEnd - currentTimestamp, 0)progress = delta / auctionDurationauctionStrike = progress^2 * (startingStrike - reserveStrike)             << Changes herestrike = auctionStrike + reserveStrike                                    << Changes here*/uint256 delta = auctionEndTimestamp > block.timestamp ? auctionEndTimestamp - block.timestamp : 0;uint256 progress = (1e18 * delta) / AUCTION_DURATION;uint256 auctionStrike = (progress * progress * (startingStrike-reserveStrike)) / (1e18 * 1e18);strike = auctionStrike + reserveStrike;
outdoteth (Cally) confirmed, disagreed with severity and commented:
We think this should be bumped to high severity. It would be easy for a user to create an auction that declines significantly faster than what they would have assumed - even over 1 or 2 blocks. It makes no sense for the auction to ever behave in this way and would result in options getting filled at very bad prices for the creator of the vault.
outdoteth (Cally) resolved:
The fix for this issue is here:https://github.com/outdoteth/cally/pull/2
HardlyDifficult (judge) increased severity to High and commented:
The sponsor comment here makes sense. Agree with (1) High since this can potentially be very detrimental to the promise of this protocol.