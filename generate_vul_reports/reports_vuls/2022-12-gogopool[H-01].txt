[H-01] AVAX Assigned High Water is updated incorrectly
Submitted byhansfriese, also found byunforgiven,wagmi,betweenETHlines,Allarious,HollaDieWaldfee, andchaduke
contracts/contract/MinipoolManager.sol#L374
Node operators can manipulate the assigned high water to be higher than the actual.
Proof of Concept
The protocol rewards node operators according to theAVAXAssignedHighWaterthat is the maximum amount assigned to the specific staker during the reward cycle.
In the functionMinipoolManager.recordStakingStart(), theAVAXAssignedHighWateris updated as below.
MinipoolManager.sol349:functionrecordStakingStart(350:addressnodeID,351:bytes32txID,352:uint256startTime353: 	)external{354:int256minipoolIndex=onlyValidMultisig(nodeID);355:requireValidStateTransition(minipoolIndex,MinipoolStatus.Staking);356:if(startTime>block.timestamp) {357:revertInvalidStartTime();358: 		}359:360:setUint(keccak256(abi.encodePacked("minipool.item",minipoolIndex,".status")),uint256(MinipoolStatus.Staking));361:setBytes32(keccak256(abi.encodePacked("minipool.item",minipoolIndex,".txID")),txID);362:setUint(keccak256(abi.encodePacked("minipool.item",minipoolIndex,".startTime")),startTime);363:364:// If this is the first of many cycles, set the initialStartTime365:uint256initialStartTime=getUint(keccak256(abi.encodePacked("minipool.item",minipoolIndex,".initialStartTime")));366:if(initialStartTime==0) {367:setUint(keccak256(abi.encodePacked("minipool.item",minipoolIndex,".initialStartTime")),startTime);368: 		}369:370:addressowner=getAddress(keccak256(abi.encodePacked("minipool.item",minipoolIndex,".owner")));371:uint256avaxLiquidStakerAmt=getUint(keccak256(abi.encodePacked("minipool.item",minipoolIndex,".avaxLiquidStakerAmt")));372:Stakingstaking=Staking(getContractAddress("Staking"));373:if(staking.getAVAXAssignedHighWater(owner) <staking.getAVAXAssigned(owner)) {374:staking.increaseAVAXAssignedHighWater(owner,avaxLiquidStakerAmt);//@audit wrong375: 		}376:377:emitMinipoolStatusChanged(nodeID,MinipoolStatus.Staking);378: 	}
In the line #373, if the current assigned AVAX is greater than the ownerâ€™sAVAXAssignedHighWater, it is increased byavaxLiquidStakerAmt.
But this is supposed to be updated tostaking.getAVAXAssigned(owner)rather than being increased by the amount.
Example:
The node operator creates a minipool with 1000AVAX viacreateMinipool(nodeID, 2 weeks, delegationFee, 1000*1e18).On creation, the assigned AVAX for the operator will be 1000AVAX.If the Rialtor callsrecordStakingStart(),AVAXAssignedHighWaterwill be updated to 1000AVAX.
After the validation finishes, the operator creates another minipool with 1500AVAX this time. Then onrecordStakingStart(),AVAXAssignedHighWaterwill be updated to 2500AVAX by increasing 1500AVAX because the current assigned AVAX is 1500AVAX which is higher than the currentAVAXAssignedHighWater=1000AVAX.This is wrong because the actual highest assigned amount is 1500AVAX.Note thatAVAXAssignedHighWateris reset only through the functioncalculateAndDistributeRewardswhich can be called afterRewardsCycleSeconds=28 days.
Recommended Mitigation Steps
Callstaking.resetAVAXAssignedHighWater(owner)instead of callingincreaseAVAXAssignedHighWater().
MinipoolManager.sol373:if(staking.getAVAXAssignedHighWater(owner) <staking.getAVAXAssigned(owner)) {374:staking.resetAVAXAssignedHighWater(owner);//@audit update to the current AVAX assigned375: 		}
emersoncloud (GoGoPool) confirmed
Franfran (warden) commented:
Can we take some extra considerations here please?Discussed with @0xju1ie (GoGoPool) about this specific issue, and this was the answer:(itis AVAXAssignedHighWater)It increases on a per minipool basis right now, increasing based on only what that single minipool is getting.If it was to just update the AVAXAssignedHighWater to getAVAXAssigned, then it could be assigning the highwater mark too early.EX for how it is now:1. create minipool1, assignedAvax = 1k, high water= 02. create minipool2, assignedAvax =1k, high water = 03. record start for minipool1, highwater -> 1k4.  record start for minipool2, highwater -> 2kEX for how your suggestion could be exploited:1. create minipool1, assignedAvax = 1k, high water= 02. create minipool2, assignedAvax =1k, high water = 03. record start for minipool1, highwater -> 2k4.  cancel minipool2, highwater -> 2kif we used only avax assigned for that case then it would mess up the collateralization ratio for the second minipool and they would only get paid for the minipool that they are currently operating, not the one that ended previously.
0xju1ie (GoGoPool) commented:
Their example in the proof of concept section is correct, and we have decided that this is not the ideal behavior and thus this is a bug. However, their recommended mitigation steps would create other issues, as highlighted by what @Franfran said. We intend to solve this issue differently than what they suggested.
Alex the Entreprenerd (judge) commented:
The Warden has shown a flaw in the wayincreaseAVAXAssignedHighWateris used, which can be used to:Inflate the amount of AVAXWith the goal of extracting more rewards than intendedI believe that the finding highlights both a way to extract further rewards as well as broken accounting.For this reason I agree with High Severity.
emersoncloud (GoGoPool) mitigated:
New variable to track validating avax:multisig-labs/gogopool#25
Status:Mitigation confirmed with comments. Full details inreport from RaymondFam.