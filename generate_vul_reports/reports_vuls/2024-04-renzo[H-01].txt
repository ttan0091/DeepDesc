[H-01] Withdrawals can be locked forever if recipient is a contract
Submitted byLessDupes, also found byBauchibredandgrearlake
TheWithdrawQueuecontract allows users to request withdrawals of their ezETH tokens in exchange for a selected asset, such as ETH or an ERC20 token. After a cooldown period, users can call theclaim()function to receive their withdrawn assets.
When the selected asset is ETH, theclaim()function sends the ETH using the low-leveltransfer()function:
payable(msg.sender).transfer(_withdrawRequest.amountToRedeem);
However,transfer()only forwards 2300 gas, which is not enough for the recipient to execute any non-trivial logic in areceive()or fallback function. For instance, it is not enough for Safes (such asthis onein use by the protocol) to receive funds, which require>6k gas for the call to reach the implementation contract and emit an event:
Note: to view the provided image, please see the original submissionhere.
In this case, the impact is higher than that reported by4naly3erbecauseclaim()requires the caller to be the same address that initiated the original withdrawal request viawithdraw().
If a user callswithdraw()from a contract account like a multisig or smart contract wallet that has areceive()function requiring>2300gas, their subsequentclaim()call will fail permanently. The withdrawn ETH will be locked in theWithdrawQueuecontract forever, leading to loss of funds.
Proof of Concept
Alice callswithdraw()from her multisig wallet contract to withdraw 10 ETH worth of ezETH. The multisig contract is themsg.senderand gets saved as the withdrawal requester.After the cooldown period, Alice tries to callclaim()from the multisig contract. However, the multisig has areceive()function that uses>2300gas.Whenclaim()executespayable(msg.sender).transfer(_withdrawRequest.amountToRedeem), the multisig’sreceive()fails due to out of gas, and the transaction reverts.The 10 ETH is now permanently locked inWithdrawQueue, with no way for Alice to claim it.
Recommended Mitigation Steps
Usecall()instead oftransfer()to send ETH inclaim():
(bool success, ) = payable(msg.sender).call{value: _withdrawRequest.amountToRedeem}("");require(success, "ETH transfer failed");
This forwards all available gas and allows contract recipients to execute arbitrary logic.
Assessed type
ETH-Transfer
jatinj615 (Renzo) confirmed
alcueca (judge) commented:
Theruling from the Supreme Courtis only consultative.From my point of view, a bot report that can be reasonably upgraded in severity due to the specific context of the code is a valid finding. Other judges might see this differently, so this ruling shouldn’t be seen as authoritative by itself in future audits. Instead, jurisprudence should arise from a broader consensus.The4naly3erreport states that:The use of the deprecatedtransfer()function for an address may make the transaction failThat description of impact merits a Medium severity; however, in this case the severity is higher due to the two-step withdrawal process. The withdrawal address is locked in thewithdrawstep, which will work fine for smart contract wallets. However, upon callingclaim, the transaction will revert.The actual impact for the sponsor would be severe. The first few users trying this would have their funds locked. Even after efforts of communication by the team, this would be an ongoing issue that would bring considerable trouble.I’m ruling this as a valid High, and all the duplicates that mention the two-step withdrawal process as valid duplicates.
Note: For full discussion, seehere.
Renzo mitigated:
The PR allows contracts like multisigs to be able to claim the withdraw request in Native ETH by sending it through call instead of transfer.
Status:Mitigation confirmed. Full details in reports from0xCiphky,grearlake,Fassi_Security,Bauchibred, andLessDupes.