[H-08]Vault.withdrawmixes normalized and standard amounts
Submitted by cmichel, also found by hickuphh3 and jonah1005
TheVault.balancefunction uses thebalanceOfThisfunction which scales (“normalizes”) all balances to 18 decimals.
for(uint8i;i<_tokens.length;i++) {address_token=_tokens[i];// everything is padded to 18 decimals_balance=_balance.add(_normalizeDecimals(_token,IERC20(_token).balanceOf(address(this))));}
Note thatbalance()’s second termIController(manager.controllers(address(this))).balanceOf()is not normalized, but it must be.
This leads to many issues through the contracts that usebalancebut don’t treat these values as normalized values.
For example, inVault.withdraw, the computed_amountvalue is normalized (in 18 decimals).
But theuint256 _balance = IERC20(_output).balanceOf(address(this));value is not normalized but compared to the normalized_amountand even subtracted:
// @audit compares unnormalzied output to normalized outputif(_balance<_amount) {IController_controller=IController(manager.controllers(address(this)));// @audit cannot directly subtract unnormalizeduint256_toWithdraw=_amount.sub(_balance);if(_controller.strategies() >0) {_controller.withdraw(_output,_toWithdraw);}uint256_after=IERC20(_output).balanceOf(address(this));uint256_diff=_after.sub(_balance);if(_diff<_toWithdraw) {_amount=_balance.add(_diff);}}
Impact
Imagine inwithdraw, theoutputis USDC with 6 decimals, then the normalized_toWithdrawwith 18 decimals (due to using_amount) will be a huge number and attempt to withdraw an inflated amount.
An attacker can steal tokens this way by withdrawing a tiny amount of shares and receive an inflated USDC or USDT amount (or any_outputtoken with less than 18 decimals).
Recommended Mitigation Steps
Whenever using anything involvingvault.balanceOfThis()orvault.balance()one needs to be sure that any derived token amount needs to be denormalized again before using them.
GalloDaSballo (judge) commented:
An inconsistent usage of_normalizeDecimalswill cause accounting issues and potentially paths for an exploit
BobbyYaxis (yAxis) noted:
Mitigated in PR 114:https://github.com/yaxis-project/metavault/pull/114/commits/b3c0405640719aa7d43560f4b4b910b7ba88170b