[H-07] Wrong design/implementation of permission control allows malicious/compromised Registry or Factory admin to steal funds from users’ wallet balances
Submitted by WatchPug
The current design/implementation allows amarketaddress (registered onregistry) to callVault#addValue()and transfer tokens from an arbitrary address to a specified_beneficiaryup the approved amount at any time, and the_beneficiarycan withdraw the funds by callingVault#withdrawAllAttribution()immediately.
This poses a very dangerous risk to all the users that approved their tokens to the Vault contracts (each one holds all users’ allowances for that token).
https://github.com/code-423n4/2022-01-insure/blob/19d1a7819fe7ce795e6d4814e7ddf8b8e1323df3/contracts/Vault.sol#L52-L58
modifieronlyMarket() {require(IRegistry(registry).isListed(msg.sender),"ERROR_ONLY_MARKET");_;}
https://github.com/code-423n4/2022-01-insure/blob/19d1a7819fe7ce795e6d4814e7ddf8b8e1323df3/contracts/Vault.sol#L124-L140
functionaddValue(uint256_amount,address_from,address_beneficiary)externaloverrideonlyMarketreturns(uint256_attributions) {if(totalAttributions==0) {_attributions=_amount;}else{uint256_pool=valueAll();_attributions= (_amount*totalAttributions) /_pool;}IERC20(token).safeTransferFrom(_from,address(this),_amount);balance+=_amount;totalAttributions+=_attributions;attributions[_beneficiary] +=_attributions;}
Registry owner can callRegistry#supportMarket()and mark an arbitrary address as amarket.
https://github.com/code-423n4/2022-01-insure/blob/19d1a7819fe7ce795e6d4814e7ddf8b8e1323df3/contracts/Registry.sol#L49-L60
functionsupportMarket(address_market)externaloverride{require(!markets[_market],"ERROR: ALREADY_REGISTERED");require(msg.sender==factory||msg.sender==ownership.owner(),"ERROR: UNAUTHORIZED_CALLER");require(_market!=address(0),"ERROR: ZERO_ADDRESS");allMarkets.push(_market);markets[_market] =true;emitNewMarketRegistered(_market);}
Or, the owner of the Factory can callcreateMarket()to add a malicous market contract via a custom template contract to themarketslist.
https://github.com/code-423n4/2022-01-insure/blob/19d1a7819fe7ce795e6d4814e7ddf8b8e1323df3/contracts/Factory.sol#L214-L216
Proof of Concept
A malicious/compromised Registry owner can:
CallRegistry#supportMarket()and setmarkets[attackerAddress]totrue;CallVault#addValue(token.balanceOf(victimAddress), victimAddress, attackerAddress)and transferring all the balanceOf victim’s wallet to the vault, owned byattackerAddress.CallVault#withdrawAllAttribution(attackerAddress)and retrive the funds.
The malicious/compromised Registry owner can repeat the steps above for all the users who approved the Vault contract for all the Vault contracts.
As a result, the attacker can steal all the wallet balances of the tokens approved to the protocol.
Root Cause
Improper access control for using users’ allowances.
Recommendation
Consider changing the design/implementation to make sure that the allowances approved by the users can only be used by themselves.
oishun1112 (Insure) acknowledged and disagreed with severity:
this is an issue only when ownership control has fail. This architecture is necessary to achieve simplicity of the code.
We assume ownership control works fine.
0xean (judge) commented:
Agree with warden that the privilege addresses should not be able to use approvals in a way that rugs users funds.Based on the fact that we have seen many rug pulls in the space based on compromised “owner” keys, this is a valid attack path.3 — High: Assets can be stolen/lost/compromised directly (or indirectly if there is a valid attack path that does not have hand-wavy hypotheticals).