[H-01] Bidders might fail to withdraw their unused funds after the auction was finalized because the contract doesn’t have enough balance.
Submitted byhansfriese, also found byktg
Bidders might fail to withdraw their unused funds after the auction was finalized because the contract doesn’t have enough balance.
The main flaw is the seller might receive more quote tokens than the bidders offer after the auction was finalized.
If there is no other auctions to use the same quote token, the last bidder will fail to withdraw his funds because the contract doesn’t have enough balance of quote token.
Proof of Concept
After the auction was finalized, the seller receives thefilledQuoteamount of quote token usingdata.filledBase.
// Calculate quote amount based on clearing priceuint256filledQuote=FixedPointMathLib.mulDivDown(clearingQuote,data.filledBase,clearingBase);
But when the bidders withdraw the funds usingwithdraw(), they offer the quote tokenusing this formula.
// Refund unfilled quoteAmount on first withdrawif(b.quoteAmount!=0) {uint256quoteBought=FixedPointMathLib.mulDivDown(baseAmount,a.data.lowestQuote,a.data.lowestBase);uint256refundedQuote=b.quoteAmount-quoteBought;b.quoteAmount=0;SafeTransferLib.safeTransfer(ERC20(a.params.quoteToken),msg.sender,refundedQuote);}
Even if they use the same clearing price, the total amount of quote token that the bidders offer might be less than the amount that the seller charged during finalization because the round down would happen several times with the bidders.
This is the test to show the scenario.
functiontestAuditBidderMoneyLock()public{// in this scenario, we show that bidder's money can be locked due to inaccurate calculation of claimed quote tokens for a selleruint128K=1ether;baseToSell=4*K;uint256aid=seller.createAuction(baseToSell,reserveQuotePerBase,minimumBidQuote,startTime,endTime,unlockTime,unlockEnd,cliffPercent);bidder1.setAuctionId(aid);bidder1.bidOnAuctionWithSalt(3*K,3*K+2,"Honest bidder");bidder2.setAuctionId(aid);bidder2.bidOnAuctionWithSalt(2*K,2*K+1,"Honest bidder");vm.warp(endTime);uint256[]memorybidIndices=newuint[](2);bidIndices[0] =0;bidIndices[1] =1;seller.finalize(bidIndices,2*K,2*K+1);emitlog_string("Seller claimed");// seller claimed 4*K+2assertEq(quoteToken.balanceOf(address(seller)),4*K+2);// contract has K+1 quote token leftassertEq(quoteToken.balanceOf(address(auction)),K+1);// bidder1 withdrawsbidder1.withdraw();emitlog_string("Bidder 1 withdrew");// contract has K quote token leftassertEq(quoteToken.balanceOf(address(auction)),K);// bidder2 withdraws and he is supposed to be able to claim K+1 quote tokens// but the protocol reverts because of insufficient quote tokensbidder2.withdraw();emitlog_string("Bidder 2 withdrew");// will not happen}
The test result shows the seller charged more quote token than the bidders offer so the last bidder can’t withdraw his unused quote token because the contract doesn’t have enough balance.
Running1testforsrc/test/SizeSealed.t.sol:SizeSealedTest[FAIL.Reason:TRANSFER_FAILED]testAuditBidderMoneyLock() (gas:954985)Logs:Seller claimedBidder 1 withdrewTest result: FAILED. 0 passed; 1 failed; finished in 6.94msFailing tests:Encountered 1 failing test in src/test/SizeSealed.t.sol:SizeSealedTest[FAIL. Reason: TRANSFER_FAILED] testAuditBidderMoneyLock() (gas:954985)
Tools Used
Foundry
Recommended Mitigation Steps
Currently, theFinalizeDatastruct contains thefilledBaseonly and calculates thefilledQuoteusing the clearing price.
structFinalizeData{uint256reserveQuotePerBase;uint128totalBaseAmount;uint128filledBase;uint256previousQuotePerBase;uint256previousIndex;}
I think we should add one more fieldfilledQuoteand update it during auction finalization.
And the seller can recieve the sum offilledQuoteof all bidders to avoid the rounding issue.
Also, each bidder can pay thefilledQuoteof quote token and receive thefilledBaseof base token without calculating again using the clearing price.
RagePit (SIZE) confirmed