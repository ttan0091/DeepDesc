[H-07]_requireVaultCollateralized()is called at the beginning of the functionsmintYieldFee()andliquidate()
Submitted byRedTiger, also found byzzzitronandwangxx2026
Theliquidate()andmintYieldFee()functions  could leave the vaults under-collateralized.
Proof of Concept
_requireVaultCollateralized()is called at the beginning ofmintYieldFee()andliquidate(). These two functions change the state and the vault could become under-collateralized at the end of the functions.
https://github.com/GenerationSoftware/pt-v5-vault/blob/b1deb5d494c25f885c34c83f014c8a855c5e2749/src/Vault.sol#L557
functionmintYieldFee(uint256_shares,address_recipient)external{_requireVaultCollateralized();if(_shares>_yieldFeeTotalSupply)revertYieldFeeGTAvailable(_shares,_yieldFeeTotalSupply);
https://github.com/GenerationSoftware/pt-v5-vault/blob/b1deb5d494c25f885c34c83f014c8a855c5e2749/src/Vault.sol#L395
functionmintYieldFee(uint256_shares,address_recipient)external{_requireVaultCollateralized();if(_shares>_yieldFeeTotalSupply)revertYieldFeeGTAvailable(_shares,_yieldFeeTotalSupply);
Recommended Mitigation Steps
Call_requireVaultCollateralized()at the end of these functions instead of calling it at the beginning.
Assessed type
Invalid Validation
Picodes (judge) increased severity to High
asselstine (PoolTogether) confirmed via duplicate issue #307
Picodes (judge) commented via duplicate issue #307:
Keeping High severity as this report shows how shares could be minted; although, the vault is in fact under-collateralized leading to a loss of funds for users.
PierrickGT (PoolTogether) commented via duplicate issue #307:
The warden missed the following comment:* @dev - We exclude the amount of yield generated by the YieldVault, so the user can only withdraw their share of deposits.*      Except when the vault is under-collateralized, in this case, any unclaimed yield fee is included in the calculation.https://github.com/GenerationSoftware/pt-v5-vault/blob/a08fe40155aa65aab202c8bda5806dd91eaa1a9a/src/Vault.sol#L1169-L1170If the Vault ends up being under-collateralized, any yield that has not been claimed will be shared proportionally between depositors.
If we use_totalSharesinstead of_totalSupply, we would account for Vault shares that have not been minted yet, since_yieldFeeTotalSupplykeeps track of the accrued yield fee, but needs to be minted as Vault shares by callingmintYieldFee:https://github.com/GenerationSoftware/pt-v5-vault/blob/44a6c6b081db5cc5e2acc4757a3c9dbaa6f60943/src/Vault.sol#L395I’ve added the following to test this scenario:https://github.com/GenerationSoftware/pt-v5-vault/blob/44a6c6b081db5cc5e2acc4757a3c9dbaa6f60943/test/unit/Vault/Withdraw.t.sol#L128
Picodes (judge) commented via duplicate issue #307:
@PierrickGT - I do agree with you that the mitigation of this report is incorrect. However, my understanding is that there is still an important issue here; becausemintYieldFeecould be called even when it would lead to an under-collateralized state.So we could imagine a scenario where_yieldFeeTotalSupplyis 4, assets in the vault are 10, and user shares are 10. Then, a call tomintYieldFeewould mint4and would lead to a loss of funds for users, as it’d bring the vault into an under-collateralized state.
PierrickGT (PoolTogether) commented via duplicate issue #307:
@Picodes - Yes, exactly. This issue you are referring to was better explained inthis issue.
PoolTogether mitigated:
Fixed check for partial collateralization.PR:https://github.com/GenerationSoftware/pt-v5-vault/pull/13
Status: Mitigation confirmed. Full details in reports from0xStalin,dirk_yandrvierdiiev.