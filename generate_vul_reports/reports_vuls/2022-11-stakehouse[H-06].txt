[H-06]BringUnusedETHBackIntoGiantPoolcan cause stuck ether funds in Giant Pool
Submitted bykoxuan, also found byhihen
https://github.com/code-423n4/2022-11-stakehouse/blob/main/contracts/liquid-staking/GiantMevAndFeesPool.sol#L126-L138https://github.com/code-423n4/2022-11-stakehouse/blob/main/contracts/liquid-staking/GiantSavETHVaultPool.sol#L137-L158
withdrawUnusedETHToGiantPoolwill withdraw any eth from the vault if staking has not commenced(knot status isINITIALS_REGISTERED), the eth will be drawn successful to the giant pool. However, idleETH variable is not updated. idleETH  is the available ETH for withdrawing and depositing eth for staking. Since there is no other places that updates idleETH other than depositing eth for staking and withdrawing eth, the eth withdrawn from the vault will be stuck forever.
Proof of Concept
Place poc in GiantPools.t.sol withimport { MockStakingFundsVault } from "../../contracts/testing/liquid-staking/MockStakingFundsVault.sol";
functiontestStuckFundsInGiantMEV()public{stakingFundsVault=MockStakingFundsVault(payable(manager.stakingFundsVault()));addressnodeRunner=accountOne;vm.deal(nodeRunner,4ether);//address feesAndMevUser = accountTwo; vm.deal(feesAndMevUser, 4 ether);//address savETHUser = accountThree; vm.deal(savETHUser, 24 ether);addressvictim=accountFour;vm.deal(victim,1ether);registerSingleBLSPubKey(nodeRunner,blsPubKeyOne,accountFour);emitlog_address(address(giantFeesAndMevPool));vm.startPrank(victim);emitlog_uint(victim.balance);giantFeesAndMevPool.depositETH{value:1ether}(1ether);bytes[][]memoryblsKeysForVaults=newbytes[][](1);blsKeysForVaults[0] =getBytesArrayFromBytes(blsPubKeyOne);uint256[][]memorystakeAmountsForVaults=newuint256[][](1);stakeAmountsForVaults[0] =getUint256ArrayFromValues(1ether);giantFeesAndMevPool.batchDepositETHForStaking(getAddressArrayFromValues(address(stakingFundsVault)),getUint256ArrayFromValues(1ether) ,blsKeysForVaults,stakeAmountsForVaults);emitlog_uint(victim.balance);vm.warp(block.timestamp+60minutes);LPTokenlp= (stakingFundsVault.lpTokenForKnot(blsKeysForVaults[0][0]));LPToken[][]memorylpToken=newLPToken[][](1);LPToken[]memorytemp=newLPToken[](1);temp[0] =lp;lpToken[0] =temp;emitlog_uint(address(giantFeesAndMevPool).balance);giantFeesAndMevPool.bringUnusedETHBackIntoGiantPool(getAddressArrayFromValues(address(stakingFundsVault)),lpToken,stakeAmountsForVaults);emitlog_uint(address(giantFeesAndMevPool).balance);vm.expectRevert();giantFeesAndMevPool.batchDepositETHForStaking(getAddressArrayFromValues(address(stakingFundsVault)),getUint256ArrayFromValues(1ether) ,blsKeysForVaults,stakeAmountsForVaults);vm.expectRevert();giantSavETHPool.withdrawETH(1ether);vm.stopPrank();}
Both withdrawing eth for user and depositing eth to stake fails and reverts as shown in the poc due to underflow in idleETH.
Note that the same problem also exists in GiantSavETHVaultPool, however a poc cannot be done for it as another bug exist in GiantSavETHVaultPool which prevents it from receiving funds as it lacks a receive() or fallback() implementation.
Tools Used
Foundry
Recommended Mitigation Steps
UpdateidleETHin withdrawUnusedETHToGiantPool
vince0656 (Stakehouse) confirmed