[H-01]OUSGInstantManagerwill allow excessiveOUSGtoken minting duringUSDCdepeg event
Submitted byBreeje, also found byArz,HChang26, andimmeas
Any user can usemintfunction inousgInstantManagercontract to mintOUSGtokens by providingUSDCtoken. It calls internal function_mintwhere the main logic resides.
function_mint(uint256usdcAmountIn,addressto)internalreturns(uint256ousgAmountOut) {// SNIP: Validationuint256usdcfees=_getInstantMintFees(usdcAmountIn);uint256usdcAmountAfterFee=usdcAmountIn-usdcfees;// Calculate the mint amount based on mint fees and usdc quantityuint256ousgPrice=getOUSGPrice();ousgAmountOut=_getMintAmount(usdcAmountAfterFee,ousgPrice);require(ousgAmountOut>0,"OUSGInstantManager::_mint: net mint amount can't be zero");// SNIP: Transfering USDCousg.mint(to,ousgAmountOut);}
Two important points to understand
OUSGPrice Stability:
The contract depends on theOUSGprice obtained from an oracle, which is heavily constrained (as per Readme) to ensure stability.
OUSGPrice - TheOUSGprice tracks an off chain portfolio of cash equivalents and treasury bills, price changes are heavily constrained in theOUSGOracle, which uses the change in the price of SHV to set the allowableOUSGprice in between updates. We are aware that the SHV price could differ from theOUSGportfolio, so any findings related to this price discrepancy is out of scope. Also, scenarios where theOUSGprice increases by many orders of magnitudes are not realistic and consequently not considered valid.
As perRWAOracleRateCheckOracle, constraints includes:
OUSGprice updates restricted to once every23 hours.Price deviations limited to a maximum of1%.
functionsetPrice(int256newPrice)externalonlyRole(SETTER_ROLE) {if(newPrice<=0) {revertInvalidPrice();}@->if(block.timestamp-priceTimestamp<MIN_PRICE_UPDATE_WINDOW) {revertPriceUpdateWindowViolation();}@->if(_getPriceChangeBps(rwaPrice,newPrice) >MAX_CHANGE_DIFF_BPS) {revertDeltaDifferenceConstraintViolation();}// Set new priceint256oldPrice=rwaPrice;rwaPrice=newPrice;priceTimestamp=block.timestamp;emitRWAPriceSet(oldPrice,newPrice,block.timestamp);}
These constraints ensure relative stability of theOUSGprice.
Calculation Assumptions:
The calculation of the amount ofOUSGtokens to mint assumes a fixed conversion rate of1 USDC = 1 USD.
Key point: The_getMintAmountfunction calculates theOUSGamount based on the providedUSDCamount and theOUSGprice obtained from the oracle (by just upscaling and dividing).
function_getMintAmount(uint256usdcAmountIn,uint256price)internalviewreturns(uint256ousgAmountOut) {uint256amountE36=_scaleUp(usdcAmountIn) *1e18;ousgAmountOut=amountE36/price;}
Here, there are no validation checks implemented regarding the currentUSDCprice.
Scenario of the issue
Consider Alice’s attempt to mintOUSGtokens by providing100,000 USDC, assuming no minting fees andOUSGprice of105e18USD. The calculation yields:100_000e36 / 105e18which is approximately95_000e18or95_000OUSGtokens for the100_000USDCprovided.
However, in the event of aUSDCdepeg, whereUSDC’s value deviates from 1USD:
The contract’s calculation logic remains unchanged.Despite the depeg, theOUSGprice remains fairly constant (maximum 1% deviation allowed in 23 hours).
This scenario leads to Alice getting close to95_000OUSGtokens again for100_000 USDCprovided. But this time,100_000 USDCcan be worth as low as87_000USDif we take recent depeg event in March 2023, whereUSDCprice went as low as 87 cents (reference).
This way, contract will allow users to mint excessiveOUSGtokens during the depeg event.
Impact
Minting of excessive token in case ofUSDCdepeg.
Tools Used
VS Code
Recommended Mitigation Steps
Ideally, there needs to be an additional Oracle to check current price ofUSDCand take its price into the consideration when calculationOUSGtokens to mint.
Assessed type
Context
3docSec (judge) increased severity to High and commented:
Upgraded as High because there is risk of value extraction from the protocol under conditions that can be monitored by an attacker.
cameronclifton (Ondo) confirmed, but disagreed with severity and commented:
After further review, we will be mitigating this by adding a ChainlinkUSDC/USDoracle to theOUSGInstantManagercontract.  If the price is lower than what we are comfortable with, all mints and redemptions will be blocked. While we think it is unlikely that we won’t be able to convertUSDC->USD1:1 in our backend systems, we decided to do this out of extreme caution.
Note: For full discussion, seehere.