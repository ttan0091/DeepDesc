[H-03] A Malicious Treasury Manager Can Burn Treasury Tokens By SettingmakerFeeTo The Amount The Maker Receives
Submitted by leastwood
The treasury manager contract holds harvested assets/COMPfrom Notional which are used to performNOTEbuybacks or in other areas of the protocol. The manager account is allowed to sign off-chain orders used on 0x to exchange tokens toWETHwhich can then be deposited in the Balancer LP and distributed tosNOTEholders.
However,_validateOrderdoes not validate thattakerFeeandmakerFeeare set to zero, hence, it is possible for a malicious manager to receive tokens as part of a swap, but the treasury manager contract receives zero tokens asmakerFeeis set to the amount the maker receives. This can be abused to effectively burn treasury tokens at no cost to the order taker.
Proof of Concept
https://github.com/0xProject/0x-monorepo/blob/0571244e9e84b9ad778bccb99b837dd6f9baaf6e/contracts/exchange/contracts/src/MixinExchangeCore.sol#L196-L250
https://github.com/0xProject/0x-monorepo/blob/0571244e9e84b9ad778bccb99b837dd6f9baaf6e/contracts/exchange-libs/contracts/src/LibFillResults.sol#L59-L91
https://github.com/code-423n4/2022-01-notional/blob/main/contracts/utils/EIP1271Wallet.sol#L147-L188
function_validateOrder(bytesmemoryorder)privateview{(addressmakerToken,addresstakerToken,addressfeeRecipient,uint256makerAmount,uint256takerAmount) =_extractOrderInfo(order);// No fee recipient allowedrequire(feeRecipient==address(0),"no fee recipient allowed");// MakerToken should never be WETHrequire(makerToken!=address(WETH),"maker token must not be WETH");// TakerToken (proceeds) should always be WETHrequire(takerToken==address(WETH),"taker token must be WETH");addresspriceOracle=priceOracles[makerToken];// Price oracle not definedrequire(priceOracle!=address(0),"price oracle not defined");uint256slippageLimit=slippageLimits[makerToken];// Slippage limit not definedrequire(slippageLimit!=0,"slippage limit not defined");uint256oraclePrice=_toUint(AggregatorV2V3Interface(priceOracle).latestAnswer());uint256priceFloor= (oraclePrice*slippageLimit) /SLIPPAGE_LIMIT_PRECISION;uint256makerDecimals=10**ERC20(makerToken).decimals();// makerPrice = takerAmount / makerAmountuint256makerPrice= (takerAmount*makerDecimals) /makerAmount;require(makerPrice>=priceFloor,"slippage is too high");}
Recommended Mitigation Steps
Consider checking thatmakerFee == 0andtakerFee == 0inEIP1271Wallet._validateOrders.t. the treasury manager cannot sign unfair orders which severely impact theTreasuryManagercontract.
jeffywu (Notional) confirmed and commented:
Confirmed, we will fix this.
pauliax (judge) commented:
Good job warden for identifying this issue with 0x integration.