[H-01] Arbitrary contract call allows attackers to steal ERC20 from usersâ€™ wallets
Submitted by WatchPug
Swap.sol L200-L212
functionfillZrxQuote(IERC20zrxBuyTokenAddress,addresspayablezrxTo,bytescalldatazrxData,uint256ethAmount)internalreturns(uint256,uint256) {uint256originalERC20Balance=0;if(!signifiesETHOrZero(address(zrxBuyTokenAddress))) {originalERC20Balance=zrxBuyTokenAddress.balanceOf(address(this));}uint256originalETHBalance=address(this).balance;(boolsuccess,) =zrxTo.call{value:ethAmount}(zrxData);
A call to an arbitrary contract with custom calldata is made infillZrxQuote(), which means the contract can be an ERC20 token, and the calldata can betransferFroma previously approved user.
Impact
The wallet balances (for the amount up to the allowance limit) of the tokens that users approved to the contract can be stolen.
PoC
Given:
Alice has approved 1000 WETH toSwap.sol;
The attacker can:
TallySwap.swapByQuote(address(WETH),0,address(WETH),0,address(0),address(WETH),abi.encodeWithSignature("transferFrom(address,address,uint256)",address(Alice),address(this),1000ether))
As a result, 1000 WETH will be stolen from Alice and sent to the attacker.
This PoC has been tested on a forking network.
Recommendation
Consider adding a whitelist forzrxToaddresses.
Shadowfiend (Tally) confirmed