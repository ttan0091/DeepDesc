[H-03] Thecollect()function will always TRANSFER ZERO fees, losing _feesPositions without receiving fees!
Submitted bychaduke, also found byBeepidibopand0xcm
Detailed description of the impact of this finding.
Thecollect()function will always transfer ZERO fees. At the same time, non-zero_feesPositionwill be burned.
_feesPositions[id][msg.sender].burn(long0Fees, long1Fees, shortFees);
As a result, the contracts will be left in an inconsistent state. The user will burn_feesPositionswithout receiving the fees!
Proof of Concept
Provide direct links to all referenced code in GitHub. Add screenshots, logs, or any other relevant proof that illustrates the concept.
Thecollect()function will always transfer ZERO fees   in the following line:
// transfer the fees amount to the recipientITimeswapV2Pool(poolPair).transferFees(param.strike, param.maturity, param.to, long0Fees, long1Fees, shortFees);
This is because, at this moment, the values oflong0Fees,long1Fees,shortFeeshave not been calculated yet, actually, they will be equal to zero. Therefore, no fees will be transferred. The values oflong0Fees,long1Fees,shortFeesare calculated afterwards by the following line:
(long0Fees, long1Fees, shortFees) = _feesPositions[id][msg.sender].getFees(param.long0FeesDesired, param.long1FeesDesired, param.shortFeesDesired);
Therefore,ITimeswapV2Pool(poolPair).transferFeesmust be called after this line to be correct.
Tools Used
Remix
Recommended Mitigation Steps
We moved the lineITimeswapV2Pool(poolPair).transferFeesafterlong0Fees,long1Fees,shortFeeshave been calculated first.
function collect(TimeswapV2LiquidityTokenCollectParam calldata param) external returns (uint256 long0Fees, uint256 long1Fees, uint256 shortFees, bytes memory data) {ParamLibrary.check(param);bytes32 key = TimeswapV2LiquidityTokenPosition({token0: param.token0, token1: param.token1, strike: param.strike, maturity: param.maturity}).toKey();// start the reentrancy guardraiseGuard(key);(, address poolPair) = PoolFactoryLibrary.getWithCheck(optionFactory, poolFactory, param.token0, param.token1);uint256 id = _timeswapV2LiquidityTokenPositionIds[key];_updateFeesPositions(msg.sender, address(0), id);(long0Fees, long1Fees, shortFees) = _feesPositions[id][msg.sender].getFees(param.long0FeesDesired, param.long1FeesDesired, param.shortFeesDesired);if (param.data.length != 0)data = ITimeswapV2LiquidityTokenCollectCallback(msg.sender).timeswapV2LiquidityTokenCollectCallback(TimeswapV2LiquidityTokenCollectCallbackParam({token0: param.token0,token1: param.token1,strike: param.strike,maturity: param.maturity,long0Fees: long0Fees,long1Fees: long1Fees,shortFees: shortFees,data: param.data}));// transfer the fees amount to the recipientITimeswapV2Pool(poolPair).transferFees(param.strike, param.maturity, param.to, long0Fees, long1Fees, shortFees);// burn the desired fees from the fees position_feesPositions[id][msg.sender].burn(long0Fees, long1Fees, shortFees);if (long0Fees != 0 || long1Fees != 0 || shortFees != 0) _removeTokenEnumeration(msg.sender, address(0), id, 0);// stop the reentrancy guardlowerGuard(key);}
vhawk19 (Timeswap) confirmed and resolved:
Fixed inPR.