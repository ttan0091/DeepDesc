[H-03] Overflow can still happen when calculatingpriceX8insidepoolMatchesOracleoperation
Submitted bysaid, also found byradev_sw,Satyam_Sharma,0xmuxyz,LokiThe5th,Team_FliBit, andT1MOH
poolMatchesOracleis used to compare price calculated from uniswap v3 pool and chainlink oracle and decide whether rebalance should happened or not.priceX8will be holding price information calculated usingsqrtPriceX96and when operations is performed, it will try to scale down using2 ** 12. However, the scale down is not enough and overflow can still happened.
Proof of Concept
Consider this scenario, The GeVault is using WBTC fortoken0and WETH fortoken1.
These are information for the WBTC/WETH from uniswap v3 pool (0x4585FE77225b41b697C938B018E2Ac67Ac5a20c0):
slot0 data (at current time) :
sqrtPriceX96   uint160 :  31520141554881197083247204479961147
token0(WBTC) decimals is 8 andtoken1(WETH) decimals is 18.
Using these information, try to reproduce thepriceX8calculation :
functiontestOraclePrice()public{uint160sqrtPriceX96=31520141554881197083247204479961147;// decimals0 is 8uintpriceX8=10**8;// Overflow if dont scale down the sqrtPrice before div 2*192// @audit - the overflow still possiblepriceX8=(priceX8*uint(sqrtPriceX96/2**12) **2*1e8) /2**168;// decimals1 is 18priceX8=priceX8/10**18;assertEq(true,true);}
the test result in overflow :
[FAIL. Reason: Arithmetic over/underflow] testOraclePrice()
This will cause calculation still overflow, even using the widely used WBTC/WETH pair
Recommended Mitigation Steps
Consider to change the scale down using the recommended value from uniswap v3 library:
https://github.com/Uniswap/v3-periphery/blob/main/contracts/libraries/OracleLibrary.sol#L49-L69
or change the scale down similar to the one used inside library
function poolMatchesOracle() public view returns (bool matches){(uint160 sqrtPriceX96,,,,,,) = uniswapPool.slot0();uint decimals0 = token0.decimals();uint decimals1 = token1.decimals();uint priceX8 = 10**decimals0;// Overflow if dont scale down the sqrtPrice before div 2*192-    priceX8 = priceX8 * uint(sqrtPriceX96 / 2 ** 12) ** 2 * 1e8 / 2**168;+    priceX8 = priceX8 * (uint(sqrtPriceX96) ** 2 / 2 ** 64) * 1e8 / 2**128;priceX8 = priceX8 / 10**decimals1;uint oraclePrice = 1e8 * oracle.getAssetPrice(address(token0)) / oracle.getAssetPrice(address(token1));if (oraclePrice < priceX8 * 101 / 100 && oraclePrice > priceX8 * 99 / 100) matches = true;}
Keref (Good Entry) confirmed and commented:
SeePR#3.
Good Entry Mitigated:
Scale downsqrtPriceX96to prevent overflow.PR:https://github.com/GoodEntry-io/ge/pull/3
Status:Mitigation confirmed. Full details in reports fromkutugu,xuwinnieand3docSec.