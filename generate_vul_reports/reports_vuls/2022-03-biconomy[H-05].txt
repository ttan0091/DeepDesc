[H-05] Users will lose a majority or even all of the rewards when the amount of total shares is too large, due to precision loss
Submitted by WatchPug, also found by hyh
LiquidityFarming.sol#L265-L291
functiongetUpdatedAccTokenPerShare(address_baseToken)publicviewreturns(uint256) {uint256accumulator=0;uint256lastUpdatedTime=poolInfo[_baseToken].lastRewardTime;uint256counter=block.timestamp;uint256i=rewardRateLog[_baseToken].length-1;while(true) {if(lastUpdatedTime>=counter) {break;}unchecked{accumulator+=rewardRateLog[_baseToken][i].rewardsPerSecond*(counter-max(lastUpdatedTime,rewardRateLog[_baseToken][i].timestamp));}counter=rewardRateLog[_baseToken][i].timestamp;if(i==0) {break;}--i;}// We know that during all the periods that were included in the current iterations,// the value of totalSharesStaked[_baseToken] would not have changed, as we only consider the// updates to the pool that happened after the lastUpdatedTime.accumulator= (accumulator*ACC_TOKEN_PRECISION) /totalSharesStaked[_baseToken];returnaccumulator+poolInfo[_baseToken].accTokenPerShare;}
LiquidityProviders.sol#L286-L292
uint256mintedSharesAmount;// Adding liquidity in the pool for the first timeif(totalReserve[token] ==0) {mintedSharesAmount=BASE_DIVISOR*_amount;}else{mintedSharesAmount= (_amount*totalSharesMinted[token]) /totalReserve[token];}
InHyphenLiquidityFarming, theaccTokenPerShareis calculated based on the total staked shares.
However, as themintedSharesAmountcan easily become very large onLiquidityProviders.sol, all the users can lose their rewards due to precision loss.
Proof of Concept
Given:
rewardsPerSecond is10e18;lastRewardTime is 24 hrs ago;
Then:
AliceaddTokenLiquidity()with1e8 * 1e18XYZ on B-Chain, totalSharesMinted ==1e44;Alicedeposit()to HyphenLiquidityFarming, totalSharesStaked ==1e44;24 hrs later, Alice tries to claim the rewards.
accumulator = rewardsPerSecond * 24 hours== 864000e18 == 8.64e23
Expected Results: As the sole staker, Alice should get all the864000e18rewards.
Actual Results: Alice received 0 rewards.
Thatâ€™s because whentotalSharesStaked > 1e36,accumulator = (accumulator * ACC_TOKEN_PRECISION) / totalSharesStaked[_baseToken];will be round down to0.
When thetotalSharesStakedis large enough, all users will lose their rewards due to precision loss.
Recommended Mitigation Steps
Consider lowering theBASE_DIVISORso that the initial share price can be higher;Consider makingACC_TOKEN_PRECISIONlarger to prevent precision loss;
See also the Recommendation onIssue #139.
ankurdubey521 (Biconomy) confirmed
pauliax (judge) commented:
Great find, probably deserves a severity of high.