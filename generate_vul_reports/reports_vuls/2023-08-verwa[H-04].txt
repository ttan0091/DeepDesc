[H-04] Delegated votes are locked when owner lock is expired
Submitted byltyu, also found byqpzm,RED-LOTUS-REACH,bart1e,0xDING99YA,zhaojie,popular00,MrPotatoMagic,carrotsmuggler,pep7siup,3docSec,mert_eren,kaden,Yuki,seerether,KmanOfficial, cducrest (1,2),Tendency, andbin2chen
https://github.com/code-423n4/2023-08-verwa/blob/a693b4db05b9e202816346a6f9cada94f28a2698/src/VotingEscrow.sol#L331
https://github.com/code-423n4/2023-08-verwa/blob/a693b4db05b9e202816346a6f9cada94f28a2698/src/VotingEscrow.sol#L371-L374
https://github.com/code-423n4/2023-08-verwa/blob/a693b4db05b9e202816346a6f9cada94f28a2698/src/VotingEscrow.sol#L383
Indelegate()of VoteEscrow.sol, a user is able to delegate their locked votes to someone else, and undelegate (i.e. delegate back to themselves). When the user tries to re-delegate, either to someone else or themselves, the lock must not be expired. This is problematic because if a user forgets and lets their lock become expired, they cannot undelegate. This blocks withdrawal, which means their tokens are essentially locked forever.
Proof of Concept
To exit the system, Alice must callwithdraw(). However, since they’ve delegated, they will not be able to.
functionwithdraw()externalnonReentrant{...require(locked_.delegatee==msg.sender,"Lock delegated");...}To re-delegate to themselves (undelegate), they calldelegate(alice.address). However, there is a check to see iftoLocked.endhas expired, which would be true since it would point to Alice’s lock.function delegate(address _addr) external nonReentrant {LockedBalance memory locked_ = locked[msg.sender];...LockedBalance memory fromLocked;LockedBalance memory toLocked;locked_.delegatee = _addr;if (delegatee == msg.sender) {...// @audit this else if will execute} else if (_addr == msg.sender) {// UndelegatefromLocked = locked[delegatee]; // @audit DelegateetoLocked = locked_; // @audit Alice's lock}...require(toLocked.end > block.timestamp, "Delegatee lock expired");This is a test to be added into VoteEscrow.t.sol. It can be manually run by executingforge test --match-test testUnSuccessUnDelegate.functiontestUnSuccessUnDelegate()public{testSuccessDelegate();vm.warp(ve.LOCKTIME() +1days);// Try to undelegatevm.startPrank(user1);vm.expectRevert("Delegatee lock expired");ve.delegate(user1);// Still user2(, , ,addressdelegatee) =ve.locked(user1);assertEq(delegatee,user2);}
Recommended Mitigation Steps
Consider refactoring the code to skiptoLocked.end > block.timestampif undelegating. For example, adding a small delay (e.g., 1 second) to the lock end time when a user undelegates.
alcueca (Judge) commented:
This vulnerability, if not found, would have meant that some users would have permanently lost assets in the form of voting power. While at that point the application owners would certainly warn users to not let their locks expire without undelegating, many users would not get the warning, as it is not that easy to make sure that every user is aware of something. The result is that time and again, users would get their tokens locked forever.
OpenCoreCH (veRWA) confirmed on duplicate 112