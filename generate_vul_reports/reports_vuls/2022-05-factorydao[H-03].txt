[H-03] MerkleVesting withdrawal does not verify that tokens were transferred successfully
Submitted by kenzo, also found by IllIllI
Across the codebase, the protocol is usually checking that ERC20 transfers have succeeded by checking their return value.
This check is missing in MerkleVesting’swithdrawfunction.
Impact
If for some reason the ERC20 transfer is temporarily failing, the user would totally lose his allocation and funds.
All the state variables would already have been updated at this stage, so he can’t callwithdrawagain.
There is no way to withdraw these locked tokens.
Proof of Concept
At the last point ofwithdraw, the functionis sendingthe funds to the user, and does not check the return value - whether it has succeeded:
IERC20(tree.tokenAddress).transfer(destination, currentWithdrawal);
Note that this is (nicely and rightfully) done after all the state variables have been updated.
As the return value of the external call is not checked, if it has failed, the contract wouldn’t know about it, and the function will finish “successfully”.
Recommended Mitigation Steps
As done throughout the rest of the protocol, add a check that verifies that the transfer has succeeded.
illuzen (FactoryDAO) acknowledged, disagreed with severity and commented:
Debatable, since requiring successful transfer means we can’t do non-standard tokens like USDT. Also, tokens could be malicious and simply lie about the success.
Justin Goro (judge) commented:
Regarding the non standard tokens that don’t return bools, the common approach to performing a low level call with(bool success, _)  = address(token).call(//etcallows for transfers to be validated for USDT.Severity will stand because this function represents user funds.