[H-01] Royalty receiver can drain a private pool
Submitted byVoyvoda, also found byAkshaySrivastav,teddav,aviggiano, andHaipls
https://github.com/code-423n4/2023-04-caviar/blob/main/src/PrivatePool.sol#L237-L252
https://github.com/code-423n4/2023-04-caviar/blob/main/src/PrivatePool.sol#L267-L268
https://github.com/code-423n4/2023-04-caviar/blob/main/src/PrivatePool.sol#L274
Impact
Royalty fee calculation has a serious flaw inbuy(...). Caviar’s private pools could be completely drained.
In the Caviar private pool,NFT royaltiesare being paid from themsg.senderto the NFT royalty receiver of each token in PrivatePool.buy and PrivatePool.sell:
https://github.com/code-423n4/2023-04-caviar/blob/main/src/PrivatePool.sol#L271-L285
#buy(uint256[],uint256[],MerkleMultiProof)271:if(payRoyalties) {...274:        (uint256royaltyFee,addressrecipient) =_getRoyalty(tokenIds[i],salePrice);...278:if(baseToken!=address(0)) {279:ERC20(baseToken).safeTransfer(recipient,royaltyFee);280:        }else{281:recipient.safeTransferETH(royaltyFee);282:        }
https://github.com/code-423n4/2023-04-caviar/blob/main/src/PrivatePool.sol#L328-L352
#sell(uint256[],uint256[],MerkleMultiProof,IStolenNftOracle.Message[])329:for(uint256i=0;i<tokenIds.length;i++) {...333:if(payRoyalties) {...338:            (uint256royaltyFee,addressrecipient) =_getRoyalty(tokenIds[i],salePrice);...345:if(baseToken!=address(0)) {346:ERC20(baseToken).safeTransfer(recipient,royaltyFee);347:            }else{348:recipient.safeTransferETH(royaltyFee);349:            }
In both functions, the amount needed to pay all royalties is taken from themsg.senderwho is either the buyer or the seller depending on the context. In PrivatePool.sell, this amount is first paid by the pool and then taken from themsg.senderby simply reducing what they receive in return for the NFTs they are selling. A similar thing is done in PrivatePool.buy, but instead of reducing the output amount, the input amount of base tokens that themsg.sender(buyer) should pay to the pool is increased:
https://github.com/code-423n4/2023-04-caviar/blob/main/src/PrivatePool.sol#L251-L252
#buy(uint256[],uint256[],MerkleMultiProof)251:// add the royalty fee amount to the net input aount252:netInputAmount+=royaltyFeeAmount;
https://github.com/code-423n4/2023-04-caviar/blob/main/src/PrivatePool.sol#L354-L355
#sell(uint256[],uint256[],MerkleMultiProof,IStolenNftOracle.Message[])354:// subtract the royalty fee amount from the net output amount355:netOutputAmount-=royaltyFeeAmount;
The difference between these two functions (that lies at the core of the problem) is that in PrivatePool.buy, the_getRoyaltyfunction is called twice. The first time is to calculate the total amount of royalties to be paid, and the second time is to actually send each royalty fee to each recipient:
https://github.com/code-423n4/2023-04-caviar/blob/main/src/PrivatePool.sol#L242-L248
https://github.com/code-423n4/2023-04-caviar/blob/main/src/PrivatePool.sol#L273-L274
#buy(uint256[],uint256[],MerkleMultiProof)242:if(payRoyalties) {243:// get the royalty fee for the NFT244:        (uint256royaltyFee,) =_getRoyalty(tokenIds[i],salePrice);// @audit _getRoyalty called 1st time245:246:// add the royalty fee to the total royalty fee amount247:royaltyFeeAmount+=royaltyFee;248:    }...273:// get the royalty fee for the NFT274:    (uint256royaltyFee,addressrecipient) =_getRoyalty(tokenIds[i],salePrice);// @audit  _getRoyalty called 2nd time
This is problematic because an attacker could potentially change the royalty fee between the two calls, due to the following untrusted external call:
https://github.com/code-423n4/2023-04-caviar/blob/main/src/PrivatePool.sol#L267-L268
#buy(uint256[],uint256[],MerkleMultiProof)267:// refund any excess ETH to the caller268:if(msg.value>netInputAmount)msg.sender.safeTransferETH(msg.value-netInputAmount);// @audit untrusted external call
If themsg.senderis a malicious contract that has control over theroyaltyFeefor the NFTs that are being bought, they can change it, for example, from 0 basis points (0%) to 10000 basis points (100%) in theirreceive()function.
https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/common/ERC2981.sol#L94-L99
// @audit An attacker can call this setter function between the two `_getRoyalty()` calls.94:function_setTokenRoyalty(uint256tokenId,addressreceiver,uint96feeNumerator)internalvirtual{95:require(feeNumerator<=_feeDenominator(),"ERC2981: royalty fee will exceed salePrice");96:require(receiver!=address(0),"ERC2981: Invalid parameters");97:98:_tokenRoyaltyInfo[tokenId] =RoyaltyInfo(receiver,feeNumerator);99:     }
That way, the amount transferred by themsg.senderfor royalties will be 0 because the totalroyaltyFeeAmountis calculated based on the first value (0%) but the actual sent amount to the receiver is determined by the second value (100%). This will result in the whole price paid for the NFT being returned to the royalty receiver, but being paid by the Pool instead of themsg.sender.
Themsg.senderhas therefore received the NFT but paid the whole price for it to the royalty receiver and 0 to the Pool. If themsg.senderis the royalty receiver, they will basically have spent 0 base tokens (not counting gas expenses) but received the NFT in their account. They can then sell it to the same private pool to exchange it for base tokens.
This is an extreme scenario, however, the developers have acknowledged ERC-2981 and thatroyaltyInfo(...)returns an arbitrary address. In the future we could see projects that have royalty payments that fluctuate such as increasing/decaying royalties over timearticle on eip 2981or projects that delegate the creation of nfts to the users such as 1024pixelspolygon,git repoand royalties are paid to each user rather to a single creator. In such cases invocation of_getRoyalty(...)twice with external calls that transfer assets in-between is a vulnerable pattern that is sure to introduce asset risks and calculation inaccuracies both for the users and protocol itself. Immediate remedy would be to simplifybuy(...)inPrivatePool.solto use only onefor loopand call_getRoyalty(...)once.
PoC shows how the entire Pool’s base tokens can be drained by a single royalty receiver using a single NFT assuming that the royalty receiver has control over the royaltyFee.
Proof of Concept
See warden’soriginal submissionfor full Proof of Concept.
Tools Used
Foundry
Recommended Mitigation Steps
Ensure that the amount sent to the NFT royalty receivers in the secondforloop inbuy()is the same as the amount calculated in the firstforloop.
Alex the Entreprenerd (judge) commented:
The Warden has shown how, because of reEntrancy and due to the same call being performed for royalties, a malicious royalty recipient can drain the pool of all funds.I have considered downgrading the finding because of the conditionality of the royalty recipient being malicious, however, I don’t believe this can be considered an external condition, as any account able to change the royalty setting could willingly or unwillingly enable the attack.For this reason I believe that the finding is of High Severity.
outdoteth (Caviar) confirmed via duplicate issue#593and mitigated:
Fixed in:https://github.com/outdoteth/caviar-private-pools/pull/12.
Status:Mitigation confirmed. Full details in reports fromrbserver,KrisApostolov, andrvierdiiev.