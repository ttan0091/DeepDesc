[H-05] Centralisation RIsk: Owner OfRoyaltyVaultCan Take All Funds
Submitted by kirk-baird, also found by 0xDjango, defsec, Dravee, hubble, hyh, leastwood, minhquanym, Ruhum, TomFrenchBlockchain, and WatchPug
The owner ofRoyaltyVaultcan set_platformFeeto any arbitrary value (e.g. 100% = 10000) and that share of the contracts balance and future balances will be set to theplatformFeeRecipient(which is in the owners control) rather than the splitter contract.
As a result the owner can steal the entire contract balance and any future balances avoiding the splitter.
Proof of Concept
function setPlatformFee(uint256 _platformFee) external override onlyOwner {platformFee = _platformFee;emit NewRoyaltyVaultPlatformFee(_platformFee);}
Recommended Mitigation Steps
This issue may be mitigated by add a maximum value for the_platformFeesay 5% (or some reasonable value based on the needs of the platform).
Also consider callingsendToSplitter()before adjusting theplatformFee. This will only allow the owner to change the fee for future value excluding the current contract balance.
Consider the following code.
function setPlatformFee(uint256 _platformFee) external override onlyOwner {require(_platformFee < MAX_FEE);sendToSplitter(); // @audit this will need to be public rather than externalplatformFee = _platformFee;emit NewRoyaltyVaultPlatformFee(_platformFee);}
sofianeOuafir (Joyn) confirmed and commented:
This is an issue and we intend to fix it. The recommended mitigation looks good and will be considered.We also agree that this is a med risk as this can currently only be done by the contract owner which is us at Joyn
deluca-mike (judge) commented:
Instead of having to come up with a “reasonable”MAX_FEE, consider instead just preventing the fee from ever being raised, and only allowing it to be lowered.
deluca-mike (judge) increased severity to High and commented:
While I was originally leaning Medium Risk, after taking the arguments made by the duplicate issues into account, I am now leaning High Risk. The rationale is that, a DOS ofsendToSplittervia a highplatformFeenot only harms stakeholders of theRoyaltyVaultthat would get the remainder of the balance, split, but may also prevent all NFT transfers ifsendToSplitteris hooked into as part of all token transfer, via royalty payments. A malicious or disgruntledRoyaltyVaultowner can hold all the NFTs hostage that callsendToSplitteratomically on transfers.So there are 2 issues that need to be solved here:protect NFT holders by ensuringplatformFee(or any other values) cannot be set to a value that would causesendToSplitterto fail (splitterShare = 0orplatformShare > balanceOfVault), or don’t havesendToSplitterbe called on NFT transfersprotect royalty split recipients by putting an arbitrary max to the fee, or only allowing the fee to be reduced