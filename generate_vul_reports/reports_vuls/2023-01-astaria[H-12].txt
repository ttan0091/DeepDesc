[H-12] Borrower can use liquidationInitialAsk to block future borrowers
Submitted byobront
https://github.com/code-423n4/2023-01-astaria/blob/1bfc58b42109b839528ab1c21dc9803d663df898/src/LienToken.sol#L471-L489https://github.com/code-423n4/2023-01-astaria/blob/1bfc58b42109b839528ab1c21dc9803d663df898/src/LienToken.sol#L153-L174
When a new lien is taken (or bought out), one of the validations is to ensure that thepotentialDebtof each borrower on the stack is less than or equal to theirliquidationInitialAsk.
if (potentialDebt > newStack[j].lien.details.liquidationInitialAsk) {revert InvalidState(InvalidStates.INITIAL_ASK_EXCEEDED);}
In_appendStack()and_buyoutLien(), this is performed by iterating through the stack backwards, totaling up thepotentialDebt, and comparing it to each lien’sliquidationInitialAsk:
for (uint256 i = stack.length; i > 0; ) {uint256 j = i - 1;newStack[j] = stack[j];if (block.timestamp >= newStack[j].point.end) {revert InvalidState(InvalidStates.EXPIRED_LIEN);}unchecked {potentialDebt += _getOwed(newStack[j], newStack[j].point.end);}if (potentialDebt > newStack[j].lien.details.liquidationInitialAsk) {revert InvalidState(InvalidStates.INITIAL_ASK_EXCEEDED);}unchecked {--i;}}
However, only the first item on the stack has aliquidationInitialAskthat matters. When a new auction is started on Seaport,Router#liquidate()usesstack[0].lien.details.liquidationInitialAskas the starting price. The other values are meaningless, except in their ability to DOS future borrowers.
Proof of Concept
I set myliquidationInitialAskto be exactly the value of my loanA borrower has already borrowed on their collateral, and the first loan on the stack will determine the auction priceWhen they borrow from me, myliquidationInitialAskis recordedAny future borrows will check thatfutureBorrow + myBorrow <= myLiquidationInitialAsk, which is not possible for anyfutureBorrow > 0The result is that the borrower will be DOS’d from all future borrows
This is made worse by the fact thatliquidationInitialAskis not a variable that can justify a refinance, so they’ll need to either pay back the loan or find a refinancier who will beat one of the other terms (rate or duration) in order to get rid of this burden.
Recommended Mitigation Steps
Get rid of all checks onliquidationInitialAskexcept for comparing the total potential debt of the entire stack to theliquidationInitialAskof the lien at position 0.
Picodes (judge) commented:
The scenario is correct but I don’t think it is of high severity at first sight, considering settingliquidationInitialAsktoo low only exposes the lender to a potential bad debt if the dutch auction settles below its debt
Picodes (judge) commented:
However, it seems from this and other findings that leaving theliquidationInitialAskat thelienlevel has multiple unintended side effects.
SantiagoGregory (Astaria) confirmed