[H-06] RubiconRouter _swap does not pass whole amount to RubiconMarket
Submitted by kenzo, also found by IllIllI, PP1004, blackscale, and hansfriese
When swapping amongst multiple pairs in RubiconRouter’s_swap, the fee is wrongly accounted for.
Impact
Not all of the user’s funds would be forwarded to RubiconMarket, therefore the user would lose funds.
Proof of Concept
The_swapfunction is calculating the pay amount to send to RubiconMarket.sellAllAmountto be:
currentAmount.sub(currentAmount.mul(expectedMarketFeeBPS).div(10000)
But this would lead to not all of the funds being pulled by RubiconMarket.
I mathematically show this inthis image.
The correct parameter that needs to be sent to sellAllAmount is:
currentAmount.sub(currentAmount.mul(expectedMarketFeeBPS).div(10000+expectedMarketFeeBPS)
I mathematically prove this inthis image.
Recommended Mitigation Steps
Change the parameter to the abovementioned one.
bghughes (Rubicon) confirmed
HickupHH3 (judge) commented:
For the benefit of readers who aren’t as math savvy, let’s work this out with a numerical example.Let’s assume a 1% fee:expectedMarketFeeBPS = 100.
The RubiconMarket charges and pulls this fee separately, so if I have a trade amount of 100, what would be the actual amount to pass into the function?The current implementation is100 - 1% * 100 = 100 - 1 = 99. However, if that’s the case, the market charges 1% of 99 instead, which is 0.99. Hence, the total amount used is99 + 0.99 = 99.99, leaving a dust amount of0.01.Thus, as the warden has proven mathematically, the formula should be100 - 100 * 100 / (10_000 + 100) ~= 99.0099. Then, the 1% fee charged is0.990099..., making the total approximately equal to 100 (rounding errors).