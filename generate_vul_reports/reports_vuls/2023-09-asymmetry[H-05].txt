[H-05] Functions in theVotiumStrategycontract are susceptible to sandwich attacks
Submitted byMiloTruck, also found byMiloTruck,d3e4, adriro (1,2),m_Rassska, andrvierdiiev
InVotiumStrategyCore.sol, thebuyCvx()andsellCvx()functions callexchange_underlying()of Curve’s ETH / CVX pool to buy and sell CVX respectively:
VotiumStrategyCore.sol#L233-L240
ICrvEthPool(CVX_ETH_CRV_POOL_ADDRESS).exchange_underlying{value:_ethAmountIn}(0,1,_ethAmountIn,0// this is handled at the afEth level);
VotiumStrategyCore.sol#L258-L263
ICrvEthPool(CVX_ETH_CRV_POOL_ADDRESS).exchange_underlying(1,0,_cvxAmountIn,0// this is handled at the afEth level);
As seen from above,exchange_underlying()is called with its_min_dyparameter as 0, which means the minimum amount of CVX or ETH to receive from the swap is effectively 0.
This isn’t an issue when users interact with theAfEthcontract, as itsdeposit()andwithdraw()functions include a_minOutparameter which protects against slippage.
However, users that interact with theVotiumStrategycontract directly will not be protected from slippage when they call any of the following functions:
deposit(), which callsbuyCvx()depositRewards(), which callsbuyCvx()withdraw(), which callssellCvx()
Should users call any of the functions listed above directly, they will be susceptible to sandwich attacks by attackers, which would reduce the amount of CVX or ETH received from the swap with curve’s pool.
Impact
Due to a lack of slippage protection inbuyCvx()andsellCvx(), users that interact with theVotiumStrategycontract will be susceptible to sandwich attacks. This results in a loss of funds for them as they will receive less CVX or ETH for the same amount of funds.
Proof of Concept
Consider the following scenario:
Bob calls theVotiumStrategycontract’sdeposit()function directly to deposit ETH.Alice sees his transaction in the mempool and front-runs his transaction. She swaps a large amount of ETH into the Curve pool and gets CVX in return.Now, Bob’s transaction is executed:buyCvx()attempts to swap Bob’s ETH deposit for CVX.However, since the pool currently has a lot more ETH than CVX, Bob only gets a small amount of CVX in return.Alice back-runs Bob’s transaction and swaps the CVX she gained for ETH in the pool, which would result in a profit for her.
In this scenario, Alice has sandwiched Bob’sdeposit()transaction for a profit, causing Bob to receive less CVX for his deposited ETH.
Recommended Mitigation
Consider adding a_minOutparameter to eitherbuyCvx()andsellCvx(), or the following functions:
deposit()depositRewards()withdraw()
This allows the caller to specify a minimum amount they expect from the swap, which would protect them from slippage.
elmutt (Asymmetry) confirmed and commented:
@toshiSat - I think we should just lock this down so afEth can only use votium strategy.
0xleastwood (Judge) commented:
Marking this as primary issue and best report because it addresses all edge cases where slippage should be checked.
elmutt (Asymmetry) commented:
In order fully solve it and issues marked as duplicates x(#24,#61,#15) we also need to pass _minout to afEth.applyRewards() :
0xleastwood (Judge) commented:
@elmutt - Agree with you on this.
Asymmetry mitigated:
For this one we locked down the depositRewards function and added a minout to the reward functions.
Status: Mitigation confirmed. Full details in reports fromd3e4andadriro.