[H-01] Improper precision of strike price calculation can result in broken protocol
Submitted byToshii, also found byMatin,Qeew,visualbits,crunch,circlelooper,qpzm,Jiamin,pep7siup,Juntao,0xmystery,eeshenggoh, lsaudit (1,2),peakbolt,0xDING99YA,Cosine,Topmark,0x3b,deadrxsezzz,piyushshukla, andcatwhiskeys
https://github.com/code-423n4/2023-08-dopex/blob/main/contracts/core/RdpxV2Core.sol#L1189-L1190
https://github.com/code-423n4/2023-08-dopex/blob/main/contracts/perp-vault/PerpetualAtlanticVault.sol#L576-L583
Due to a lack of adequate precision, the calculated strike price for a PUT option for rDPX is not guaranteed to be 25% OTM, which breaks core assumptions around (1) protecting downside price movement of the rDPX which makes up part of the collateral for dpxETH & (2) not overpaying for PUT option protection.
More specifically, the price of rDPX as used in thecalculateBondCostfunction of the RdpxV2Core contract is represented as ETH / rDPX, and is given in 8 decimals of precision. To calculate the strike price which is 25% OTM based on the current price, the logic calls theroundUpfunction on what is effectively 75% of the current spot rDPX price. The issue is with theroundUpfunction of the PerpetualAtlanticVault contract, which effectively imposes a minimum value of 1e6.
Considering approximate recent market prices of$2000/ETH and$20/rDPX, the current price of rDPX in 8 decimals of precision would be exactly 1e6. Then to calculate the 25% OTM strike price, we would arrive at a strike price of1e6 * 0.75 = 75e4. TheroundUpfunction will then round up this value to1e6as the strike price, and issue the PUT option using that invalid strike price. Obviously this strike price is not 25% OTM, and since its an ITM option, the premium imposed will be significantly higher. Additionally this does not match the implementation as outlined in the docs.
Proof of Concept
When a user calls thebondfunction of the RdpxV2Core contract, it will calculate therdpxRequiredandwethRequiredrequired by the user in order to mint a specific_amountof dpxETH, which is calculated using thecalculateBondCostfunction:
functionbond(uint256_amount,uint256rdpxBondId,address_to)publicreturns(uint256receiptTokenAmount) {_whenNotPaused();// Validate amount_validate(_amount>0,4);// Compute the bond cost(uint256rdpxRequired,uint256wethRequired) =calculateBondCost(_amount,rdpxBondId);...}
Along with the collateral requirements, thewethRequiredwill also include the ETH premium required to mint the PUT option. The amount of premium is calculated based on a strike price which represents 75% of the current price of rDPX (25% OTM PUT option). In thecalculateBondCostfunction:
functioncalculateBondCost(uint256_amount,uint256_rdpxBondId)publicviewreturns(uint256rdpxRequired,uint256wethRequired) {uint256rdpxPrice=getRdpxPrice();...uint256strike=IPerpetualAtlanticVault(addresses.perpetualAtlanticVault).roundUp(rdpxPrice- (rdpxPrice/4));// 25% below the current priceuint256timeToExpiry=IPerpetualAtlanticVault(addresses.perpetualAtlanticVault).nextFundingPaymentTimestamp() -block.timestamp;if(putOptionsRequired) {wethRequired+=IPerpetualAtlanticVault(addresses.perpetualAtlanticVault).calculatePremium(strike,rdpxRequired,timeToExpiry,0);}}
As shown, the strike price is calculated as:
uint256strike=IPerpetualAtlanticVault(addresses.perpetualAtlanticVault).roundUp(rdpxPrice- (rdpxPrice/4));
It uses theroundUpfunction of the PerpetualAtlanticVault contract which is defined as follows:
functionroundUp(uint256_strike)publicviewreturns(uint256strike) {uint256remainder=_strike%roundingPrecision;if(remainder==0) {return_strike;}else{return_strike-remainder+roundingPrecision;}}
In this contractroundingPrecisionis set to1e6, and this is where the problem arises. As I mentioned earlier, take the following approximate market prices:$2000/ETH and$20/rDPX. This means therdpxPrice, which is represented as ETH/rDPX in 8 decimals of precision, will be1e6. To calculate the strike price, we get the following:1e6 * 0.75 = 75e4. However this value is fed into theroundUpfunction which will convert the75e4to1e6. This value of1e6is then used to calculate the premium, which is completely wrong. Not only is1e6not 25% OTM, but it is actually ITM, meaning the premium will be significantly higher than was intended by the protocol design.
Recommended Mitigation Steps
The value of theroundingPrecisionis too high considering reasonable market prices of ETH and rDPX. Consider decreasing it.
psytama (Dopex) confirmed