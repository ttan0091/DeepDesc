[H-57] twAML::participate - reentrancy via _safeMint can be used to brick reward distribution
Submitted bycergyk
A malicious user can use reentrancy in twAML to brick reward distribution
Proof of Concept
As we can see inparticipatein twAML, the function_safeMintis used to mint the voting position to the user;
However this function executes a callback on the destination contract:onERC721Received, which can then be used to reenter:
// Mint twTAP positiontokenId= ++mintedTWTap;_safeMint(_participant,tokenId);
The_participantcontract can reenter inexitPosition, and release the position since,
require(position.expiry<=block.timestamp,"twTAP: Lock not expired");
position.expiryis not set yet.
However we see that the following effects are executed after_safeMint:
weekTotals[w0 + 1].netActiveVotes += int256(votes);weekTotals[w1 + 1].netActiveVotes -= int256(votes);
And these have a direct impact on reward distribution;
The malicious user can use reentrancy to increaseweekTotals[w0 + 1].netActiveVotesby big amounts without even locking her tokens;
Later when the operator wants to distribute the rewards:
functiondistributeReward(uint256_rewardTokenId,uint256_amount)external{require(lastProcessedWeek==currentWeek(),"twTAP: Advance week first");WeekTotalsstoragetotals=weekTotals[lastProcessedWeek];IERC20rewardToken=rewardTokens[_rewardTokenId];// If this is a DBZ then there are no positions to give the reward to.// Since reward eligibility starts in the week after locking, there is// no way to give out rewards THIS week.// Cast is safe: `netActiveVotes` is at most zero by construction of// weekly totals and the requirement that they are up to date.// TODO: Word this bettertotals.totalDistPerVote[_rewardTokenId] +=(_amount*DIST_PRECISION) /uint256(totals.netActiveVotes);rewardToken.safeTransferFrom(msg.sender,address(this),_amount);}
totals.totalDistPerVote[_rewardTokenId] becomes zero
Recommended Mitigation Steps
Use any of these:
Move effects before _safeMintUse nonReentrant modifier
0xRektora (Tapioca) confirmed