[H-08] NFTFloorOracle’s asset and feeder structures can be corrupted
Submitted byhyh, also found bybrgltd,minhquanym,Jeiwan, andgzeon
https://github.com/code-423n4/2022-11-paraspace/blob/c6820a279c64a299a783955749fdc977de8f0449/paraspace-core/contracts/misc/NFTFloorOracle.sol#L278-L286https://github.com/code-423n4/2022-11-paraspace/blob/c6820a279c64a299a783955749fdc977de8f0449/paraspace-core/contracts/misc/NFTFloorOracle.sol#L307-L316
NFTFloorOracle’s_addAsset()and_addFeeder()truncate theassetsandfeedersarrays indices to 255, both usinguint8 indexfield in the corresponding structures and performinguint8(assets.length - 1)truncation on the new element addition.
2^8 - 1looks to be too tight as anall timeelement count limit. It can be realistically surpassed in a couple years time, especially given multi-asset and multi-feeder nature of the protocol. This way this isn’t a theoretical unsafe truncation, but an accounting malfunction that is practically reachable given long enough system lifespan, without any additional requirements as asset/feeder turnaround is a going concern state of the system.
Impact
Once truncation start corrupting the indices the asset/feeder structures will become incorrectly referenced and removal of an element will start to remove another one, permanently breaking up the structures.
This will lead to inability to control these structures and then to Oracle malfunction. This can lead to collateral mispricing. Setting the severity to be medium due to prerequisites.
Proof of Concept
feederPositionMapandassetFeederMapuseuint8indices:
https://github.com/code-423n4/2022-11-paraspace/blob/c6820a279c64a299a783955749fdc977de8f0449/paraspace-core/contracts/misc/NFTFloorOracle.sol#L32-L48
structFeederRegistrar{// if asset registered or notboolregistered;// index in asset listuint8index;// if asset paused,reject the priceboolpaused;// feeder -> PriceInformationmapping(address=>PriceInformation)feederPrice;}structFeederPosition{// if feeder registered or notboolregistered;// index in feeder listuint8index;}
https://github.com/code-423n4/2022-11-paraspace/blob/c6820a279c64a299a783955749fdc977de8f0449/paraspace-core/contracts/misc/NFTFloorOracle.sol#L79-L88
/// @dev feeder map// feeder address -> index in feeder listmapping(address=>FeederPosition)privatefeederPositionMap;.../// @dev Original raw value to aggregate with// the NFT contract address -> FeederRegistrar which contains price from each feedermapping(address=>FeederRegistrar)publicassetFeederMap;
On entry removal bothassetsarray length do not decrease:
https://github.com/code-423n4/2022-11-paraspace/blob/c6820a279c64a299a783955749fdc977de8f0449/paraspace-core/contracts/misc/NFTFloorOracle.sol#L296-L305
function_removeAsset(address_asset)internalonlyWhenAssetExisted(_asset){uint8assetIndex=assetFeederMap[_asset].index;deleteassets[assetIndex];deleteassetPriceMap[_asset];deleteassetFeederMap[_asset];emitAssetRemoved(_asset);}
On the contrary, feeders array is being decreased:
https://github.com/code-423n4/2022-11-paraspace/blob/c6820a279c64a299a783955749fdc977de8f0449/paraspace-core/contracts/misc/NFTFloorOracle.sol#L326-L338
function_removeFeeder(address_feeder)internalonlyWhenFeederExisted(_feeder){uint8feederIndex=feederPositionMap[_feeder].index;if(feederIndex>=0&&feeders[feederIndex] ==_feeder) {feeders[feederIndex] =feeders[feeders.length-1];feeders.pop();}deletefeederPositionMap[_feeder];revokeRole(UPDATER_ROLE,_feeder);emitFeederRemoved(_feeder);}
I.e.assetsarray element is set to zero withdelete, but not removed from the array.
This means thatassetswill only grow over time, and will eventually surpass2^8 - 1 = 255. That’s realistic given that assets here are NFTs, whose variety will increase over time.
Once this happen the truncation will start to corrupt the indices:
https://github.com/code-423n4/2022-11-paraspace/blob/c6820a279c64a299a783955749fdc977de8f0449/paraspace-core/contracts/misc/NFTFloorOracle.sol#L278-L286
function_addAsset(address_asset)internalonlyWhenAssetNotExisted(_asset){assetFeederMap[_asset].registered=true;assets.push(_asset);assetFeederMap[_asset].index=uint8(assets.length-1);emitAssetAdded(_asset);}
This can happen withfeederstoo, if the count merely surpass255with net additions:
https://github.com/code-423n4/2022-11-paraspace/blob/c6820a279c64a299a783955749fdc977de8f0449/paraspace-core/contracts/misc/NFTFloorOracle.sol#L307-L316
function_addFeeder(address_feeder)internalonlyWhenFeederNotExisted(_feeder){feeders.push(_feeder);feederPositionMap[_feeder].index=uint8(feeders.length-1);feederPositionMap[_feeder].registered=true;_setupRole(UPDATER_ROLE,_feeder);emitFeederAdded(_feeder);}
This will lead to_removeAsset()and_removeFeeder()clearing another assets/feeders as theassetFeederMap[_asset].indexandfeederPositionMap[_feeder].indexbecome broken being truncated. It will permanently mess the structures.
Recommended Mitigation Steps
As a simplest measure consider increasing the limit to2^32 - 1:
https://github.com/code-423n4/2022-11-paraspace/blob/c6820a279c64a299a783955749fdc977de8f0449/paraspace-core/contracts/misc/NFTFloorOracle.sol#L278-L286
function_addAsset(address_asset)internalonlyWhenAssetNotExisted(_asset){assetFeederMap[_asset].registered=true;assets.push(_asset);-assetFeederMap[_asset].index=uint8(assets.length-1);+assetFeederMap[_asset].index=uint32(assets.length-1);emitAssetAdded(_asset);}
https://github.com/code-423n4/2022-11-paraspace/blob/c6820a279c64a299a783955749fdc977de8f0449/paraspace-core/contracts/misc/NFTFloorOracle.sol#L307-L316
function_addFeeder(address_feeder)internalonlyWhenFeederNotExisted(_feeder){feeders.push(_feeder);-feederPositionMap[_feeder].index=uint8(feeders.length-1);+feederPositionMap[_feeder].index=uint32(feeders.length-1);feederPositionMap[_feeder].registered=true;_setupRole(UPDATER_ROLE,_feeder);emitFeederAdded(_feeder);}
https://github.com/code-423n4/2022-11-paraspace/blob/c6820a279c64a299a783955749fdc977de8f0449/paraspace-core/contracts/misc/NFTFloorOracle.sol#L32-L48
structFeederRegistrar{// if asset registered or notboolregistered;// index in asset list-uint8index;+uint32index;// if asset paused,reject the priceboolpaused;// feeder -> PriceInformationmapping(address=>PriceInformation)feederPrice;}structFeederPosition{// if feeder registered or notboolregistered;// index in feeder list-uint8index;+uint32index;}
Also, consider actually removingassetsarray element in_removeAsset()via the usual moving of the last element as it’s done in_removeFeeder().
LSDan (judge) increased severity to High