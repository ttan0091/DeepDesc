[H-04] Multiple mints can brick any form ofsalesOption3 mintings
Submitted by0x3b, also found byAvantGard,MrPotatoMagic, Krace (1,2),ZdravkoHr,0xlemon,fibonacci,nuthan2x,trachev,oakcobalt, andNoro
As explained by the sponsor, some collections might want to conduct multiple mints on different days. However, due to the waysalesOption3 works, these multiple mints might encounter issues.
Proof of Concept
A collection has completed its first mint, where it minted 500 NFTs. However, the collection consists of 1000 NFTs, so the owner plans to schedule another mint, this time using sales option 3.
ValuesTimeallowlistStartTime4 PMallowlistEndTime7 PMpublicStartTime7 PMpublicEndTime1 day after public starttimePeriod1 min
The first user’s mint will proceed smoothly sincetimeOfLastMintfalls within the previous mint period. However, the second user’s mint will fail. The same applies to all other whitelisted users. This issue arises due to thefollowing block:
lastMintDate[col] =collectionPhases[col].allowlistStartTime+ (collectionPhases[col].timePeriod* (gencore.viewCirSupply(col) -1));
Thiscalculationextends the allowed time significantly, granting the second minter an allowed time ofallowlistStartTime + 1 min * (500-1) = allowlistStartTime + 499 min, which is equivalent to 8 hours and 19 minutes afterallowlistStartTime. This enables the second user to mint at12:19 AM, long after the whitelist has ended and in the middle of the public sale. And if anyone tries to mint, this call will revert withunderflowerror, astimeOfLastMint>block.timestamp.
uint256tDiff= (block.timestamp-timeOfLastMint) /collectionPhases[col].timePeriod;
It’s worth noting that some collections may disrupt the whitelist, while others could brick the entire mint process; especially if there are more minted NFTs or a longer minting period.
POC
Gits -https://gist.github.com/0x3b33/677f86f30603dfa213541cf764bbc0e8.Add to remappings -contracts/=smart-contracts/.Run it withforge test --match-test test_multipleMints --lib-paths ../smart-contracts.
Recommended Mitigation Steps
For this fix, I am unable to give any suggestion as big parts of the protocol need to be redone. I can only point out the root cause of the problem, which is(gencore.viewCirSupply(col) - 1)in thesnippet below.
lastMintDate[col] =collectionPhases[col].allowlistStartTime+ (collectionPhases[col].timePeriod* (gencore.viewCirSupply(col) -1));
Assessed type
Error
a2rocket (NextGen) confirmed
0xsomeone (judge) increased severity to High and commented:
The Warden’s submission was selected as the best given that it illustrates the problem by citing the relevant documentation of the project, contains a valid PoC, and acknowledges the difficulty in rectifying this issue. While the submission has under-estimated the issue’s severity, the relevant high-severity issues (#2012,#1123,#939,#632,#631,#89) were not of sufficient quality and the best candidate (#1123) minimizes the issue’s applicability and does not advise a proper recommendation either.To alleviate the issue, the Sponsor is advised to implement a “start date” for the periodic sales that is reconfigured whenever a periodic sale is re-instated. This would permit thelastMintDatecalculations to “restart” the date from which periodic sale allowances should be tracked and also allow the code to snapshot the circulating supply at the time the first periodic sale occursof each independent periodic sale phase. As the Warden correctly assessed, a viable solution to this vulnerability is difficult to implement.