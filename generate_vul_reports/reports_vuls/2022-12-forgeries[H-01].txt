[H-01] Admin does not have to wait to calllastResortTimelockOwnerClaimNFT()
Submitted bySoosh, also found bydipp,indijanc,maks,jadezti,gz627,sces60107,Zarf,neumo,Ch_301,imare,Trust,btk,kuldeep,bin2chen,immeas,obront,hansfriese,Koolex,Apocalypto,carrotsmuggler,hihen,HE1M,rvierdiiev,SmartSek,9svR6w,sk8erboy,ladboy233,Titi,dic0de, andcsanuragjain
On contest page:"If no users ultimately claim the NFT, the admin specifies a timelock period after which they can retrieve the raffled NFT."
Let’s assume a recoverTimelock of 1 week.
The specification suggests that 1 week from the winner not having claimed the NFT. Meaning that the admin should only be able to calllastResortTimelockOwnerClaimNFT()only after<block.timestamp at fulfillRandomWords()> + request.drawTimelock + 1 weeks.
Specification:
drawTimelock                recoverTimelock│                              │▼                              ▼┌────┬──────────────────────────────┐│    │           1 week             │└────┴──────────────────────────────┘▲│fulfillRandomWords()
The winner should have up todrawTimelockto claim before an admin can callredraw()and pick a new winner.The winner should have up torecoverTimelockto claim before an admin can calllastResortTimelockOwnerClaimNFT()to cancel the raffle.
But this is not the case.
recoverTimelockis set in theinitialize(...)function and nowhere else. That means 1 week from initialization, the admin can calllastResortTimelockOwnerClaimNFT().redraw()also does not updaterecoverTimelock.
In fact,startDraw()does not have to be called at the same time asinitialize(...). That means that if the draw was started after having been initialized for 1 week, the admin can withdraw at any time after that.
Impact
Protocol does not work as intended.
Recommended Mitigation Steps
Just like fordrawTimelock,recoverTimelockshould also be updated for each dice roll.<block.timestamp at fulfillRandomWords()> + request.drawTimelock + <recoverBufferTime>. Where<recoverBufferTime>is essentially thedrawBufferTimecurrently used, but forrecoverTimelock.
Note:currently,drawTimelockis updated in the_requestRoll()function. This is “technically less correct” as chainlink will take some time beforefulfillRandomWords(...)callback. So the timelock is actually set before the winner has been chosen.  This should be insignificant under normal network conditions (Chainlink VRF shouldn’t take > 1min) but both timelocks should be updated in the same function - either_requestRoll()orfulfillRandomWords(...).
iainnash (Forgeries) confirmed and commented:
This seems to be a dupe of a previous issue where the timelock is not passed.Give this timelock is validated from the end of the auction the risk here seems Low.
gzeon (judge) increased severity to High and commented:
#359 (comment)