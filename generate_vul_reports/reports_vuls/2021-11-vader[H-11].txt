[H-11] (dex-v1) BasePool.mint() function can be frontrun
Submitted by Reigada
Impact
In the contract BasePool the mint function can be frontrun. This will assign the NFT to the attacker which later on he can burn it retrieving the corresponding\_nativeAssetand\_foreignAssetinitially deposited by the frontrun victim.https://github.com/code-423n4/2021-11-vader/blob/main/contracts/dex/pool/BasePool.sol#L149-L194
Proof of Concept
User1 transfers 1000\_nativeAssettokens and 1000\_foreignAssettokens into the BasePool contract.
User1 calls theBasePool.mint()function to retrieve his NFT.
Attacker is constantly polling for an increase of the balance of\_nativeAssetand\_foreignAssetof the contract OR attacker is constantly scanning the mempool formint()function calls.
Attacker detects an increase of balance of\_nativeAssetand\_foreignAssetOR attacker detects amint()function call in the mempool.
Attacker frontruns the mint call and retrieves the NFT. Gets a NFT that is worth 1000\_nativeAssetsand 1000\_foreignAssets.
User1 gets a NFT that is worth 0\_nativeAssetsand 0\_foreignAssets.
Attacker burns the NFT retrieving the corresponding\_nativeAssetand\_foreignAssetinitially deposited by the victim.
Tools Used
Manual testing
Recommended Mitigation Steps
Include in themint()function the transfer of\_nativeAssetsand\_foreignAssetsto the smart contract.
SamSteinGG (Vader) disputed:
The pool is meant to be utilized via the router or smart contracts and is not meant to be utilized directly.  The exact same “flaw” exists in Uniswap V2 whereby if you transfer assets directly someone else can claim them on your behalf.
alcueca (judge) commented:
Ah, so this how you prevent direct access to the pools. The issue is valid due to lack of documentation on the usage of the router.
SamSteinGG (Vader) commented:
Firstly, documentation related issues cannot constitute a high risk vulnerability. Secondly, this type of documentation does not exist in Uniswap V2 either. We advise this finding to be set to no risk.