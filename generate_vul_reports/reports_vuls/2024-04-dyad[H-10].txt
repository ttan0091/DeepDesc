[H-10] Flash loan protection mechanism can be bypassed via self-liquidations
Submitted bycarrotsmuggler, also found byZanyBonzy,TheSavageTeddy,adam-idarrha,Emmanuel,Al-Qa-qa,alix40,TheFabled, andlian886
https://github.com/code-423n4/2024-04-dyad/blob/44becc2f09c3a75bd548d5ec756a8e88a345e826/src/core/Vault.kerosine.sol#L47-L59
https://github.com/code-423n4/2024-04-dyad/blob/44becc2f09c3a75bd548d5ec756a8e88a345e826/src/core/VaultManagerV2.sol#L225-L226
Impact
The protocol implements a flash-loan manipulation protection mechanism with theidToBlockOfLastDepositvariable. This values is set to the current block number during a deposit, and is checked during a withdrawal. If the system detects a deposit and withdrawal in the same block, the system reverts the transaction.
//function depositidToBlockOfLastDeposit[id] =block.number;//function withdrawif(idToBlockOfLastDeposit[id] ==block.number)revertDepositedInSameBlock();
The issue is that there is another way to move funds around: liquidations. This calls themovefunction to transfer around the balances, and does not update theidToBlockOfLastDepositof the receiving account.
functionliquidate(uintid,uintto){//...vault.move(id,to,collateral);//...}
So, a user can:
Take out a flashloan. Deposit funds into a vault A. Mint dyad.Manipulate the price of kerosene to trigger a liquidation.Liquidate themselves and send their collateral to vault B.Withdraw from vault B in the same block.Pay off their flashloans.
The step 2 involves manipulating the price of kerosene, which affects their collateralization ratio. This has been discussed in a separate issue, and mainly states that if the user mints more dyad against free collateral in the system, or if any user takes out free collateral in the system, the price of kerosene will fall.
The flaw being discussed in this report is that the flash loan protection mechanism can be bypassed. This is different from the price manipulation issue and is thus a separate issue. Since this bypasses one of the primary safeguards in the system, this is a high severity issue.
Proof of Concept
The POC exploit setup requires 4 accounts: A, B, C and D:
A is where the flashed funds will be deposited to.B is where the liquidated funds will be deposited to.C is for manipulating the kerosene price.D is for minting dyad at manipulated price to accrue bad debt in the system.
Where:
A is used toinflatethe price of kerosene.B is used to bypass the flash loan protection mechanism.C is used todeflatethe price of kerosene.D is used to mint dyad at theinflatedprice, accruing bad debt in the system and damaging the protocol.
Assume C has 1 million usdc tokens with0debt. C inflates the price of kerosene up by contributing to TVL, and will be used later to push the price down.Alice takes out a flashloan of 10 million usdc tokens. She deposits them in account A.Due to the sudden addedmassiveflashloaned TVL, the internal price of kerosene shoots up.Alice uses account D to mint out dyad tokens at this condition. Alice can now mint out exactly as many dyad tokens as her exo collateral. This is allowed since the price of kerosene is inflated, which covers the collateralization ratio. Alice effectively has a CR of close to 1.0 but the system thinks it’s 1.5 due to kerosene being overvalued. The system is still solvent at this point.Alice buys kerosene from the market and adds it in account A and then mints dyad until account A has a CR of 1.5. The actual CR of A ignoring kerosene is close to 1.0.Alice now removes collateral from account C. This reduces the price of C, making Account A liquidatable.Alice now liquidates account A and sends the collateral to account B. This inflates the price of kerosene again since dyad supply has gone down, and she can repeat steps 5-6 multiple times since she can now mint more dyad tokens again.Alice gets a large portion of her flashed funds into account B She withdraws them back out. This again drops the price of kerosene, allowing her to liquidate A more and and recover more of her funds into account B.Alice pays back her flashloan.Account D is now left with a CR close to 1.0, since the price of kerosene has now gone back to normal. Any price fluctuations in the exo collateral will now lead to bad debt.
This lets Alice open positions at a CR of close to 1.0. This is very dangerous in a CDP protocol, since Alice’s risk is very low as she can sell off the minted dyad to recover her investment, but the protocol is now at a very risky position, close to accruing bad debt. Thus this is a high severity issue.
Recommended Mitigation Steps
The flashloan protection can be bypassed. MEV liquidation bots rely on flashloans to carryout liquidations, so there isn’t a very good way to prevent this attack vector. Making the price of kerosene less manipulatable is a good way to lower this attack chance. However, the system will still be open to flashloan deposits via liquidations.
Incorporating a mint fee will also help mitigate this vector, since the attacker will have a higher cost to manipulate the system.
shafu0x (DYAD) confirmed
Koolex (judge) decreased severity to Medium and commented:
@carrotsmuggler - the attack assumes that kerosine is used within the CR. Could you please clarify how the attacker would acquire this big amount of kerosine?
carrotsmuggler (warden) commented:
@Koolex - kerosene can just be bought off of DEXs and other open markets. In this attack, kerosene is not being flashloaned. Kerosene is just required as an initial investment. USDC is flashloaned, and dyad tokens are minted against that up to a CR of 1.5, which drops to 1.0 once the value of kerosene drops.The point of the issue is to show that the flashloan protection can be bypassed, which is being done here by utilising multiple accounts.
Koolex (judge) commented:
@carrotsmuggler - I’m requesting a PoC (with code) in order to be able to evaluate the severity better. At the moment, the attack is too expensive since the attacker should hold a big amount of Kerosene, which practically difficult since  Kerosene is being distributed over 10 years. Unless there is a demonstrated impact on the protocol, this would be a QA.
carrotsmuggler (warden) commented:
The problem this issue addresses, is that the flash loan protection can be bypassed. For that, a POC is taken from the issue#537showing that self liquidation can be used to flash funds, manipulate the system, and then take them out in the same transaction.However, the main point of contention here seems to be the impact. Flashloans in general don’t do anything a well funded attacker cannot do on their own, and not an exploit on their own. However, they can be used to exacerbate an existing problem by anyone, well funded or not.To eradicate this vector, and to make the system less manipulatable, the devs had put in certain restrictions. This issue shows that these restrictions are insufficient. So users can use flashloans and thus a near infinite amount of funds to manipulate the system. This was reported since the devs had explicitly put up a counter to this.Since this breaks the safeguards put in place by the devs and makes the system more easily manipulatable, I believe this is of medium severity. This can be used in#67, but should not be a duplicate. This can also be abused to mint positions at 100% CR instead of 150% with a very large volume by anyone due to the flashloans, which makes the system way more unstable. Even small changes in price at that condition will be enough to cause bad debt to the system then.// SPDX-License-Identifier: MITpragmasolidity=0.8.17;import"forge-std/Test.sol";import"forge-std/console.sol";import{DeployBase,Contracts}from"../script/deploy/DeployBase.s.sol";import{Parameters}from"../src/params/Parameters.sol";import{DNft}from"../src/core/DNft.sol";import{Dyad}from"../src/core/Dyad.sol";import{Licenser}from"../src/core/Licenser.sol";import{VaultManagerV2}from"../src/core/VaultManagerV2.sol";import{Vault}from"../src/core/Vault.sol";import{OracleMock}from"./OracleMock.sol";import{ERC20Mock}from"./ERC20Mock.sol";import{IAggregatorV3}from"../src/interfaces/IAggregatorV3.sol";import{ERC20}from"@solmate/src/tokens/ERC20.sol";import{KerosineManager}from"../src/core/KerosineManager.sol";import{UnboundedKerosineVault}from"../src/core/Vault.kerosine.unbounded.sol";import{BoundedKerosineVault}from"../src/core/Vault.kerosine.bounded.sol";import{Kerosine}from"../src/staking/Kerosine.sol";import{KerosineDenominator}from"../src/staking/KerosineDenominator.sol";contractVaultManagerV2TestisTest,Parameters{DNftdNft;LicenservaultManagerLicenser;LicenservaultLicenser;Dyaddyad;VaultManagerV2vaultManagerV2;// wethVaultwethVault;ERC20Mockweth;OracleMockwethOracle;//KerosineKerosinekerosine;UnboundedKerosineVaultunboundedKerosineVault;KerosineManagerkerosineManager;KerosineDenominatorkerosineDenominator;//usersaddressuser1;addressuser2;functionsetUp()public{dNft=newDNft();weth=newERC20Mock("WETH-TEST","WETHT");wethOracle=newOracleMock(3000e8);vaultManagerLicenser=newLicenser();vaultLicenser=newLicenser();dyad=newDyad(vaultManagerLicenser);//vault Manager V2vaultManagerV2=newVaultManagerV2(dNft,dyad,vaultLicenser);//vaultwethVault=newVault(vaultManagerV2,ERC20(address(weth)),IAggregatorV3(address(wethOracle)));//kerosineManagerkerosineManager=newKerosineManager();kerosineManager.add(address(wethVault));vaultManagerV2.setKeroseneManager(kerosineManager);//kerosine tokenkerosine=newKerosine();//Unbounded KerosineVaultunboundedKerosineVault=newUnboundedKerosineVault(vaultManagerV2,kerosine,dyad,kerosineManager);//kerosineDenominatorkerosineDenominator=newKerosineDenominator(kerosine);unboundedKerosineVault.setDenominator(kerosineDenominator);//Licenser add vaultvaultLicenser.add(address(wethVault));vaultLicenser.add(address(unboundedKerosineVault));//vaultManagerLicenser add managervaultManagerLicenser.add(address(vaultManagerV2));}functiontestFlashLoanAttackUsingLiquidateSimulation()public{wethOracle.setPrice(1000e8);//1 The attacker prepares two NFTs ,some collateral and some Kerosene Token.uintid=mintDNft();uintid_for_liquidator=mintDNft();weth.mint(address(this),1e18);//2 deposit all the non-Kerosene collateral in the vault with One NFT like id=1vaultManagerV2.add(id_for_liquidator,address(wethVault));weth.approve(address(vaultManagerV2),1e18);vaultManagerV2.deposit(id_for_liquidator,address(wethVault),1e18);//3 In the next blocknumber, flashloan non-Kerosene collateral from Lending like Aave,vm.roll(block.number+1);weth.mint(address(this),1e18);//Simulation borrow 1 weth//deposit all the borrowed flashloan non-Kerosene collateral and Kerosene Token in the vault with One NFT like id=0vaultManagerV2.add(id,address(wethVault));weth.approve(address(vaultManagerV2),1e18);vaultManagerV2.deposit(id,address(wethVault),1e18);vaultManagerV2.addKerosene(id,address(unboundedKerosineVault));kerosine.approve(address(vaultManagerV2),1000_000_000e18);vaultManagerV2.deposit(id,address(unboundedKerosineVault),1000_000_000e18);//Mint the max number Dyad you canvaultManagerV2.mintDyad(id,1000e18,address(this));uint256cr=vaultManagerV2.collatRatio(id);//2e18assertEq(cr,2e18);//withdraw using id_for_liquidator,  manipulate the  Kerosene pricevaultManagerV2.withdraw(id_for_liquidator,address(wethVault),1e18,address(this));cr=vaultManagerV2.collatRatio(id);//1e18assertEq(cr,1e18);//liquidatevaultManagerV2.liquidate(id,id_for_liquidator);//withdraw the vault which is move from id  using id_for_liquidatorvaultManagerV2.withdraw(id_for_liquidator,address(wethVault),1e18,address(this));console.log("weth balance is ",weth.balanceOf(address(this))/1e18);}functionmintDNft()publicreturns(uint) {returndNft.mintNft{value:1ether}(address(this));}functiondeposit(ERC20Mocktoken,uintid,addressvault,uintamount)public{vaultManagerV2.add(id,vault);token.mint(address(this),amount);token.approve(address(vaultManagerV2),amount);vaultManagerV2.deposit(id,address(vault),amount);}receive()externalpayable{}functiononERC721Received(address,address,uint256,bytescalldata)externalpurereturns(bytes4) {return0x150b7a02;}}
adam-idarrha (warden) commented:
For the impact the sponsors stated quite clearly from the DYAD code4rena audit page that the main point of migrating fromvaultManagerV1toV2is the need for a flashloan protection mechanism, and the impact of the bypass is the ability to manipulate kerosene price which could lead to mass liquidations as discussed in separate issues:Attack ideas (where to focus for bugs).Manipulation of Kerosene Price.Flash Loan attacks.Migration.The goal is to migrate fromVaultManagertoVaultManagerV2. The main reason is the need for a flash loan protection which makes it harder to manipulate the deterministic Kerosene price.
Koolex (judge) increased severity to High and commented:
After reading all the comments above, I believe this should be a valid high due to the following reasons:Flash loan protection can be bypassed, since this didn’t exist in V1, it seems to me, it is a major change in V2.Price manipulation impact is demonstrated above, which is caused by utilising Flash loans.Flash loan attacks mentioned under Attack ideas of the audit page, obviously, the sponsor is interested in breaking this validation put in place.Not a dup of#6767’s attack is less accessible unlike with Flash loans where anyone can perform it.Furthermore, 67 isn’t necessarily to be performed as an attack, the event could occur naturally when whales intend to withdraw funds.
Note: For full discussion, seehere.