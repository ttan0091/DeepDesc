[H-05] Permanent DoS due to non-shrinking array usage in an unbounded loop
Submitted byHound
Note: this finding was reported via the winningAutomated Findings report. It was declared out of scope for the audit, but is being included here for completeness.
There are some arrays that can grow indefinitely in size, as they never shrink. When these arrays are used in unbounded loops, they may lead to a permanent denial-of-service (DoS) of these functions.
POC
Attacker callsparticipateToAuctionN times with dust amounts untilreturnHighestBidreverts (out of gas).WhenclaimAuctionis called byWinnerOrAdminRequired, the transaction will fail, as it callsreturnHighestBid. As a result,claimAuctionwill be permanently DoS.
There are 4 instances of this issue:
[69,90,110,136]
File:smart-contracts/AuctionDemo.sol// @audit function returnHighestBid is vulnerable as length grows in size but never shrinks69:for(uint256i=0;i<auctionInfoData[_tokenid].length;i++) {60:auctionInfoData[_tokenid].push(newBid);// @audit function returnHighestBidder is vulnerable as length grows in size but never shrinks90:for(uint256i=0;i<auctionInfoData[_tokenid].length;i++) {60:auctionInfoData[_tokenid].push(newBid);// @audit function claimAuction is vulnerable as length grows in size but never shrinks110:for(uint256i=0;i<auctionInfoData[_tokenid].length;i++) {60:auctionInfoData[_tokenid].push(newBid);// @audit function cancelAllBids is vulnerable as length grows in size but never shrinks136:for(uint256i=0;i<auctionInfoData[_tokenid].length;i++) {60:auctionInfoData[_tokenid].push(newBid);
a2rocket (NextGen) confirmed
0xsomeone (judge) commented:
Important and valid.