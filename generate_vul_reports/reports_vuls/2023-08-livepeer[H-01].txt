[H-01] Underflow inupdateTranscoderWithFeescan cause corrupted data and loss of winning tickets
Submitted bybronze_pickaxe, also found byVAD37,ether_sky, andKrace
updateTranscoderWtihFeescan underflow because MathUtils is used instead of PreciseMathUtils.
Proof of Concept
According toLIP-92the initialtreasuryRewardCutRatewill be set to10%.
treasuryRewardCutRateis set with thesetTreasuryRewardCutRate()function, which calls the internal function_setTreasuryRewardCutRate().
file:2023-08-livepeer/contracts/bonding/BondingManager.solfunction_setTreasuryRewardCutRate(uint256_cutRate)internal{require(PreciseMathUtils.validPerc(_cutRate),"_cutRate is invalid precise percentage");
In this function the value will be checked if it’s a validPreciseMathUtilspercentage (<100%specified with 27-digits precision):
file:2023-08-livepeer/contracts/libraries/PreciseMathUtils.sollibraryPreciseMathUtils{// ...// Divisor used for representing percentagesuint256publicconstantPERC_DIVISOR=10**27;functionvalidPerc(uint256_amount)internalpurereturns(bool) {return_amount<=PERC_DIVISOR;}// ...
However, inupdateTranscoderWithFees, to calculatetreasuryRewards,MathUtilsis used instead ofPreciseMathUtils.
file:2023-08-livepeer/contracts/bonding/BondingManager.solfunctionupdateTranscoderWithFees(address_transcoder,uint256_fees,uint256_round)externalwhenSystemNotPausedonlyTicketBroker{// ...uint256treasuryRewards=MathUtils.percOf(rewards,treasuryRewardCutRate);rewards=rewards.sub(treasuryRewards);// ...}
MathUtilsuses aPREC_DIVISORof1000000instead of10 ** 27from thePreciseMathUtils:
file:2023-08-livepeer/contracts/libraries/MathUtils.sollibraryMathUtils{// ...uint256publicconstantPERC_DIVISOR=1000000;// ...
This leads totreasuryRewardsvalue being bigger than expected. Here is agist of the POC. Running the POC it shows that the current usage ofMathUtilswhen calculatingtreasuryRewardswill always cause an underflow in the next line of code.
updateTranscoderWithFeesis called every time a winning ticket is redeemed. Whenever the transcoder has skipped the previous round reward call, this function has to re-calculate the rewards, as documented inLIP-92. This re-calculation will always fail due to the underflow shown above.
Impact
This will lead to accounting errors, unexpected behaviours and can cause a loss of winning tickets.
Firstly, the accounting errors and unexpected behaviours: these are all the storage values getting updated inupdateTranscoderWithFees:
file:2023-08-livepeer/contracts/bonding/BondingManager.solfunctionupdateTranscoderWithFees(address_transcoder,uint256_fees,uint256_round)externalwhenSystemNotPausedonlyTicketBroker{// ...// transcoder & earningsPool.dataL314:Transcoderstoraget=transcoders[_transcoder];L321:EarningsPool.DatastorageearningsPool=t.earningsPoolPerRound[currentRound];//accounting updates happen hereL377:t.cumulativeFees=t.cumulativeFees.add(transcoderRewardStakeFees).add(transcoderCommissionFees);L382:earningsPool.updateCumulativeFeeFactor(prevEarningsPool,delegatorsFees);L384:t.lastFeeRound=currentRound;
LetcurrentRound() - 1be the previous round where the transcoder skipped the reward callLetcurrentRound()be current roundLetcurrentRound() + 1be the next round
DuringcurrentRound()it won’t be possible to update theTranscoderstorage orearningsPool.datastorage because of the underflow that will happen becausecurrentRound() - 1reward call has been skipped by the transcoder.
DuringcurrentRound() + 1it will be possible to callupdateTranscoderWithFees, however, L382 will only update theprevEarningsPool, which in this case will becurrentRound(), notcurrentRound - 1. Therefor, theEarningsPool.data.cumulativeRewardFactorwon’t be updated forcurrentRound() - 1.
Lastly, the validity of a ticket is two rounds as per thespecs. This means that a transcoder that receives a winning ticket incurrentRound() - 1should be able to redeem it incurrentRound() - 1andcurrentRound(). However, a transcoder that receives a winning ticket incurrentRound() - 1wont be able to redeem it incurrentRound()because of the underflow that happens while redeeming a winning ticket incurrentRound(). The transcoder wont be able to redeem it aftercurrentRound + 1..Nbecause the ticket will be expired.
Recommended Mitigation Steps
UsePreciseMathLibinstead ofMathLib:
file:2023-08-livepeer/contracts/bonding/BondingManager.solL355:-uint256treasuryRewards=MathUtils.percOf(rewards,treasuryRewardCutRate);+uint256treasuryRewards=PreciseMathUtils.percOf(rewards,treasuryRewardCutRate);
Assessed type
Library
victorges (Livepeer) commented:
Can confirm this issue!
victorges (Livepeer) mitigated:
https://github.com/livepeer/protocol/pull/624