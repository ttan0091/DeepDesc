[H-03] Node operator is getting slashed for full duration even though rewards are distributed based on a 14 day cycle
Submitted byimmeas, also found byAllarious,ast3ros,unforgiven,Josiah,SmartSek,Franfran,HollaDieWaldfee,RaymondFam, and0xdeadbeef0x
contracts/contract/MinipoolManager.sol#L673-L675
A node operator sends in the amount of duration they want to stake for. Behind the scenes Rialto will stake in 14 day cycles and then distribute rewards.
If a node operator doesn’t have high enough availability and doesn’t get any rewards, the protocol will slash their stakedGGP. For calculating the expected rewards that are missed however, the full duration is used:
File:MinipoolManager.sol557:functiongetExpectedAVAXRewardsAmt(uint256duration,uint256avaxAmt)publicviewreturns(uint256) {558:ProtocolDAOdao=ProtocolDAO(getContractAddress("ProtocolDAO"));559:uint256rate=dao.getExpectedAVAXRewardsRate();560:return(avaxAmt.mulWadDown(rate) *duration) /365days;// full duration used when calculating expected reward561:	}...670:functionslash(int256index)private{...673:uint256duration=getUint(keccak256(abi.encodePacked("minipool.item",index,".duration")));674:uint256avaxLiquidStakerAmt=getUint(keccak256(abi.encodePacked("minipool.item",index,".avaxLiquidStakerAmt")));675:uint256expectedAVAXRewardsAmt=getExpectedAVAXRewardsAmt(duration,avaxLiquidStakerAmt);// full duration676:uint256slashGGPAmt=calculateGGPSlashAmt(expectedAVAXRewardsAmt);
This is unfair to the node operator because the expected rewards is from a 14 day cycle.
Also, If they were to be unavailable again, in a later cycle, they would get slashed for the full duration once again.
Impact
A node operator staking for a long time is getting slashed for an unfairly large amount if they aren’t available during a 14 day period.
The protocol also wants node operators to stake in longer periods:https://multisiglabs.notion.site/Known-Issues-42e2f733daf24893a93ad31100f4cd98
Team Comment:This can only be taken advantage of when signing up for 2-4 week validation periods.Our protocol is incentivizing nodes to sign up for 3-12 month validation periods.If the team notices this mechanic being abused, Rialto may update its GGP reward calculation to disincentive this behavior.
This slashing amount calculation incentives the node operator to sign up for the shortest period possible and restake themselves to minimize possible losses.
Proof of Concept
Test inMinipoolManager.t.sol:
functiontestRecordStakingEndWithSlashHighDuration()public{uint256duration=365days;uint256depositAmt=1000ether;uint256avaxAssignmentRequest=1000ether;uint256validationAmt=depositAmt+avaxAssignmentRequest;uint128ggpStakeAmt=200ether;vm.startPrank(nodeOp);ggp.approve(address(staking),MAX_AMT);staking.stakeGGP(ggpStakeAmt);MinipoolManager.Minipoolmemorymp1=createMinipool(depositAmt,avaxAssignmentRequest,duration);vm.stopPrank();addressliqStaker1=getActorWithTokens("liqStaker1",MAX_AMT,MAX_AMT);vm.prank(liqStaker1);ggAVAX.depositAVAX{value:MAX_AMT}();vm.prank(address(rialto));minipoolMgr.claimAndInitiateStaking(mp1.nodeID);bytes32txID=keccak256("txid");vm.prank(address(rialto));minipoolMgr.recordStakingStart(mp1.nodeID,txID,block.timestamp);skip(2weeks);// a two week cyclevm.prank(address(rialto));minipoolMgr.recordStakingEnd{value:validationAmt}(mp1.nodeID,block.timestamp,0ether);assertEq(vault.balanceOf("MinipoolManager"),depositAmt);int256minipoolIndex=minipoolMgr.getIndexOf(mp1.nodeID);MinipoolManager.Minipoolmemorymp1Updated=minipoolMgr.getMinipool(minipoolIndex);assertEq(mp1Updated.status,uint256(MinipoolStatus.Withdrawable));assertEq(mp1Updated.avaxTotalRewardAmt,0);assertTrue(mp1Updated.endTime!=0);assertEq(mp1Updated.avaxNodeOpRewardAmt,0);assertEq(mp1Updated.avaxLiquidStakerRewardAmt,0);assertEq(minipoolMgr.getTotalAVAXLiquidStakerAmt(),0);assertEq(staking.getAVAXAssigned(mp1Updated.owner),0);assertEq(staking.getMinipoolCount(mp1Updated.owner),0);// log slash amountconsole.log("slashedAmount",mp1Updated.ggpSlashAmt);}
Slashed amount for a365 daysduration is100 eth(10%). However, where they to stake for the minimum time,14 daysthe slashed amount would be only ~3.8 eth.
Tools Used
vs code, forge
Recommended Mitigation Steps
Either hard code the duration to 14 days for calculating expected rewards or calculate the actual duration usingstartTimeandendTime.
0xju1ie (GoGoPool) confirmed
Alex the Entreprenerd (judge) increased severity to High and commented:
The Warden has shown an incorrect formula that uses thedurationof the pool for slashing.The resulting loss can be up to 26 times the yield that should be made up for.Because the:Math is incorrectBased on intended usageImpact is more than an order of magnitude offPrincipal is impacted (not just loss of yield)I believe the most appropriate severity to be High.
emersoncloud (GoGoPool) mitigated:
Base slash on validation period not full duration:multisig-labs/gogopool#41
Status:Mitigation confirmed byRaymondFamandhansfriese.