[H-06] Funds are permanently stuck in OptimisticListingSeaport.sol contract if active proposal is executed after new proposal is pending.
Submitted byTrust
\_constructOrderis called inpropose(), OptimisticListingSeaport.sol. It fills the order params stored in proposedListings[_vault].
{orderParams.offerer = _vault;orderParams.startTime = block.timestamp;// order doesn't expire in human time scales and needs explicit cancellationsorderParams.endTime = type(uint256).max;orderParams.zone = zone;// 0: no partial fills, anyone can executeorderParams.orderType = OrderType.FULL_OPEN;orderParams.conduitKey = conduitKey;// 1 Consideration for the listing itself + 1 consideration for the feesorderParams.totalOriginalConsiderationItems = 3;}
Importantly, it updates the order hash associated with the vault:vaultOrderHash[_vault] = _getOrderHash(orderParams, counter);
There is only one other use ofvaultOrderHash, in\_verifySale().
function _verifySale(address _vault) internal view returns (bool status) {(bool isValidated, bool isCancelled, uint256 totalFilled, uint256 totalSize) = ISeaport(seaport).getOrderStatus(vaultOrderHash[_vault]);if (isValidated && !isCancelled && totalFilled > 0 && totalFilled == totalSize) {status = true;}}
This function gets order information from the order hash, and makes sure the order is completely fulfilled.
After NFT sell has completed,cash()is used to distribute income ETH:
function cash(address _vault, bytes32[] calldata _burnProof) external {// Reverts if vault is not registered(address token, uint256 id) = _verifyVault(_vault);// Reverts if active listing has not been settledListing storage activeListing = activeListings[_vault];// Reverts if listing has not been sold// -------------- _verifySale MUST BE TRUE ---------if (!_verifySale(_vault)) {revert NotSold();} else if (activeListing.collateral != 0) {uint256 collateral = activeListing.collateral;activeListing.collateral = 0;// Sets collateral amount to pending balances for withdrawalpendingBalances[_vault][activeListing.proposer] = collateral;}
As long as sale is not complete,cash()canâ€™t be called as highlighted. The issue is thatvaultOrderHash[_vault]is not protected during the lifetime of an active proposal. If another proposal is proposed and then the sell using active proposal takes place,cash()will keep reverting. Funds are stuck in listing contract.
We can try to be clever and callpropose()again with the same parameters to create an identical orderID, which will makevaultOrderHash[_vault]fine again and allowcash()to go through. But order params contain block.timestamp which will certainly be different which will make the hash different.
Impact
Funds are permanently stuck in OptimisticListingSeaport.sol contract if active proposal is executed after new proposal is pending.
Proof of Concept
User A callspropose(), setting proposedListing. vaultOrderHash=XPROPOSAL_PERIOD passes , list is called promoting the listing to activeListing.Another user, malicious or innocent, proposes another proposal. vaultOrderHash=YSell goes down due to OpenSea validation confirmed on activeListing.\_verifySalewill never return true because we can never got vaultOrderHash to be Xcash() is bricked. Money is stuck in contract.
Recommended Mitigation Steps
Keep the order hash in the Listing structure rather than a single one per vault.
mehtaculous (Tessera) confirmed and commented:
Agree with High severity. Solution is to moveorderHashto Listing struct so that active and proposed listings can have separate order hashes.
stevennevins (Tessera) mitigated:
https://github.com/fractional-company/modular-fractional/pull/211Status:Mitigation confirmed bygzeon,IllIllI, andLambda.