[H-02] TurboRouter:deposit(),mint(),createSafeAndDeposit()andcreateSafeAndDepositAndBoost()functions do not work
Submitted by cccz, also found by CertoraInc and WatchPug
The TurboRouter contract inherits from the ERC4626RouterBase contract. When the user calls the deposit, mint, createSafeAndDeposit and createSafeAndDepositAndBoost functions of the TurboRouter contract, the deposit and mint functions of the ERC4626RouterBase contract are called.
functiondeposit(IERC4626safe,addressto,uint256amount,uint256minSharesOut)publicpayableoverrideauthenticate(address(safe))returns(uint256){returnsuper.deposit(safe,to,amount,minSharesOut);}...functiondeposit(IERC4626vault,addressto,uint256amount,uint256minSharesOut)publicpayablevirtualoverridereturns(uint256sharesOut) {if((sharesOut=vault.deposit(amount,to)) <minSharesOut) {revertMinAmountError();}}
The deposit and mint functions of the ERC4626RouterBase contract will call the deposit and mint functions of the TurboSafe contract. The TurboSafe contract inherits from the ERC4626 contract, that is, the deposit and mint functions of the ERC4626 contract will be called.
The deposit and mint functions of the ERC4626 contract will call the safeTransferFrom function. Since the caller is the TurboRouter contract, msg.sender will be the TurboRouter contract. And because the user calls the deposit, mint, createSafeAndDeposit, and createSafeAndDepositAndBoost functions of the TurboRouter contract without transferring tokens to the TurboRouter contract and approving the TurboSafe contract to use the tokens, the call will fail.
functiondeposit(uint256amount,addressto)publicvirtualreturns(uint256shares) {// Check for rounding error since we round down in previewDeposit.require((shares=previewDeposit(amount)) !=0,"ZERO_SHARES");// Need to transfer before minting or ERC777s could reenter.asset.safeTransferFrom(msg.sender,address(this),amount);_mint(to,shares);emitDeposit(msg.sender,to,amount,shares);afterDeposit(amount,shares);}
Proof of Concept
TurboRouter.sol
Recommended Mitigation Steps
In the deposit, mint, createSafeAndDeposit, and createSafeAndDepositAndBoost functions of the TurboRouter contract, add code for the user to transfer tokens and approve the use of tokens in the TurboSafe contract.
For example:
TurboRouter.sol
+IERC20(safe.asset).safeTransferFrom(msg.sender,address(this),amount);+IERC20(safe.asset).safeApprove(safe,amount);super.deposit(IERC4626(address(safe)),to,amount,minSharesOut);...+IERC20(safe.asset).safeTransferFrom(msg.sender,address(this),amount);+IERC20(safe.asset).safeApprove(safe,amount);super.mint(safe,to,shares,maxAmountIn);
Joeysantoro (Tribe Turbo) disputed and commented:
Router uses Multicall and PeripheryPayments which can be combined to achieve the desired behaviors.
Alex the Entreprenerd (judge) commented:
@Joeysantoro I don’t quite understand your counter argument here forcreateSafeAnd....type functions.For Deposit and Mint, yes, you can create the safe, and then multicall the approvals, I agree with your counter, the functions don’t need the extra approve calls.However for the functions that deploy a new safe, am not quite sure where the approval happens, seecreateSafeAndDepositbelow:functioncreateSafeAndDeposit(ERC20underlying,addressto,uint256amount,uint256minSharesOut)external{(TurboSafesafe, ) =master.createSafe(underlying);super.deposit(IERC4626(address(safe)),to,amount,minSharesOut);safe.setOwner(msg.sender);}I believe your counter argument could apply if you were deploying new vaults via Create2 so you could deterministically pre-approve the new safe, however in this case you are deploying a new safe, to an unpredictable address and then callingdepositon it.depositwillsafeTransferFromfrom the router to the vault and I can’t quite see how this call won’t fail since the router never gave allowance to thesafe.Can you please clarify your counter argument for this specific function?
Joeysantoro (Tribe Turbo) commented:
I was wrong, this issue is valid.
Alex the Entreprenerd (judge) increased severity to High and commented:
Per the sponsor reply, I believe the finding to be valid. Impact is that the code doesn’t work so I believe High Severity to be appropriate.Mitigation seems to be straightforward.
Please note: the following additional discussions took place approximately 3 weeks after judging and awarding were finalized. As such, this report will leave this finding in its originally assessed risk category as it simply reflects a snapshot in time.
Joeysantoro (Tribe Turbo) commented:
imo this is not high risk because the router is a periphery contract. Its medium at best from a security perspective, but an important find within the context of the correctness of the code.To clarify, the issue only exists for createSafe… not deposit or mint for the reason I stated.
Alex the Entreprenerd (judge) commented:
@Joeysantoro I think your perspective is valid and perhaps with more context, I would have indeed rated at a lower severity.My reasoning at the time was that because the code is broken, the severity should be high.
On the other hand, we can also argue that the impact is minimal, as any call to those functions simply reverts, no safes with “wrong allowance” are set, and ultimately the impact is just some wasted gas.The bug doesn’t cause a loss of funds nor bricks the protocol in any meaningful way (because this is just a periphery contract).I think you’re right in your logic, at the time of judging I simply focused on how the code didn’t work and thought that was reason to raise the severity