[H-04]ERC721Votes: Token owners can double voting power through self delegation
Submitted by zkhorse, also found by berndartmueller, Ch_301, hxzy, hyh, MEP, pcarranzav, pfapostol, Picodes, and Solimander
The owner of one or manyERC721Votestokens can double their voting power once (and only once) by delegating to their own address as their first delegation.
Scenario
This exploit relies on the initial default value of thedelegationmapping inERC721Votes, which is why it will only work once per address.
First, the token owner must calldelegateordelegateBySig, passing their own address as the delegate:
ERC721Votes#delegate
/// @notice Delegates votes to an account/// @param _to The address delegating votes tofunctiondelegate(address_to)external{_delegate(msg.sender,_to);}
This calls into the internal_delegatefunction, with_fromand_toboth set to the token owner’s address:
ERC721Votes#_delegate
/// @dev Updates delegate addresses/// @param _from The address delegating votes from/// @param _to The address delegating votes tofunction_delegate(address_from,address_to)internal{// Get the previous delegateaddressprevDelegate=delegation[_from];// Store the new delegatedelegation[_from] =_to;emitDelegateChanged(_from,prevDelegate,_to);// Transfer voting weight from the previous delegate to the new delegate_moveDelegateVotes(prevDelegate,_to,balanceOf(_from));}
Since this is the token owner’s first delegation, thedelegationmapping does not contain a value for the_fromaddress, andprevDelegateon L#181 will be set toaddress(0):
ERC721Votes.sol#L180-L181
// Get the previous delegateaddressprevDelegate=delegation[_from];
This function then calls into_moveDelegateVotesto transfer voting power. This time,_fromisprevDelegate, equal toaddress(0);_tois the token owner’s address; and_amountisbalanceOf(_from), the token owner’s current balance:
ERC721Votes#_moveDelegateVotes
/// @dev Transfers voting weight/// @param _from The address delegating votes from/// @param _to The address delegating votes to/// @param _amount The number of votes delegatingfunction_moveDelegateVotes(address_from,address_to,uint256_amount)internal{unchecked{// If voting weight is being transferred:if(_from!=_to&&_amount>0) {// If this isn't a token mint:if(_from!=address(0)) {// Get the sender's number of checkpointsuint256nCheckpoints=numCheckpoints[_from]++;// Used to store the sender's previous voting weightuint256prevTotalVotes;// If this isn't the sender's first checkpoint: Get their previous voting weightif(nCheckpoints!=0)prevTotalVotes=checkpoints[_from][nCheckpoints-1].votes;// Update their voting weight_writeCheckpoint(_from,nCheckpoints,prevTotalVotes,prevTotalVotes-_amount);}// If this isn't a token burn:if(_to!=address(0)) {// Get the recipients's number of checkpointsuint256nCheckpoints=numCheckpoints[_to]++;// Used to store the recipient's previous voting weightuint256prevTotalVotes;// If this isn't the recipient's first checkpoint: Get their previous voting weightif(nCheckpoints!=0)prevTotalVotes=checkpoints[_to][nCheckpoints-1].votes;// Update their voting weight_writeCheckpoint(_to,nCheckpoints,prevTotalVotes,prevTotalVotes+_amount);}}}}
Theifcondition on L#203 istrue, since_fromisaddress(0),_tois the owner address, and_amountis nonzero:
ERC721Votes.sol#L202-L203
// If voting weight is being transferred:if(_from!=_to&&_amount>0) {
Execution skips theifblock on L#205-217, since_fromisaddress(0):
ERC721Votes.sol#L205-L217
// If this isn't a token mint:if(_from!=address(0)) {// Get the sender's number of checkpointsuint256nCheckpoints=numCheckpoints[_from]++;// Used to store the sender's previous voting weightuint256prevTotalVotes;// If this isn't the sender's first checkpoint: Get their previous voting weightif(nCheckpoints!=0)prevTotalVotes=checkpoints[_from][nCheckpoints-1].votes;// Update their voting weight_writeCheckpoint(_from,nCheckpoints,prevTotalVotes,prevTotalVotes-_amount);}
However, theifblock on L#220-232 will execute and increase the voting power allocated to_to:
ERC721Votes.sol#L220-L232
// If this isn't a token burn:if(_to!=address(0)) {// Get the recipients's number of checkpointsuint256nCheckpoints=numCheckpoints[_to]++;// Used to store the recipient's previous voting weightuint256prevTotalVotes;// If this isn't the recipient's first checkpoint: Get their previous voting weightif(nCheckpoints!=0)prevTotalVotes=checkpoints[_to][nCheckpoints-1].votes;// Update their voting weight_writeCheckpoint(_to,nCheckpoints,prevTotalVotes,prevTotalVotes+_amount);}
The token owner’s voting power has now been increased by an amount equal to their total number of tokens, without an offsetting decrease.
This exploit only works once: if a token owner subsequently delegates to themselves after their initial self delegation,prevDelegatewill be set to a non-default value in_delegate, and the delegation logic will work as intended.
Impact
MaliciousERC21Votesowners can accrue more voting power than they deserve. Especially malicious owners may quietly acquire multiple tokens before doubling their voting power. In an early DAO with a small supply of tokens, the impact of this exploit could be significant.
Recommended Mitigation Steps
Make thedelegatesfunctionpublicrather thanexternal:
/// @notice The delegate for an account/// @param _account The account addressfunctiondelegates(address_account)publicviewreturns(address) {addresscurrent=delegation[_account];returncurrent==address(0) ?_account:current;}
Then, call this function rather than accessing thedelegationmapping directly:
/// @dev Updates delegate addresses/// @param _from The address delegating votes from/// @param _to The address delegating votes tofunction_delegate(address_from,address_to)internal{// Get the previous delegateaddressprevDelegate=delegates(_from);// Store the new delegatedelegation[_from] =_to;emitDelegateChanged(_from,prevDelegate,_to);// Transfer voting weight from the previous delegate to the new delegate_moveDelegateVotes(prevDelegate,_to,balanceOf(_from));}
Note that the original NounsDAO contracts follow this pattern. (Seehereandhere).
Test cases
(Put the following test cases inGov.t.sol)
functiontest_delegate_to_self_doubles_voting_power()public{mintVoter1();assertEq(token.getVotes(address(voter1)),1);vm.startPrank(voter1);token.delegate(address(voter1));assertEq(token.getVotes(address(voter1)),2);}functionmintToken(uint256tokenId)internal{vm.prank(voter1);auction.createBid{ value:0.420ether}(tokenId);vm.warp(block.timestamp+auctionParams.duration+1seconds);auction.settleCurrentAndCreateNewAuction();}functiontest_delegate_to_self_multiple_tokens_doubles_voting_power()public{// An especially malicious user may acquire multiple tokens// before doubling their voting power through this exploit.mintVoter1();mintToken(3);mintToken(4);mintToken(5);mintToken(6);assertEq(token.getVotes(address(voter1)),5);vm.prank(voter1);token.delegate(address(voter1));assertEq(token.getVotes(address(voter1)),10);}
Alex the Entreprenerd (judge) commented:
The warden has shown how, because of an incorrect assumption in reducing a non-existing previous delegate votes, through self-delegation, a user can double their voting power.Because the finding shows how the delegation system is broken, and because governance is a core aspect (Secure funds, move funds, etc..) I agree with High Severity.Due to multiple reports of this type, with various different attacks, mitigation is non-trivial.
kulkarohan (Nouns Builder) confirmed
Alex the Entreprenerd (judge) commented:
In contrast to the dangerous overflow, this finding (and its duplicates) has shown how the Delegation Mechanism can be used to double the voting power.For that reason, the underlying issue being different, am choosing to leave this finding separate.