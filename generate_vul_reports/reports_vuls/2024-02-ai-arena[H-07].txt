[H-07] Fighters cannot be minted after the initial generation due to uninitializednumElementsmapping
Submitted byhaxatron, also found byvisualbits,vnavascues,sandy,shaka,alexxander,evmboi32,DarkTower,VAD37,0xStriker, DanielArmstrong (1,2),14si2o_Flint,MidgarAudits,Ryonen,KupiaSec,Topmark,0xmystery,AgileJune,immeas,MrPotatoMagic,sashik_eth,soliditywala,nuthan2x,0xaghas,merlinboii,VrONTg,Krace,ke1caM,Draiakoo,petro_1912,PoeAudits,ktg,0xCiphky,Tychai0s,EagleSecurity,lil_eth,0xvj,_eperezok,pkqs90,pynschon,peter,Aamir,sl1,0xAlix2,fnanni,alexzoid,blutorque,cartlex_,Giorgio,radin100,klau5,t0x1c,WoolCentaur,jesjupyter,aslanbek,SpicyMeatball,0xbranded,Varun_05,d3e4,juancito,0xlamide,Aymen0909,btk,devblixt, andubl4nk
InFighterFarm.solthere is a mappingnumElementswhich stores the number of possible types of elements a fighter can have in a generation:
FighterFarm.sol#L84-L85
/// @notice Mapping of number elements by generation.mapping(uint8=>uint8)publicnumElements;
But the problem here is that only the initial generation, Generation 0, is initialized to 3, in thenumElementsmapping during the constructor ofFighterFarm.sol.
FighterFarm.sol#L100-L111
/// @notice Sets the owner address, the delegated address./// @param ownerAddress Address of contract deployer./// @param delegatedAddress Address of delegated signer for messages./// @param treasuryAddress_ Community treasury address.constructor(addressownerAddress,addressdelegatedAddress,addresstreasuryAddress_)ERC721("AI Arena Fighter","FTR"){_ownerAddress=ownerAddress;_delegatedAddress=delegatedAddress;treasuryAddress=treasuryAddress_;numElements[0] =3;}
It is therefore not possible to write to thenumElementsmapping for any other generations. As they are uninitialized,numElements[i] = 0wheni != 0
Moreover, thisnumElementsmapping is read from when creating a fighter.
FighterFarm.sol#L458-L474
/// @notice Creates the base attributes for the fighter./// @param dna The dna of the fighter./// @param fighterType The type of the fighter./// @return Attributes of the new fighter: element, weight, and dna.function_createFighterBase(uint256dna,uint8fighterType)privateviewreturns(uint256,uint256,uint256){=>uint256element=dna%numElements[generation[fighterType]];// numElements is 0 when generation[fighterType] != 0.uint256weight=dna%31+65;uint256newDna=fighterType==0?dna:uint256(fighterType);return(element,weight,newDna);}
Therefore if the protocol updates to a new generation of fighters, it will not be able to create anymore new fighters asnumElements[generation[fighterType]]will be uninitialized and therefore equal 0. This will cause the transaction to always revert as any modulo by 0 will cause a panicaccording to Solidity Docs
Modulo with zero causes a Panic error. This check can not be disabled through unchecked { â€¦ }.
Recommended Mitigation Steps
Allow the admin to update thenumElementsmapping when a new generation is created.
raymondfam (lookout) commented:
MissingnumElements[generation[fighterType]]setter.
brandinho (AI Arena) confirmed
AI Arena mitigated:
https://github.com/ArenaX-Labs/2024-02-ai-arena-mitigation/pull/7
Status:Mitigation confirmed. Full details in reports fromniser93,d3e4, andfnanni.