[H-07] Missing enough exogenous collateral check inVaultManagerV2::liquidatemakes the liquidation revert even if (DYAD Minted>Non Kerosene Value)
Submitted byshikhar229169, also found byHonour,Circolors,Maroutis,KupiaSec,3th,ke1caM,0xfox,0xSecuri,Sancybars,Strausses,kennedy1030,Stormreckson, and0x486776
The vulnerability is present in theVaultManagerV2::liquidatefunction where it doesn’t have any check for whether the vault has enough exogenous collateral leading to no liquidation even if the non-kerosene value is less than DYAD minted.
It is intended that the position of user’s DNFT has enough exogenous collateral and should be 150% overcollateralized. But there will arise a case when a position is no doubt 150% collateralized by the support of kerosene value, but the non-kerosene value is reduced below the DYAD token minted. As a result of which the vault doesn’t have enough required exogenous collateral. But due to the missing check for enough non-kerosene value collateral in liquidate function, the liquidation will never happen and reverts.
Impact
The position will never be liquidated, for the above discussed case. As a result of which the (DYAD Minted>Non Kerosene Value), making the value of DYAD to fall.
Proof of Concept
Add the below test file intest/fork/v2.t.sol, and add the imports:
import {DNft} from"../../src/core/DNft.sol";import {ERC20} from"@solmate/src/tokens/ERC20.sol";import {OracleMock} from"../OracleMock.sol";import {IVaultManager} from"../../src/core/VaultManagerV2.sol";
Run the test (Replace the$ETH_MAINNET_RPC_URLby your eth mainnet rpc url):
forge test --mt test_LiquidationReverts_EvenIfVaultHasNotEnoughExoCollateral --fork-url $ETH_MAINNET_RPC_URL
functiontest_LiquidationReverts_EvenIfVaultHasNotEnoughExoCollateral() public {address user =makeAddr("user");vm.deal(user,100ether);Licenser licenser =Licenser(MAINNET_VAULT_MANAGER_LICENSER);vm.prank(MAINNET_OWNER);licenser.add(address(contracts.vaultManager));DNft dnft =DNft(MAINNET_DNFT);vm.startPrank(user);uint256 id =dnft.mintNft{value:10ether}(user);// user adds vaultcontracts.vaultManager.add(id,address(contracts.ethVault));contracts.vaultManager.addKerosene(id,address(contracts.wstEth));// user adds weth to the vaultdeal(MAINNET_WETH, user,10ether);// get 10 weth to the userERC20(MAINNET_WETH).approve(address(contracts.vaultManager),10ether);contracts.vaultManager.deposit(id,address(contracts.ethVault),10ether);// user adds wsteth to the vaultdeal(MAINNET_WSTETH, user,10ether);// get 10 wsteth to the userERC20(MAINNET_WSTETH).approve(address(contracts.vaultManager),10ether);contracts.vaultManager.deposit(id,address(contracts.wstEth),10ether);// user mints DYAD tokenuint256 nonKeroseneValue =contracts.vaultManager.getNonKeroseneValue(id);// user mints DYAD equal to the usd value of their non-kerosene collateraluint256 dyadToMint = nonKeroseneValue;contracts.vaultManager.mintDyad(id, dyadToMint, user);// now the value of weth falls to 90%_manipulateWethPrice();// now get the nonKeroseneValueuint256 newNonKeroseneValue =contracts.vaultManager.getNonKeroseneValue(id);// non kerosene usd value reduced, as weth price reducedassert(newNonKeroseneValue < dyadToMint);// now it is intended that the user should be liquidated by a liquidator// but due to missing exogenous collateral check, the liquidation will not happenvm.stopPrank();address liquidator =makeAddr("liquidator");vm.deal(liquidator,100ether);vm.startPrank(liquidator);uint256 liquidatorId =dnft.mintNft{value:10ether}(liquidator);// the liquidation reverts as mentioned, even if (dyadMinted > nonKeroseneValue)// thus shows unintended behaviourvm.expectRevert(IVaultManager.CrTooHigh.selector);contracts.vaultManager.liquidate(id, liquidatorId);vm.stopPrank();}function_manipulateWethPrice() internal {(, int256 ans, , , ) =contracts.ethVault.oracle().latestRoundData();OracleMock oracleMock =newOracleMock(uint256(ans));vm.etch(address(contracts.ethVault.oracle()),address(oracleMock).code);vm.warp(1);OracleMock(address(contracts.ethVault.oracle())).setPrice(uint256(ans) *90e18/100e18);}
Tools Used
Unit Test in Foundry
Recommended Mitigation Steps
Update the line 214 inVaultManagerV2.sol:
- if (cr >= MIN_COLLATERIZATION_RATIO) revert CrTooHigh();+ if (cr >= MIN_COLLATERIZATION_RATIO && getNonKeroseneValue(id) >= dyad.mintedDyad(address(this), id)) revert CrTooHigh();
Assessed type
Context
0xMax1 (DYAD) commented:
Kerosene should be included in the transfer upon liquidation.
shafu0x (DYAD) confirmed
Koolex (judge) commented:
@shafu0x - Could you please help with the severity assessment here?The impact is obviously high, However, I’m not sure about the likelihood.Here is an example, the user added extra kerosene (i.e. above 50%):A user added 110% value of non-kerosene+60% value of kerosene=>CR 170% .Non-kerosene value drops below 100%, let’s say 90%.Now, we have 90% value of non-kerosene+60% value of kerosene=>CR 150%.Liquidation is reverting.Another scenario, would be that the kerosene added by the user is equal or less than 50%, and the price of kerosene goes up enough to cover 150% as CR.So, likelihood depends on two events:Amount of kerosene has to be above 50%.Price of kerosene going up.Given the info above, would you say the likelihood is low, medium or high?
shafu0x (DYAD) commented:
As @0xMax1 mentioned, we fix this by also moving kerosene in the case of a liquidation. I think this should fix it.
Koolex (judge) commented:
The liquidation will revert if CR>=1.5 but the non-kerosene collateral value is less than 100%. So, minted dyad is not backed by (at least) 100% of non-kerosene collateral.After discussing the likelihood of this with the sponsor, I believe the issue stands as high.
adam-idarrha (warden) commented:
This issue should be invalid. The issue is about the state where positions have exogenous collateral less than the DYAD minted, suggesting such positions should be liquidated. However, the protocol specifications do not mandate liquidation under these circumstances if the position remains overall sufficiently collateralized with kerosene.
T1MOH (warden) commented:
Protocol docsstate:If a Note’s collateral value in USD drops below 150% of its DYAD minted balance, it faces liquidation.There is no mention that position is subject to liquidation whenexogenous collateral < DYAD minted.
Yes there is that check inwithdraw()andmintDyad(), but from reviewer’s perspective it is no more than sanity check. Because bypassing this check as it is doesn’t harm protocol due to the nature of Kerosine price (it has valuation of surplus collateral).
That’s because if someone has say 90% of exogenous collateral and 60% of Kerosine, then somebody else has more than 100% in exogenous collateral and protocol is totally fine. As noted before, Kerosine has value only if there is surplus collateral in protocol. I think submission is invalid.
McToady (warden) commented:
The core invariant of the protocol isTVL (which is measured as the non Kerosene collateral) > DYAD total supplyPositions being able to fall below a 1:1 exogenous collateral to dyad minted ratio allows for the protocol to break it’s core invariant meaning this is a valid issue regardless of the sponsors intentions.As pointed out in issue#1027, as the value of the collateral in the protocol is all significantly correlated (to the price of ETH), a significant drop in ETH price can cause a large % of open positions to drop below this 1:1 ratio; meaning it becomes very likely this core invariant is broken.
Abdessamed (warden) commented:
The confusion around this issue is that it didn’t succeed in combining two findings.
There are two invariants related to minting/liquidating DYAD:When minting DYAD, the ratio 1:1 ofexogenous value with dyad mintedshould hold.When liquidating DYAD, the 150% ratio ofUSD collateral value (not exogenous collaterals only)should hold.This issue does not highlight the first invariant. It only talks about liquidation and it assumes that if the USD value ofexogenous collateraldrops below a 1:1 ratio, liquidation should happen, while this is a wrong assumption.Liquidation should happen if the total collateral USD value (including both exogenous and kerosene tokens) drops below 150%However, the first invariant (when minting DYAD, a 1:1 ratio should hold) is a valid finding as it demonstrates a core invariant break, but it is not highlighted in this issue.
McToady (warden) commented:
The core invariant of the whole protocol is that total TVL does not drop below total Dyad minted. Being able to liquidate positions that have fallen below the 1:1 ratio is merely a mitigation to protect the protocol from this happening.Given there is no option to post collateral in non-ETH sources (other stable coins), if ETH price were to drop & TVL to fall below DYAD minted it would lead to the stablecoin to depegging as it would no longer be backed 1:1. Being able to liquidate positions with less than a 1:1 ratio is more a mitigation to protect the health of the entire protocol rather than a bug in itself.
Koolex (judge) commented:
This issue stays as a valid high since the core invariant in the protocol can be broken leading to DYAD’s depeg.
Note: For full discussion, seehere.