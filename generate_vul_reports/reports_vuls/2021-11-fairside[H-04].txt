[H-04] ERC20ConvictionScore._writeCheckpoint` does not write to storage on same block
Submitted by cmichel
InERC20ConvictionScore._writeCheckpoint, when the checkpoint is overwritten (checkpoint.fromBlock == blockNumber), the new value is set to thememory checkpointstructure and never written to storage.
// @audit this is MEMORY, setting new convictionScore doesn't write to storageCheckpointmemorycheckpoint=checkpoints[user][nCheckpoints-1];if(nCheckpoints>0&&checkpoint.fromBlock==blockNumber) {checkpoint.convictionScore=newCS;}
Users that have their conviction score updated several times in the same block will only have their first score persisted.
POC
User updates their conviction withupdateConvictionScore(user)In the same block, the user now redeems an NFT conviction usingacquireConviction(id). This calls_increaseConvictionScore(user, amount)which calls_writeCheckpoint(..., prevConvictionScore + amount). The updated checkpoint isnotwritten to storage, and the user lost their conviction NFT. (The conviction/governance totals might still be updated though, leading to a discrepancy.)
Impact
Users that have their conviction score updated several times in the same block will only have their first score persisted.
This also applies to the total conviction scoresTOTAL_CONVICTION_SCOREandTOTAL_GOVERNANCE_SCORE(see_updateConvictionTotals) which is a big issue as these are updated a lot of times each block.
It can also be used for inflating a user’s conviction by first callingupdateConvictionScoreand then creating conviction tokens withtokenizeConviction. The_resetConvictionwill not actually reset the user’s conviction.
Recommended Mitigation Steps
Define thecheckpointvariable as astoragepointer:
Checkpointstoragecheckpoint=checkpoints[user][nCheckpoints-1];
YunChe404 (FairSide) confirmed