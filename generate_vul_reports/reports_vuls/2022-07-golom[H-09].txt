[H-09] Repeated calls tomultiStakerClaimin the same block leads to loss of funds
Submitted by Krow10
https://github.com/code-423n4/2022-07-golom/blob/e5efa8f9d6dda92a90b8b2c4902320acf0c26816/contracts/rewards/RewardDistributor.sol#L172-L210
https://github.com/code-423n4/2022-07-golom/blob/e5efa8f9d6dda92a90b8b2c4902320acf0c26816/contracts/rewards/RewardDistributor.sol#L185
A malicious user can repeatedly claim the same staker reward for an epoch, provided the transactions all happen in the same block. This can effectively be done using services likeFlashbots bundlesand will result in the draining of the WETH balance of theRewardDistributorcontract.
The idea is to bypass the require statementline 185which checks if a claim has been already done for the epoch,for a specific token ID. By moving the locked tokens in a new lock, a new token ID will be generated and can be used to claim the rewards again,if the transaction happens in the same block for which the epoch is updated.
Indeed, whenmultiStakerClaim()is called, therewardETHwill be calculated from the amount of tokens locked intokenids[tindex]at the block that triggered the epoch change (variableepochBeginTime). If, during this time, an attacker transfers its staked tokens to a new vault using themergefunction of the VE token, the function will calculate the amount of staked tokens for the newly created tokenIDas the same as the original tokenID reward.
A example abuse will look like this (pseudo-code adapted from the PoC) :
lockID=voteEscrow.create_lock(amount,1week);// Create lock #1 before// IN THE BLOCK OF EPOCH CHANGErewardDistributor.multiStakerClaim([lockId], [0]);// Claim epoch 0 rewards for lock #1voteEscrow.create_lock(1,1week);// Create lock #2 (requires 1 Golom token, could be created in advance)voteEscrow.merge(lockId,lockId+1);// Transfer lock #1 tokens to lock #2rewardDistributor.multiStakerClaim([lockId+1], [0]);// Claim same epoch rewards for lock #2// repeat ...
To abuse this, the attacker needs to follow this steps:
Have some locked Golom tokens.Wait for aaddFeecall that will trigger an epoch change (this can be monitored by looking at the mempool or predicted from block timestamps). Services like Flashbots alsoallows for specifying a range of blocks for bundlesfor better targeting.Send a bundle of transactions to be included with the block containing the epoch changing transaction (see the PoC for an example of transactions).
Note that this needs to succeed only once to allow an attacker to drain all WETH funds so if the bundle isn’t included for a particular epoch, given the frequency of epoch changes, the bundle will eventually be included and trigger the exploit.
Proof of Concept
See warden’soriginal submissionfor full proof of concept.
Recommended Mitigation Steps
I initially thought about a few possible solutions:
Checking a lock creation time to prevent claiming from locks created in the same blockbut the attacker can just create the blocks beforehand.Tracking themsg.senderortx.originfor preventing multiple calls tomultiStakerClaimin the same blockbut the attacker can just send transactions from different addresses.Preventing the merging of locksbut the attacker can just create locks in advance and withdraw/add funds continuously between old/new locks.
None really fixes the vulnerability as it comes from the feature oflocks being tradablemeaning it’s not practically feasable to know if a lock has already be claimed by an individualjust by looking at the lock ID.
A possible solution would be to find a way to prevent multiple calls to the same function within a block or better, make a checkpoint of the locks balances for eachepochBeginTimeand uses these values for calculating the rewards (instead of querying the VE contract in the loop).
0xsaruman (Golom) confirmed
0xsaruman (Golom) resolved and commented:
Removedmerge()Ref:https://github.com/golom-protocol/contracts/commit/b987077f2a227273bc7051e382bd55264162a77e