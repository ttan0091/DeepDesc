[H-10] Adversary can steal approvedtOLPs to Magnetar via_paricipateOnTOLP
Submitted bydeadrxsezzz
Any user could steal any approvedtOLPto Magnetar. This is because within the Magnetar call, if the user has not minted atOLPNFT, they can participate with any id they wish, by inputting it inparticipateData.
function_participateOnTOLP(IOptionsParticipateDatamemoryparticipateData,addressuser,addresslockDataTarget,uint256tOLPTokenId)internal{if(!cluster.isWhitelisted(0,participateData.target)) {revertMagnetar_TargetNotWhitelisted(participateData.target);}// Check tOLPTokenIdif(participateData.tOLPTokenId!=0) {if(participateData.tOLPTokenId!=tOLPTokenId&&tOLPTokenId!=0) {revertMagnetar_tOLPTokenMismatch();}tOLPTokenId=participateData.tOLPTokenId;// @audit - does not verify sender owns that token}if(tOLPTokenId==0)revertMagnetar_ActionParamsMismatch();IERC721(lockDataTarget).approve(participateData.target,tOLPTokenId);uint256oTAPTokenId=ITapiocaOptionBroker(participateData.target).participate(tOLPTokenId);addressoTapAddress=ITapiocaOptionBroker(participateData.target).oTAP();IERC721(oTapAddress).safeTransferFrom(address(this),user,oTAPTokenId,"0x");}
The only thing to consider is that the following line, must not revert:
IERC721(lockDataTarget).approve(participateData.target,tOLPTokenId);
Since the contract will not be an owner oftOLPTokenId, we’ll need to input a custom maliciouslockDataTargetaddress, for which the approve will not revert. ThelockDataTargetis not used at any other place within that function, so there’ll be no problem inputting a malicious address here.
After doing the described steps above, the attacker will lock the innocent user’stOLPand get theoTAPNFT minted to themselves, effectively stealing the innocent user’s NFT.
Recommended Mitigation Steps
Verify that the sender owns thattOLPid.
Assessed type
ERC721
0xWeiss (Tapioca) confirmed