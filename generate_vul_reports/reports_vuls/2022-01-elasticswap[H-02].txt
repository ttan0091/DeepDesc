[H-02] TransferringquoteTokento the exchange pool contract will cause future liquidity providers to lose funds
Submitted by WatchPug
In the current implementation, the amount of LP tokens to be minted whenaddLiquidity()is calculated based on the ratio between the amount of newly addedquoteTokenand the current wallet balance ofquoteTokenin theExchangecontract.
However, since anyone can transferquoteTokento the contract, and make the balance ofquoteTokento be larger than_internalBalances.quoteTokenReserveQty, existing liquidity providers can take advantage of this by donatingquoteTokenand make future liquidity providers receive fewer LP tokens than expected and lose funds.
https://github.com/code-423n4/2022-01-elasticswap/blob/d107a198c0d10fbe254d69ffe5be3e40894ff078/elasticswap/src/libraries/MathLib.sol#L578-L582
liquidityTokenQty=calculateLiquidityTokenQtyForDoubleAssetEntry(_totalSupplyOfLiquidityTokens,quoteTokenQty,_quoteTokenReserveQty// IERC20(quoteToken).balanceOf(address(this)));
PoC
Given:
TheExchangepool is new;AliceaddLiquidity()with1e18 baseTokenand1e18 quoteToken, recived1e18LP token;Alice transfer99e18 quoteTokento theExchangepool contract;BobaddLiquidity()with1e18 baseTokenand1e18 quoteToken;BobremoveLiquidity()with all the LP token in balance.
Expected Results: Bob recived1e18 baseTokenand >=1e18 quoteToken.
Actual Results: Bob recived ~0.02e18 baseTokenand ~1e18 quoteToken.
Alice can nowremoveLiquidity()and recive ~1.98e18 baseTokenand ~100e18 quoteToken.
As a result, Bob suffers a fund loss of0.98e18 baseToken.
Recommendation
Change to:
liquidityTokenQty=calculateLiquidityTokenQtyForDoubleAssetEntry(_totalSupplyOfLiquidityTokens,quoteTokenQty,_internalBalances.quoteTokenReserveQty);
0xean (ElasticSwap) confirmed and commented:
This does appear to be correct after attempting a POC. Thank you WatchPug!
Alex the Entreprenerd (judge) commented:
The warden identified a way to exploit the protocol math to devalue future liquidity provision at the advantage of early liquidity providers.The exploit is extractive in nature, however, because this is reliably performable and effectively breaks the protocolâ€™s goals and mechanics, I believe High Severity to be appropriate.
0xean (ElasticSwap) resolved