[H-01]V3Vault.solpermit signature does not check receiving token address is USDC
Submitted byVAD37, also found by thank_you (1,2,3),santiellena,ArsenLupin,jesusrod15, andayden
InV3Vault.solthere all 3 instances ofpermit2.permitTransferFrom(), all 3 does not check token transfered in is USDC token.
Allowing user to craft permit signature from any ERC20 token and Vault will accept it as USDC.
Impact
User can steal all USDC from vault using permit signature of any ERC20 token.
Proof of Concept
Here is how Vault accept USDC from user. Vault will acceptUniswap.Permit2signature transfer allowance from Permit2 then to vault contract.
https://github.com/code-423n4/2024-03-revert-lend/blob/435b054f9ad2404173f36f0f74a5096c894b12b7/src/V3Vault.sol#L877C1-L917C6
if(params.permitData.length>0) {(ISignatureTransfer.PermitTransferFrommemorypermit,bytesmemorysignature) =abi.decode(params.permitData, (ISignatureTransfer.PermitTransferFrom,bytes));permit2.permitTransferFrom(permit,ISignatureTransfer.SignatureTransferDetails(address(this),state.liquidatorCost),msg.sender,signature);}else{// take value from liquidatorSafeERC20.safeTransferFrom(IERC20(asset),msg.sender,address(this),state.liquidatorCost);}
Below is permit signature struct that can be decoded from user provided data:
interfaceISignatureTransferisIEIP712{/// @notice The token and amount details for a transfer signed in the permit transfer signaturestructTokenPermissions{// ERC20 token addressaddresstoken;// the maximum amount that can be spentuint256amount;}/// @notice The signed permit message for a single token transferstructPermitTransferFrom{TokenPermissionspermitted;// a unique value for every token owner's signature to prevent signature replaysuint256nonce;// deadline on the permit signatureuint256deadline;}}
V3Vault.solneeds to checkTokenPermissions.tokenis USDC, same as vault main asset.
Uniswap.permit2.permitTransferFrom()only checks if the sign signature is correct. This is meaningless as Vault does not validate input data.
This allows users to use any ERC20 token, gives allowance and permits toUniswap.Permit2. The Vault will accept any transfer token fromPermit2as USDC. Allowing users to deposit any ERC20 token and steal USDC from vault.
Recommended Mitigation Steps
Fix missing user input validations in 3 all instances ofpermit2:
https://github.com/code-423n4/2024-03-revert-lend/blob/main/src/V3Vault.sol#L717C1-L725C15https://github.com/code-423n4/2024-03-revert-lend/blob/main/src/V3Vault.sol#L893C1-L898C15https://github.com/code-423n4/2024-03-revert-lend/blob/main/src/V3Vault.sol#L877C1-L917C6
if(params.permitData.length>0) {(ISignatureTransfer.PermitTransferFrommemorypermit,bytesmemorysignature) =abi.decode(params.permitData, (ISignatureTransfer.PermitTransferFrom,bytes));require(permit.permitted.token==asset,"V3Vault: invalid token");//@permitted amount is checked inside uniswap Permit2permit2.permitTransferFrom(permit,ISignatureTransfer.SignatureTransferDetails(address(this),state.liquidatorCost),msg.sender,signature);}else{// take value from liquidatorSafeERC20.safeTransferFrom(IERC20(asset),msg.sender,address(this),state.liquidatorCost);}
Assessed type
ERC20
kalinbas (Revert) confirmed
Revert mitigated:
PRhere- checks token in permit.
Status:Mitigation confirmed. Full details in reports fromthank_you,b0g0andktg.