Type of vulnerability: Signature Bypass Attack
Cause of vulnerability: Lack of checks to ensure consistency of indices for both owner and master
Working process of the exploit: 
1. Owner creates ownersigned access tree with 1item array
2. Owner sends signed access tree to the Casinos to call replaceItemAddress()
3. Owner inputs oneAddress the object, and anotherAddress its master object, duplicated into the ownersigned access tree
4. The exploit is due to lack of checks between oneAddress and its master object, anotherAddress. Instead, the function performs checks between oneAddress and their owner object. 
5. Consequently, checks always return false, allowing oneAddress to be replaced by a duplicated anotherAddress, permitting access to the previous master object's functions.