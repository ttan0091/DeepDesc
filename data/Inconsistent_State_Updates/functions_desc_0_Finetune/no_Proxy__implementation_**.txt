Type of contract: Proxy Contract
Purpose of the contract: Upgradeability of implementations while preserving the balance state of accounts
Key functions:
1. initialize(address _implementation, address governance_): sets the initial implementation and governance address.
2. _implementation() internal view virtual returns (address): abstract function that is implemented by the proxy and returns the current implementation address.
3. _delegate(address implementation) internal: delegates the function call to the _implementation() address.
4. id(): returns the checksum address of the current implementation.
5. initializeSignature(): returns a signature identifying the initialization function to be called during upgradability.
6. _fallback(): delegates the current call to the address returned by _implementation().

Working process:
1. Deploy a new implementation contract.
2. Deploy an upgradable proxy and call initialize(implementedAddress, governanceAddress).
3. All calls to the proxy are delegated to the implementation.
4. To update, deploy a new implementation, get its address, and call setImplementation(newImplementationAddress) on the proxy.
5. Now, all calls to the proxy are delegated to the new implementation.
6. The balance and data state stays the same across implementations.