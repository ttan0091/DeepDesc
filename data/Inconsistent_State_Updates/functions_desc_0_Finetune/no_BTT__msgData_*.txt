Type of the code: ERC2771 upgradeable proxy implementation
Purpose of the code: Providing a transparent proxy for upgrading contracts while retaining the address as a legacy address

Working process:
1. The implementation contract is initialized with a version string (v2).
2. The GnosisSafeERC2771Module contract is deployed and this implementation contract is set as the new implementation.
3. The getTokenPeg() function call is routed via the STATIC_TARGET (set to 0 in the storage) using ERC2771TokenPeg.swimTo().” . poolStrategyContract.address.
4. The getTokenPeg() function call is then routed via the GnosisSafeProxy.js using Gnosis Safe’s ERC2771Module, with the implementation contract as the target.
5. The token’s getTokenPeg() function is executed, decorating it with additional logics such as checking if the configuration is locked.
6. The getTokenPeg() function then calls its internal function _msgData(), which returns msg.data, simulating an upgrade transaction.
7. The getTokenPeg() function further calls sumTokensInPeg, which internally calls the getPrice() function on each token to calculate the total value in peg.