### Type of contract: ERC20 Proxy
### Objective: To provide an upgradeable and delegable interface for ERC20 compliant tokens.
### Components:
1. ERC20Proxy contract: Acts as the entry point and contains no business logic.
2. ERC20Interface and ERC20ImplUpgradeable contracts: Define the ERC20 interface and implement the actual token functionality.
3. TokenFactory contract: Used to create new instances of ERC20 tokens through the mintGemini function.

### Working Process:
1. A new ERC20 token is created using the mintGemini function in TokenFactory, which instantiates an ERC20Proxy contract and an ERC20Impl contract. The custodian of ERC20Proxy is set to the caller of mintGemini.
2. The ERC20Proxy constructor initializes the name, symbol, and decimals of the token, along with setting the custodian.
3. The ERC20Proxy delegates all ERC20 function calls to an ERC20Impl instance through an _impl variable.
4. The totalSupply, balanceOf, transfer, approve, and other standard ERC20 functions are overriden in ERC20Proxy to forward the calls to ERC20Impl.
5. Any interaction with the token, such as transfers, happens solely via ERC20Proxy, which redirects the calls to ERC20Impl to execute the actual business logic of the token.