Type of contract: TimeLock.sol
Purpose of the contract: Acts as a timelock for admin functions by having a delay before an admin action takes effect.
Key functions:
 queueTransaction(): Queues a transaction to be executed once the timelock period has passed.
 executeTransaction(): Allows a queued transaction to be executed after the timelock period has elapsed.
 cancelTransaction(): Cancels a queued transaction if it has not yet been executed.
 acceptAdmin(): Accepts the pending admin role after the timelock period, enabling the new admin to take control.
 setDelay(): Sets the timelock delay period.
Working process: When a new admin is proposed (via guardianSetPendingAdmin()), the acceptAdmin() function must be called after a delay set by setDelay() to ensure the proposal is valid and to prevent a malicious pending admin from taking over the system immediately. Once the acceptAdmin() function is called after the delay, the new admin officially takes control (subject to the governor timelock as well).