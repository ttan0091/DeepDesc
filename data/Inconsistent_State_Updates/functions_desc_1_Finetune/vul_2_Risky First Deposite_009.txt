Type of contract: Fractional Reserve Vault
Language: Solidity
Working principle: The contract allows users to deposit tokens and mints shares in return. These shares can be redeemed for a proportional amount of tokens. The contract operates on the principle of maintaining a target reserve ratio of tokens to shares, using the "fractional reserve" concept from traditional banking.
Key functions and variables:
 deposit(uint256 _amount): Users can deposit tokens, and in exchange, they receive a proportional amount of shares based on the current reserve ratio.
 redeem(uint256 _shares): Users can redeem a specified amount of shares for tokens, again based on the current reserve ratio.
 rebalance(): The contract manager can rebalance the reserve ratio by buying or selling tokens to ensure the reserve meets the target ratio.
 balance(): Internal function that calculates the balance of tokens, including any unclaimed fees and tokens in the pToken pool.
 totalBalance(): Public view function to retrieve the total balance of tokens, excluding any rebalancing fees.
 sumTokensInPeg(): Internal function to calculate the total balance of tokens by considering tokens, pTokens, and unclaimed fees.