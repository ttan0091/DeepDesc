[Execution Flow]:
This code defines an internal function named _writeCheckpoint, which updates the voting checkpoints for a given voter. The function accepts four parameters: voter (an address representing the voter), nCheckpoints (a uint32 representing the number of existing checkpoints for the voter), oldVotes (a uint96 representing the previous number of votes), and newVotes (a uint96 representing the updated number of votes). Hereâ€™s a detailed explanation of how this function works:

The function signature includes the parameters voter, nCheckpoints, oldVotes, and newVotes. _writeCheckpoint is an internal function, meaning it can only be called within the contract or its derived contracts. The function does not return any value.

The function starts by determining the current block number and ensuring it fits within a uint32 type using the safe32 function. If the block number exceeds 32 bits, the function reverts with the message "FXS::_writeCheckpoint: block number exceeds 32 bits".

The function then checks if there are existing checkpoints (nCheckpoints > 0) and if the block number of the last checkpoint (checkpoints[voter][nCheckpoints  1].fromBlock) matches the current block number. If both conditions are true, it updates the votes of the last checkpoint to newVotes.

If the conditions are not met (i.e., no checkpoints exist or the block number does not match), the function creates a new checkpoint for the voter. It assigns the current block number and newVotes to the new checkpoint (checkpoints[voter][nCheckpoints]). It also updates the number of checkpoints for the voter by incrementing numCheckpoints[voter] by 1.

Finally, the function emits an event VoterVotesChanged with the parameters voter, oldVotes, and newVotes to notify external listeners of the change in the voter's votes.

