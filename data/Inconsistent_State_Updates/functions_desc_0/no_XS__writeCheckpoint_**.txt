This code defines an internal function named _writeCheckpoint, which is responsible for updating the voting checkpoints for a specific voter. The function takes four parameters: voter (the address of the voter), nCheckpoints (the number of existing checkpoints for the voter), oldVotes (the previous number of votes for the voter), and newVotes (the new number of votes for the voter). Here's a detailed explanation of how this function works:

1. The function starts by getting the current block number using block.number and ensuring that it fits within a 32bit unsigned integer using the safe32 function. This block number is stored in the blockNumber variable.

2. The function then checks if there are existing checkpoints for the voter (nCheckpoints > 0) and if the last checkpoint for the voter was made in the current block (checkpoints[voter][nCheckpoints  1].fromBlock == blockNumber).

3. If the conditions in step 2 are met, the function updates the number of votes in the last checkpoint for the voter to the new number of votes (newVotes).

4. If the conditions in step 2 are not met, a new checkpoint is created for the voter. The new checkpoint includes the current block number and the new number of votes. The numCheckpoints mapping for the voter is then incremented to reflect the addition of a new checkpoint.

5. Finally, the function emits an event VoterVotesChanged to notify external entities that the number of votes for the voter has been updated from oldVotes to newVotes.

In summary, the _writeCheckpoint function manages the updating of voting checkpoints for a specific voter, ensuring that the checkpoints are correctly recorded and updated based on the provided parameters.