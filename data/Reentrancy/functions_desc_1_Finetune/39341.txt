Type of vulnerability:
The vulnerability in the `execute` function allows an attacker to front-run the flash loan and manipulate the exchange rate of the flash-swapped tokens, leading to theft of collateral.
Cause of vulnerability:
The use of `tx.origin` in the `execute` function allows the attacker to front-run the contract and execute functions based on the origin of the transaction, which can be the attacker's address.
Working of the vulnerability:
1. Attacker sets up contracts to execute `openPosition` and `closePosition` functions using `WONE` as collateral.
2. Attacker ensures the `WONE` to `USDAO` pool has a low balance of `WONE` by adding liquidity with a small flash-loaned `WONE` amount.
3. Attacker initiates a flash loan, borrows a large amount of `WONE` from the pool, swaps it for `USDAO`, and repays the loan.
4. While the flash loan is in progress, the attacker exploits the `execute` function to manipulate the exchange rate by executing the `closePosition` function.
5. After the flash loan is repaid, the attacker swaps their `WONE` back to `USDAO` at a much lower rate due to the manipulated pool, effectively stealing the underlying `WONE`.
Prevention strategy:
Avoid using `tx.origin` and instead use `msg.sender` in the `execute` function to ensure the functions are executed by the correct sender rather than allowing front-running based on transaction origin.