Type of vulnerability: Reentrancy
Cause of vulnerability: Ability to withdraw before payment is committed
Working process: 
1. Perform a successful deposit into the contract.
2. Immediately perform a withdraw.
3. Access the fallback function of the attacker contract, which had been prepared to exploit the vulnerability.
4. Execute the [transferFrom](https://github.com/vittominacorda/KeepMyEther/blob/main/erc20.sol#L133) call for allowdex of smartinox token.
5. Invoke the deposit to the attacker contract, ensuring that the payment to etherscan will not be committed until after this function is executing.
6. Transfer the ether via the receive function to the contract we want to transfer somehow.
7. The contract will reach a withdraw, and this time balance will be non-zero since payment has been committed.
8. Proceed to [Perform a Selfdestruct](https://github.com/vittominacorda/KeepMyEther/blob/main/erc20.sol#L51) transparent proxy storage transfer.