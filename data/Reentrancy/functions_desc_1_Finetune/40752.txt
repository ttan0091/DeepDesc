Type of vulnerability: Reentrancy or DoS
Cause of vulnerability: Lack of gas stipend and order of operations
Working process of the code: 
1. An attacker pays a small amount (< 5 wei) to the `Owner` contract.
2. The `Owner` contract records the last value of the reward balance for the attacker's address.
3. The attacker then uses another contract to call `untrustedWithdrawReward(msg.sender)` on the `Owner` contract.
4. The `untrustedWithdrawReward` function tries to transfer the reward balance to the attacker's address using `msg.sender` and logs.
5. The logging operation (which is the last operation) consumes all remaining gas after the transfer.
6. The `call.value` operation adds the required gas for the transfer but does not execute the transfer because gas is already fully consumed.
7. The after failed transfer, the reward balance is zeroed and it is impossible to be executed gain.