Type of vulnerability: Untrusted Input Manipulation
Cause of vulnerability: Lack of validation for zero address input in `divideRewards` function, allowing the manipulator to set the contract owner's address as the target.
Working of the vulnerability: An attacker manipulates the input to the `divideRewards` function, setting the target address as the contract owner's address. This results in the entire reward amount being credited to the contract owner, who can claim the rewards repeatedly without updating the `lastFlushedBlock` state variable.
Impact of the vulnerability: The contract owner can drain the contract of all BNB rewards by repeatedly claiming rewards without contributing to the rewards pool.
Proposed solution: Add validation to ensure that the target address in the `divideRewards` function is not the contract owner or the zero address. This prevents the contract owner or an attacker from manipulating the system to drain the contract of rewards.