Type of vulnerability: Reentrant Attack
Cause of vulnerability: The WithdrawBalance function uses the transfer() function, which does not protect against reentrancy attacks by design.
Working process of the vulnerability: An attacker initially sets up the contract with strawman calls, ensuring they receive the tokens. Subsequently, the attacker can call the contract and make reentrant calls to withdraw more tokens than they should be entitled to.
Economic impact of the vulnerability: The attacker can repeatedly steal tokens from the contract by exploiting the lack of reentrancy protection, draining the contract of its entire balance.