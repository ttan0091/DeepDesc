Type of vulnerability: Arithmetic Underflow
Cause of vulnerability: The `totalBurn` value in the contract is not being updated to reflect the newly burnt tokens, leading to a mismatch between the actual token supply and the total supply stored in the contract.
Working process of the code: When tokens are burnt, the `burnFrom()` function is called with the `_supplier` (which is the address of the token contract in this case), the `_funder` (which is the balance holder), and the `_value` (the amount to burn). This function calls `childBurn()` to burn the tokens in `OnyxToken.sol`. However, after burning the tokens, `contractBalance` is not updated, leading to a discrepancy between the actual supply and the stored supply. This discrepancy causes the `addToMamu()` function to reject the transaction due to the newly minted amount exceeding the borrowed amount.