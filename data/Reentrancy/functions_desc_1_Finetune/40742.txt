Type of vulnerability: Uninitialized Storage Pointer
Cause of vulnerability: The contract attempts to store a value at a specific storage slot without first ensuring that a value is already set in that slot, leading to the default behavior of zero being interpreted as a valid address.
Working process of the vulnerability: When a user attempts to withdraw their balance but their balance is zero, the contract writes the value of zero (interpreted as a valid address) to the storage slot. This address, being non-zero, prevents the user from ever again storing a balance in that slot, effectively locking the user's funds in the contract.