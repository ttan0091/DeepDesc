Type of the contract: Dividend Distributor
Language: Solidity
Purpose: To distribute dividends to token holders of the owning contract

The `DividendDistributorv3` contract handles reward distribution calls by sending transfer amounts to token holders of the associated pool. The `onlyOwner` modifier and the `loggedTransfer` function are used to execute these transfers, ensuring that only the contract owner (revenue pool) can distribute rewards.

The contract tracks the token balance and dividend accumulated per share for each token by storing `dividendOf[token_i]` and `divPointsOf[token_i]`. When a `updatePool` is triggered, it iterates through all tokens, updating their accumulators based on new updates and rebases. 

The `calcAmount` function calculates the pending amount to be distributed by the distributor. It iterates through token owners, summing pending rewards based on the portion each token owner is entitled to.

The `distributeAll` function is used to distribute all rewards that are currently pending, first by calling `doUpdatePoolFor` for each token and then iterating over token owners to distribute the rewards.

The `loggedTransfer` function is just a modifier to execute the token transfers via `TransferHelper` but does not handle the logic of reward distribution itself.