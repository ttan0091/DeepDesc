Type of vulnerability: Denial of Service (DoS) through Stuck Ether

Cause of vulnerability: The `OwnedUpgradeabilityProxy` contract does not include a `payable` fallback function. When this contract attempts to receive Ether from the `pendingProxy.owner.unwindex()` address (vested tokens), the transfer will fail because the `OwnedUpgradeabilityProxy` is not `payable`, causing the vesting to be interrupted.

How the vulnerability occurs: When a user (contributor) sends enough Ether to the `pendingProxy.owner.unwindex()` address for those funds to be transferred to the `ProxyController.libraryAddress()`, if `msg.sender == pendingProxy` (i.e., the `pendingProxy` received Ether), the `ProxyController` does not have a mechanism to transfer that Ether to the new `ProxyController.vendor()`, leading to Ether being stuck in the contract and blocking distributions.

Consequences of the vulnerability: The Ether sent as payment for the tokens is burned, making it impossible for users to claim and sell their rights to the airdrop. This causes a reputational and financial loss for the "Price Feeds Midi" project and unfair distribution of rewards for affected users.