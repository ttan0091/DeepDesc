Type of the task: Code Execution
Objective: Understand the functionality of a specific Solidity function to determine its vulnerability to reentrancy attacks.
Code to be analyzed: 
```
contract TokenBank {

    mapping (address => uint) public Holders;
    
    function WithdrawToHolder(address _addr, uint _wei) public payable {
        if(Holders[msg.sender] > 0) {
            if(Holders[_addr] >= _wei) {
                _addr.call.value(_wei)();
                Holders[_addr] -= _wei;
            }
        }
    }
}
```

Additional context: The focus is on the `WithdrawToHolder` function and its vulnerability to reentrancy attacks due to the use of `call.value` without appropriate checks and state modifications.