Type of vulnerability: Integer Underflow
Cause of vulnerability: Misalignment between the variable used (wingsETHRewards) and the entry in the balances mapping, which should be wingsToPurchaseAddress. The use of wingsToPurchaseAddress as the index in balances is critical, and currently, wingsETHRewards is used in both the global state and as an index, causing references into the balances mapping to be misaligned with the address they are checking for overflow.
Working process of the code: The function mintETHRewards is called to transfer funds to a project, reducing the balance of wingsETHRewards. This triggers the checkAllPurchases() function, which attempts to check if a purchase has expired. The function accesses the balances mapping using the address stored in wingsToPurchaseAddress, but because it is using wingsETHRewards as the index, the balance check always fails, leading to the contract being marked as breached and blocking any further operations.