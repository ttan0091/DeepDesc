Type of contract: DAO (Decentralized Autonomous Organization)
Audience: Crypto and blockchain enthusiasts, developers, and auditors
Abstract: The DAO contract facilitates the creation and execution of proposals within the DAS ecosystem, allowing token holders to fund new functionality or community initiatives. Each proposal specifies a beneficiary, an ether amount to be transferred, and a bytecode transaction to be executed. Upon successful proposal execution, the designated proposal beneficiary receives the specified ether, and the transaction bytecode is executed.
Vulnerability: Reentrancy and proposal state manipulation
Cause of vulnerability: The use of unprotected `.call.value()` with transfer of `etherAmount` introduces the potential for reentrancy attacks. Additionally, the `executeProposal` function allows the state of the proposal to be directly manipulated, enabling the execution of proposals multiple times.
Recommended fix: Implement a withdrawal design pattern or similar mechanism to allow beneficiaries to withdraw their allotted ether, update the proposal state based on the transaction success or failure, and lower the function visibility of `executeProposal` to prevent external calls from changing internal storage directly.
In-depth explanation: The `executeProposal` function is public and allows external calls to directly manipulate the state of a proposal. By doing so, one could change the state of a proposal to `Executed` and then call the function again, potentially exploiting the lack of checks on the state of the proposal. Additionally, the use of `call.value()` without reentrancy guards allows the transfer of ether to malicious receivers that can potentially subvert the proposal execution process.