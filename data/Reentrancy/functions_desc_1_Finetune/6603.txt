Type of vulnerability: Underflow and Reentrancy
Cause of vulnerability: Lack of order verification in flash loan repayment
Working process of the code: 
1. The attacker performs a flash loan, borrowing a large number of tokens (e.g., USDT).
2. The loan immediately updates the contract balance, transferring the borrowed tokens to the contract.
3. The attacker uses the time and the token supply to mint a large number of discounted tokens from the contract.
4. The attacker then burns the tokens, calling a swap to get USDT back.
5. The attacker swaps the USDT back into a padded token.
6. The attacker transfers the padded token back to the contract and immediately repays the flash loan.
7. As part of the repayment, the contract call the onFlashLoanRepaid which burns the unpadded part, but it happens after the transfer.
8. The flash loan then checks the updated balance of the contract. Because the unpadded part was burned, the contract balance is lower than it was before the attack.
9. The flash loan is not repaid, and the attacker gains full access to the collateral.