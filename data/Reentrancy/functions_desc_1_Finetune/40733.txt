Type of vulnerability: Reentrancy
Cause of vulnerability: The contract allows the `Owner` to call `untrustedWithdrawReward` on behalf of any address. The `untrustedWithdrawReward` function does not check if the fund that is being withdrawn is pegged to another fund. This allows unethical instance owners to trick the contract into transferring the pegged funds of another instance to a wallet on the ETH chain or lose it in the invalid fallback function.
Working process of the vulnerability: First, the `Owner` changes the pegged token of the instance to be an ERC20 contract with no contract code. Then, they call the function `owner/untrustedWithdrawReward` on behalf of the other instance, causing the funds to be sent to an invalid fallback function, effectively being trapped or burnt.