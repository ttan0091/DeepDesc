[Execution Flow]:
This code defines a private view function named __binaryLookup, which performs a binary search on an array of voting power history records to find the index of a record with a specific block number. The function accepts two parameters: an address (_to) and a block number (n). Hereâ€™s a detailed explanation of how this function works:

The function signature includes the parameters _to and n. __binaryLookup is a private view function, meaning it can only be called within the contract and does not modify the state. The function accepts two parameters: _to (an address) and n (a block number). The function returns a uint256 variable which represents the index of the record in the array.

The variable history stores the array of voting power history records for the address specified by _to. This array is retrieved from the votingPowerHistory mapping.

The variables i and j are initialized to represent the left and right bounds of the search interval, respectively. i is set to 0 (start of the array), and j is set to the length of the history array minus 1 (end of the array).

A while loop is used to perform the binary search. The loop continues as long as the right bound j is greater than the left bound i. Inside the loop, the middle index k of the interval [i, j] is calculated using the formula j  (j  i) / 2.

The element at the middle index k is retrieved and stored in the variable cp. If the block number of this element (cp.blockNumber) is equal to the block number n we are searching for, the function returns the index k as the result.

If the block number of the element at k is less than n, it means the target block number must be in the right half of the interval, so the left bound i is moved to the middle position k.

If the block number of the element at k is greater than n, it means the target block number must be in the left half of the interval, so the right bound j is moved to the middle position k  1.

If the loop exits without finding an exact match (i.e., j is no longer greater than i), the function returns the lower bound i, which represents the index of the largest element not greater than the target block number n.

