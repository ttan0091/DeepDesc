This code defines a smart contract named CoinToken that implements the ERC20 token standard. The contract includes various functions and variables to manage token transfers, fees, liquidity provision, and swapping tokens on the Uniswap decentralized exchange. Here's a detailed explanation of how this contract works:

1. Contract Variables:
    _rOwned: Mapping of token balances in reflection units for each address.
    _tOwned: Mapping of token balances for each address.
    _allowances: Mapping of allowances for token transfers.
    _isExcludedFromFee: Mapping to track addresses excluded from fees.
    _isExcluded: Mapping to track excluded addresses.
    _excluded: Array of excluded addresses.
    _devWalletAddress: Address for the team wallet.
    _tTotal: Total token supply.
    _rTotal: Total token supply in reflection units.
    _taxFee, _devFee, _liquidityFee: Fee percentages.
    _previousTaxFee, _previousDevFee, _previousLiquidityFee: Previous fee percentages.
    uniswapV2Router: Uniswap V2 Router contract.
    uniswapV2Pair: Uniswap V2 Pair contract.
    inSwapAndLiquify: Boolean to track swap and liquidity status.
    swapAndLiquifyEnabled: Boolean to enable/disable swap and liquidity.
    _maxTxAmount: Maximum transaction amount.
    numTokensSellToAddToLiquidity: Number of tokens to sell for liquidity.

2. Modifiers:
    lockTheSwap: Modifier to lock swap and liquidity functions during execution.

3. Constructor:
    Initializes contract variables including token details, fees, supply, and addresses.
    Creates a Uniswap pair for the token.
    Excludes owner and contract address from fees.

4. Token Transfer Functions:
    transfer, transferFrom, approve: Standard ERC20 token transfer functions.
    increaseAllowance, decreaseAllowance: Functions to adjust allowances.
    reflectionFromToken, tokenFromReflection: Conversion functions between reflection and token amounts.

5. Fee Management Functions:
    excludeFromFee, includeInFee: Functions to exclude/include addresses from fees.
    setTaxFeePercent, setDevFeePercent, setLiquidityFeePercent: Functions to set fee percentages.
    removeAllFee, restoreAllFee: Functions to remove/restore fees.

6. Internal Transfer Functions:
    _transferStandard, _transferToExcluded, _transferFromExcluded, _transferBothExcluded: Functions to handle token transfers between different address types.

7. Liquidity and Swap Functions:
    swapAndLiquify: Swaps tokens for ETH and adds liquidity to the Uniswap pool.
    swapTokensForEth, addLiquidity: Functions to swap tokens for ETH and add liquidity to the pool.

8. Utility Functions:
    setRouterAddress, setNumTokensSellToAddToLiquidity: Functions to update the Uniswap router address and liquidity threshold.

Overall, this contract allows for the creation and management of an ERC20 token with features like fees, liquidity provision, and integration with the Uniswap decentralized exchange.