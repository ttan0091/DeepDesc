This code defines an internal view function named _msgSender, which is used to determine the actual sender of a message in a contract. The function checks if the sender is a trusted forwarder by calling the isTrustedForwarder function with msg.sender as the parameter. If the sender is a trusted forwarder, the function uses assembly code to extract the actual sender address from the calldata. Here's a detailed explanation of how this function works:

The function _msgSender is an internal view function, meaning it can only be called within the contract or its derived contracts and does not modify the state of the contract. The function returns an address variable named sender, which represents the actual sender of the message.

Within the function, it first checks if the msg.sender is a trusted forwarder by calling the isTrustedForwarder function with msg.sender as the parameter. If the msg.sender is a trusted forwarder, the function uses assembly code to extract the actual sender address from the calldata.

The assembly block is used to directly access the calldata and extract the sender address. The calldatasize() function returns the size of the calldata, and calldataload() is used to load a 32byte word from the calldata at a specific position. In this case, calldataload(sub(calldatasize(), 20)) loads the last 20 bytes of the calldata, which contain the sender address. The shr(96, ...) operation shifts the loaded 20byte value to the right by 96 bits, effectively removing the first 12 bytes, leaving only the last 20 bytes representing the sender address.

If the msg.sender is not a trusted forwarder, the function simply returns msg.sender as the sender address.

Overall, the _msgSender function provides a way to determine the actual sender of a message, especially in cases where a trusted forwarder is involved in the message forwarding process.