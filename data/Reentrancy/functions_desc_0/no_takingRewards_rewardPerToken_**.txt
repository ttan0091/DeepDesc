This code defines a public view function named rewardPerToken that calculates the reward per token for a staking contract. The function first checks if the _staking_token_supply is equal to 0. If it is, the function returns the rewardPerTokenStored value. If the _staking_token_supply is not 0, the function calculates the updated reward per token based on various factors.

Here's a detailed explanation of how this function works:

1. The function signature includes the public and view modifiers, indicating that it is a publicly accessible readonly function that does not modify the state of the contract.

2. Inside the function, there is an ifelse statement that checks if the _staking_token_supply is equal to 0. If it is, the function returns the rewardPerTokenStored value immediately.

3. If the _staking_token_supply is not 0, the function calculates the updated reward per token using the following formula:
   rewardPerTokenStored + (lastTimeRewardApplicable()  lastUpdateTime)  rewardRate  crBoostMultiplier()  1e18 / PRICE_PRECISION / _staking_token_boosted_supply

    lastTimeRewardApplicable() returns the last time rewards were applicable.
    lastUpdateTime is the last time the reward rate was updated.
    rewardRate is the rate at which rewards are distributed per second.
    crBoostMultiplier() returns a multiplier based on certain conditions.
    1e18 is a constant to adjust the precision of the calculation.
    PRICE_PRECISION is a constant used for precision in the division operation.
    _staking_token_boosted_supply is the total supply of staked tokens after applying any boost.

4. The calculated value is then returned as the result of the function, representing the updated reward per token for the staking contract.

In summary, the rewardPerToken function calculates and returns the reward per token based on the current state of the staking contract, taking into account factors such as the reward rate, time intervals, boost multipliers, and token supply.