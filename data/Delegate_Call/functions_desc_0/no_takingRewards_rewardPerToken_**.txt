This code defines a public, view function named rewardPerToken, which is overridden from a base contract. The function calculates and returns the reward per token based on certain conditions and parameters.

Hereâ€™s a detailed explanation of how this function works:

1. Function Signature: The function rewardPerToken is declared as public and view, meaning it can be called externally and does not modify the state of the contract. It is also marked as override, indicating that it is overriding a function from a base contract.

2. Return Type: The function returns a uint256 value, which represents the reward per token.

3. Condition Check: The function first checks if the total supply of staking tokens (_staking_token_supply) is zero.
    If _staking_token_supply is zero, it immediately returns rewardPerTokenStored. This is likely a stored value representing the reward per token when no tokens are staked.

4. Calculation: If _staking_token_supply is not zero, the function performs a more complex calculation to determine the reward per token.
    It starts with rewardPerTokenStored, which is the base reward per token stored in the contract.
    It then adds to this base value the result of a series of arithmetic operations:
      lastTimeRewardApplicable().sub(lastUpdateTime): This calculates the time elapsed since the last update. lastTimeRewardApplicable() likely returns the latest time at which rewards are applicable, and lastUpdateTime is the time of the last update.
      mul(rewardRate): This multiplies the elapsed time by the rewardRate, which is the rate at which rewards are distributed.
      mul(crBoostMultiplier()): This multiplies the result by a boost multiplier, which could be a factor that increases rewards based on certain conditions or criteria.
      mul(1e18): This multiplies the result by 1e18 (a large number often used to represent decimals in Solidity).
      div(PRICE_PRECISION): This divides the result by PRICE_PRECISION, which is likely a constant representing the precision of prices or values in the contract.
      div(_staking_token_boosted_supply): Finally, this divides the result by the total boosted supply of staking tokens, which adjusts the reward per token based on the total amount of tokens that have been boosted.

5. Return Value: The function returns the calculated reward per token, which is the sum of rewardPerTokenStored and the result of the complex calculation described above.

In summary, the rewardPerToken function calculates the reward per token by considering the time elapsed since the last update, the reward rate, a boost multiplier, and the total boosted supply of staking tokens. This ensures that the rewards are distributed fairly and proportionally to the staked tokens and their respective boosts.