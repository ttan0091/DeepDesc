This code defines an internal function named _writeCheckpoint, which is used to update the voting checkpoints for a delegatee in a smart contract. The function takes four parameters: the address of the delegatee, the current number of checkpoints, the old number of votes, and the new number of votes.

Here’s a detailed explanation of how this function works:

1. Block Number Calculation:
    The function starts by calculating the current block number using safe32(block.number, "Tribe: block number exceeds 32 bits"). The safe32 function ensures that the block number is within a 32bit range, throwing an error if it exceeds this limit.

2. Checkpointing Logic:
    The function then checks if there are any existing checkpoints (nCheckpoints > 0) and if the most recent checkpoint’s block number matches the current block number (checkpoints[delegatee][nCheckpoints  1].fromBlock == blockNumber).
    If the conditions are met, it means the current block number is the same as the last checkpoint’s block number, so the function updates the votes in the most recent checkpoint (checkpoints[delegatee][nCheckpoints  1].votes = newVotes).
    If the conditions are not met, it means a new checkpoint needs to be created. The function then creates a new checkpoint with the current block number and the new votes (checkpoints[delegatee][nCheckpoints] = Checkpoint(blockNumber, newVotes)). It also updates the number of checkpoints for the delegatee (numCheckpoints[delegatee] = nCheckpoints + 1).

3. Event Emission:
    Finally, the function emits an event DelegateVotesChanged(delegatee, oldVotes, newVotes) to notify external listeners that the delegatee’s votes have been changed from oldVotes to newVotes.

In summary, the _writeCheckpoint function is responsible for maintaining a history of voting checkpoints for each delegatee. It ensures that the checkpoints are updated correctly based on the current block number and the new votes, and it emits an event to inform external systems of these changes. This mechanism is crucial for tracking and verifying the voting power of delegates over time in a decentralized governance system.