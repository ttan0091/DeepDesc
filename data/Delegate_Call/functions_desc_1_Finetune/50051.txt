Type of vulnerability: Uninitialized Storage Pointer
Cause of vulnerability: The WL1 contract does not initialize its owner variable, leaving it set to zero, which is the default address (0x0000...). This allows an attacker to call the wallet function with 0x0 as the first argument, impersonating the owner and gaining control over the contract.
Working of the exploit: The attacker first deploys the Contract1 contract and sets themselves as the owner. Subsequently, the attacker deploys the WL1 contract and calls its setWallet function, passing the address of Contract1 as the first argument and 0x0 as the second argument. This allows the attacker to withdraw Peg tokens from WL1 using the fake 0x0 virtual wallet.
Impact of the exploit: The exploit allows the attacker to steal tokens from the affected contract, causing a potential financial loss to the users and the protocol.
Recommended fix: Ensure that critical variables, such as the owner address, are properly initialized to prevent unauthorized access. In this case, the owner should be set to the address specified during contract deployment or to msg.sender if not specified. Additionally, consider implementing access control modifiers or using constructor functions to set up initial state.