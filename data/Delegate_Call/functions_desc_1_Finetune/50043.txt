Type of contract: Metamorphic Proxy
Purpose of the contract: To morph into different proxy implementations (e.g., DecentralandProxy, GnosisSafeProxy) based on the implementation parameter set during the initial transaction.
Working process: 
1. The factory contract creates an instance of MetamorphicProxy and initializes it with an initial implementation (e.g., getOwner()).
2. The MetamorphicProxy has a fallback function that will delegate calls to the DelegateProxy3.
3. The DelegateProxy3 contract delegates the call to the implementation, which can be dynamically changed through the delegate() call.
4. DelegateProxy3's delegate() function fetches the latest implementation from the user storage and delegates calls accordingly.
5. For each implementation, there is a corresponding proxy implementation (e.g., Callee). The transition happens when the implementation is changed in the DelegateProxy3.
6. This pattern allows the proxy to morph into different proxy implementations without changing the intermediary contract.