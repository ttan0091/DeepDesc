Type of contract: When to Use implementation or library
 Implementation (most common): when you want a deployment to be the contract (with its functions in a fixed place and visible) and there's no need to share logic between deployed contracts.
 Library: when the logic is part of an isolated, standalone function to avoid redundancy, with reduced gas consumption due to code sharing.

Function type: DelegateCall or Call
 DelegateCall: used to run the code of a different contract under the context of the current contract, allowing the called contract to modify the state variables of the calling contract.
 Call: used to invoke functions from different contracts or to interact with external contracts, but it does not allow the called contract to modify the state variables of the calling contract.

Mechanism: Application of DelegateCall in Code Execution
 Initial state: A contract is deployed with some basic variables set by the creator.
 DelegateCall: The constructor performs a delegate call to a library, essentially executing the library's constructor within the context of the original contract. This allows variables and customizable functions to be set based on the original variables of the deployed contract.
 Purpose: This process is designed to save on gas costs by using library logic that has already been deployed, enabling customization of deployed contracts while avoiding unnecessary OPCODE duplication.