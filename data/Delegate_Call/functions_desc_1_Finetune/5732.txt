Type of vulnerability: Access Control
Cause of vulnerability: Lack of permission checks in the _replaceContract function, which allows any attacker to impersonate the storage contract and execute arbitrary code.
Impact of vulnerability: The attacker can upgrade the storage contract to a malicious version, allowing them to steal all the users' funds.
Explanation of working process: 
1. The ProxiableProxy proxy delegate calls the storage contract (MasterChefV2 in this case).
2. When the MasterChefV2 proxy calls the _upgrade function, it leads to masterChefPermanent.proxy calling _upgrade. This is done via the Proxiable contract itself, where _replaceContract in the storage is used.
3. _replaceContract in the Proxiable contract allows for impersonating the storage context itself, thus allowing the replacement of storage by malicious versions.
4. A malicious proxy can return skimSettings() from storage to load a malicious MasterChefSettingsL1.
5. The newMasterChefSettings of MasterChefSettingsL1 can be a malicious storage designed to leak admin's private key or store value tokens into its contract balance.