Contract Name: OwnedUpgradeabilityProxy
Type of Contract: Proxy Contract
Programming Language: Solidity

Purpose of the Contract:
The OwnedUpgradeabilityProxy is a proxy contract that allows for the seamless upgrade of the implementation address. This feature enables upgradable smart contracts by decoupling the storage from the logic layer. The proxy delegates all calls to the implementation contract, which can be changed without disrupting the contract's state or its address.

Key Components/Functions:
1. upgradeToAndCall(address implementation, bytes data): This function upgrades the implementation of the proxy to a new version and then delegates the call to the new implementation, allowing the new logic to integrate with the existing state.

Working Process:
1. A user deploys a proxy with an initial implementation.
2. At a later stage, the user wants to upgrade the logic of the contract without changing the contract address or losing the existing contract state.
3. The user calls upgradeToAndCall function on the proxy, specifying the new implementation and any initialization data for that implementation.
4. The proxy updates its internal storage to start delegating calls to the new logic contract.
5. The initialization data (if provided) is sent as a new call to the new implementation to ensure proper setup and migration of state.