Type of contract: Crowdsale Token Contract
Programming language: Solidity
Key functionality: Timelocked withdrawal for contract owner
Vulnerability type: Authorization bypass through a reentrancy attack
Cause of vulnerability: Lack of reentrancy guard in the withdraw() function allowed the contract ether balance to be withdrawn multiple times before the deadline, bypassing the deadline check.
Exploit scenario: An attacker sends a transaction with a large gas value to the withdraw() function, enabling reentrancy. By repeatedly calling the withdraw() function before the deadline, the attacker can drain the contract's ether balance.
Fix: Implement a reentrancy guard and update the Solidity compiler version to include it.