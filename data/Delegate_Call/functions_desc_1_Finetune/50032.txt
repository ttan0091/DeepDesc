Type of contract: Rolebased Access Control (RBAC)
Key functionality: Delegation of method calls using delegatecall for a specific role (emitter)

Working process:
1. The contract EH has a single role called emitter, controlled by the emit role in the parent contract.
2. The events function in EH can be called only by the emitter, specified in the constructor, via the onlyOwner modifier.
3. When the events function is called, it uses delegatecall to pass the method and data to the addr contract.
4. This delegation allows the addr contract to act as if the method was called within its own context, but the logic is executed using the storage of the EH contract.
5. The addr contract must handle the delegated method calls appropriately to ensure they do not interfere with its own logic and to prevent storage collisions or corruptions.

Risk/Security considerations:
 The addr contract must be carefully designed to handle the delegated calls correctly to avoid unintended updates to storage variables.
 Using delegatecall can be risky, as any change to the EH contract (including bugs or sabotage) can potentially break the functionality or security of the addr contract.
 Proper access control and thorough testing of the addr contract's behavior with different method calls are critical to ensuring the overall security and integrity of the system.