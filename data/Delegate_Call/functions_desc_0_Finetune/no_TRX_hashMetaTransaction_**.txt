Type of contract: Gasabstracted MetaWallet

Purpose of the code: To enable gas abstraction by allowing users to delegate transaction execution to a relayer, who pays the gas fees and thus shields users from direct payment of gas.

Working process: 
1. User signs a MetaTransaction using their private key, which includes the function to call (functionSignature), Params to be used in the function call, the from address, and a nonce.
2. The signed MetaTransaction is sent to a relayer, who submits the transaction onchain, paying the gas fees.
3. The contract verifies the signature, checks the nonce to prevent replay attacks, and executes the function call.

Detailed explanation:
1. MetaTransaction struct: Contains the user's address (from), the nonce to prevent replay, the function to be called (functionSignature), and the parameters for that function.
2. hashMetaTransaction: Computes the message hash that is signed by the user, including the META_TRANSACTION_TYPEHASH, nonce, user's address, and keccak256 of the functionSignature.
3. getChainIdInternal: Helper function to get the chain ID for EIP712 compatibility.
4. getDomainSeparator: Computes the EIP712 domain separator used in the message signing.
5. verify: Verifies the signature of the MetaTransaction by using ecrecover and checking if the recovered address matches the user's address.
6. execute: Checks if the relayer is whitelisted, if the nonce is correct, and if the execution was successful.
7. executePayable: Similar to execute but for payable functions, ensuring the sent value matches the expected value.
8. The modifyBalance: Internal function for adding/subtracting balances on behalf of users.