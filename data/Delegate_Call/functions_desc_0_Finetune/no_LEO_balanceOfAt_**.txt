Type of contract: CloneableToken.sol

Purpose of the code: The code implements a basic ERC20 token that is cloneable, allowing users to create snapshots of token balances at specific block numbers.

Working process:
1. The contract maintains an array of struct Checkpoint for each token holder to record balance changes at different block numbers.
2. The balanceOfAt function first checks if there are any existing balance changes recorded in the balances array for the specified owner.
3. If no changes exist or the first change occurred after the specified block number, the function queries the parent token (if it exists) to get the balance at the genesis block or the parent's snapshot block.
4. If there are recorded changes, the function returns the balance at the specified block using the getValueAt function.
5. The getValueAt function iterates through the balance changes to calculate the final balance at the specified block number.
6. The mint function is used to add new tokens, burn function for burning, move function to change balances between accounts, delegate to delegate votes, and delegateBySig for offchain signature delegation.
7. The owner can generate a snapshot of all balances until the current block number using the createSnapshot function.