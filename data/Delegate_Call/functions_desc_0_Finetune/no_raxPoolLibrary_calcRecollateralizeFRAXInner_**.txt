Type of analysis: Mathematical and Economic Analysis

Purpose of the code: To calculate the amount of collateral tokens needed to maintain the global collaterization ratio when burning FRAX tokens

Assumptions: 
1. Ratio is defined in basis points (1e4).
2. User needs to provide both the amount of collateral and the price of collateral to calculate the phaseout of FRAX tokens.

Conditions under which the routine is called: 
1. Onchain burning, where users are burning FRAX in return for collateral.
2. During redemptions, when the redemption fee is disabled or is set to 0 and where recollateralize_frax() is called with 0 or without any redemption_fee.

Detailed explanation of the function:
1. collat_value_attempted is calculated by multiplying the collateral_amount with col_price and dividing by 1e6.
2. effective_collateral_ratio is determined by multiplying global_collat_value and 1e6, then dividing by frax_total_supply to represent the ratio in 1e6.
3. recollat_possible is calculated as the difference between the product of global collateral ratio and frax total supply, and the product of frax total supply and effective collateral ratio, all divided by 1e6.
4. Depending on the comparison between collat_value_attempted and recollat_possible, amount_to_recollat is assigned the lower value to ensure the effective collateral ratio remains at or below the global collateral ratio.
5. The function returns the amount to recollateralize in FRAX equivalent and the actual amount to recollateralize.