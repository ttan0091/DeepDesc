Type of contract: MerkleDistributor

Purpose of the code: To distribute rewards to users based on their stake in multiple pools, with the reward amount decreasing over time.

Working process: The distribute function is called periodically (e.g., daily), which then calls distributeRoundShares. This function calculates the share of rewards for each user in the current round, based on their stake. The rewards are split into _ROUND_SUBROUNDS rounds (e.g., 96 subrounds per day), and users can only claim their rewards after a claimStart time has passed.

After calculating the share of rewards for each user in the current round, the function updates a record for each user with the accumulated rewards from all previous rounds. If a user has accumulated rewards in previous rounds that have not been claimed, this function will calculate the increased share for these rewards too.

The distributeSubroundShares function is responsible for updating the state for a single subround. It takes an array of users and their stakes, along with the total amount of rewards for the subround. The function calculates the share of rewards for each user based on their stake and updates the storage array to reflect the user's increased share.

The distribution of subround shares also decreases the percentage of rewards that have not been claimed by users, ensuring that all rewards are claimed over time.

Overall, the process involves splitting rewards into subrounds, updating users' reward shares, monitoring when users can claim their rewards, and reducing unclaimed rewards percentages.