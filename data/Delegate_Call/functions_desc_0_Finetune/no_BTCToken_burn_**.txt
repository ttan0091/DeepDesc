Type of Contract: ChildLogic.sol

Purpose of the Contract: It is designed to key functions of meta_token that need to be enabled in release and exclude meta_token to include other basic data needs to be saved on child.

Usage of the burn Logic Function: The burn Logic function helps to burn the custodial btc from the child chain and sends the peg back to meta_token. The native btc is the most important value of dogefish meta_token on the root chain, which mainly comes from ToP and MTP bond.

Execution Flow of the burn Logic Function:
1. The operator starts the burn task, the PeginProof is said to be sent to DogeFish during the task.
2. The operator calls burnLogic, sends class Value_to_root_btc with status preparedBurning on ReleasableMetaToken contract with its TaskHash, Operator & remainingRequires.
3. If Status=0, then only manager approve operator before performing btc transfers.
4. ./startBurn means rootLock is to set atomicState=undefined. yields atomicState=burning with taskHash.
5. At the same time, transform BurnLogic is sending class Value_to_btc_chain with some following arguments on metaroot logic:
a. exchange Crosschain Peg; Peg value = this.TotalPeg;BTC value = Value
b. save claimValue with public value = message.Peg if parentMind = false.
6. The operator must release the btc from the Class Value_to_btc_chain in the following conditions:
a. Once corresponding(U,t) arrives.
b. Before t > expirationTime.
7. Once U arrives, this task shall be settled with Task State=SettledState. MagneticAuthorizedTokens are to be burned, the proof of btc chain is saved.
8. The material() is reserved for the identity of the corresponding Claimant.
9. Then, hashLock sets Meta to burn, btc2root(where TaskState=reserved) is AtomicState, EmptyPublicSet, & EmptyClassSet.
10. BTC to be locked for rootLock with metaroot.