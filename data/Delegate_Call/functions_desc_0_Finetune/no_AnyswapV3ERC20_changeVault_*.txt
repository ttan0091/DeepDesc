Type of contract: Multiasset Vault Contract
        Purpose of the contract: To manage token assets and enable swap capability to/from Uniswap, Sushiswap, etc.
        
        Detailed working process: 
        
        1. The primary function of the contract is to receive, store, and manage tokens, and provide an interface to swap tokens through AMMs like Uniswap or Sushiswap.
        
        2. The contract consists of a list of supported tokens, including basic information like decimals and smart contract addresses of the tokens.
        
        3. It also maintains a record of how the tokens are transferred in and out of the contract using TokenVault and Token.
        
        4. The TokenVault is an implementation of anyV1.converter.TokenVault.root which provides a method to swap baseToken into poolToken. Additionally, extra logic is added to allow swap between baseTokens (e.g., WETH) and userTokens (e.g. Aave).
        
        5. The core logic for swapping tokens is implemented in the emoFeeToPeg function where it checks if there is an advertised price for the specific token, and then calls sumTokensInPeg to compute the equivalent token amount in PEG.
        
        6. The contract also provides an emergency recovery mechanism in case the Vault becomes nonfunctioning due to any issues. This can be triggered through the changeVault function to update the vault owner.