Type of contract: MiniMeToken
        Purpose: A token contract that facilitates voting based on a snapshot of token holdings.
        
        Working process: 
        1. The contract maintains an array of balances mapping addresses to arrays of Checkpoint structs, recording the balance of each address at various blockNumbers.
        2. When a transfer occurs, the function doTransfer is called, which updates the balance arrays for both sender and receiver with the new balances.
        3. The function getPastTotalBalanceAt is used to calculate the total supply of tokens at a specific block number by summing each address's balance at that block number.
        4. When createCloneToken is invoked to create a fork token, it copies the balance history from the parent token to ensure the forks start from the same state.
        5. The function claims+releaseVFunds ensures that the caller does not vote repeatedly with the same funds by adjusting voting influence based on past claims.
        6. ITokenController is used to determine if a transfer is allowed, and the ERC1404 extension is implemented for custom error messages in case of transfer restrictions.
        7. Voting power is calculated using getNumCheckpoints to determine the balance at the current blockNumber, and this is used to calculate the user's voting power.
        8. When IssueNewLairIDP is executed, the amount of IDP created is determined based on the peg value, and the user's balance is updated accordingly.
        9. The voting process is initiated by ProposeAndVote, which assures that the caller has at least 1e18 voting power and accepts proposals based on the must.flag setting.
        10. Proposals can be executed through Execute, which requires minimal support and the proposal must not be expired.