Type of vulnerability: Division By Zero
Cause of vulnerability: A token is added with a zeropeg value, which leads to division by zero in the following function:

function sumTokensInPeg(
    ...
)
internal
returns (uint256 totalPeg) {
    ...
    require(pegPerToken[tokenAddress] != 0, "PegSwap: currentPeg Comparison");
    ...
}

Explanation of vulnerability: When a token is added with a zeropeg value to the ledger, the currentPeg value for that token remains zero. This zero currentPeg value causes a division by zero in the sumTokensInPeg function, which is utilized in several places in the contract, preventing any transactions that call these functions from failing.
Fix for vulnerability: To mitigate this issue, a check should be added before calling sumTokensInPeg to verify that the currentPeg is not zero, and revert if it is.