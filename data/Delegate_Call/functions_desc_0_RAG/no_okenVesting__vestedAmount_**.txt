The code I am giving you:
solidity
function _vestedAmount() private view returns (uint256) {
    uint256 currentBalance = FXS.balanceOf(address(this));
    uint256 totalBalance = currentBalance.add(_released);
    if (block.timestamp < _cliff) {
        return 0;
    } else if (block.timestamp >= _start.add(_duration) || _revoked) {
        return totalBalance;
    } else {
        return totalBalance.mul(block.timestamp.sub(_start)).div(_duration);
    }
}

You need to answer like this:
This code defines a private view function named _vestedAmount, which calculates the amount of tokens that have vested at the current time.

Hereâ€™s a detailed explanation of how this function works:

1. Function Signature: The function _vestedAmount is declared as private and view, meaning it can only be called internally within the contract and does not modify the state of the blockchain. It returns a uint256 value.

2. Current Balance Calculation: The function starts by retrieving the current balance of the FXS token held by the contract itself using FXS.balanceOf(address(this)). This balance is stored in the variable currentBalance.

3. Total Balance Calculation: The total balance of tokens considered for vesting is calculated by adding the currentBalance to _released. The _released variable likely represents the total amount of tokens that have already been released or transferred out of the contract.

4. Vesting Logic:
    Before Cliff: If the current timestamp (block.timestamp) is less than the cliff time (_cliff), the function returns 0. This means no tokens are considered vested before the cliff period.
    After Duration or Revoked: If the current timestamp is greater than or equal to the start time plus the duration (_start.add(_duration)) or if the vesting schedule has been revoked (_revoked), the function returns the totalBalance. This means all tokens are considered vested if the vesting period has ended or if the vesting schedule has been revoked.
    During Vesting Period: If neither of the above conditions is met, the function calculates the vested amount proportionally. It multiplies the totalBalance by the elapsed time since the start (block.timestamp.sub(_start)) and divides by the total duration (_duration). This calculation provides the fraction of the total balance that has vested based on the elapsed time.

5. Return Value: The function returns the calculated vested amount as a uint256 value.

This function is crucial for determining the amount of tokens that are eligible for release or transfer at any given time, based on the vesting schedule defined by _cliff, _start, _duration, and _revoked.