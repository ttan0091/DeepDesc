This code defines a public function named addSwapToken, which is used to add or update a swap token in the system. The function takes two parameters: contractAddress, which is the address of the token contract to be added or updated, and supplyIncrement, which is the amount by which the supply of the token should be incremented if the token is already supported, or the initial supply if the token is being added for the first time.

Hereâ€™s a detailed explanation of how this function works:

1. Access Control:
    The function begins with a require statement that checks if the caller (msg.sender) has the necessary role to perform this action. This is done by calling the has function on the bridgeRoles object, which presumably maintains a list of authorized addresses. If the caller does not have the required role, the function reverts with the message "Unauthorized."

2. Contract Verification:
    The function then checks if the provided contractAddress is indeed a contract address. This is done by calling the isContract function, which likely performs a check to ensure that the address contains code (i.e., it is not an externally owned account but a smart contract). If the address is not a contract, the function reverts with the message "Address is not contract."

3. Token Management:
    The function then checks if the swapTokens mapping already contains an entry for the contractAddress. The swapTokens mapping likely maps contract addresses to SwapToken structs, which store information about the token, such as the contract address and the supply.
    If the swapTokens mapping does not already contain an entry for the contractAddress (indicated by swapTokens[contractAddress].tokenContract == address(0)), the function creates a new entry in the mapping with the provided contractAddress and supplyIncrement as the initial supply.
    If the swapTokens mapping already contains an entry for the contractAddress, the function increments the existing supply by the supplyIncrement.

4. Event Emission:
    Finally, the function emits an event named AddSwapToken, which includes the contractAddress and the supplyIncrement. This event is used to notify external systems or interfaces that a swap token has been added or updated.

In summary, the addSwapToken function is a critical function for managing the list of supported swap tokens in the system. It ensures that only authorized users can add or update tokens, verifies that the provided address is a valid contract, and correctly manages the supply of the tokens.