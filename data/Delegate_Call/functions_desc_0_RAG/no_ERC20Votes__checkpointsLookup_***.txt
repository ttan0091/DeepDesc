This code defines a private view function named _checkpointsLookup, which performs a binary search to find the earliest checkpoint taken after a given blockNumber. The function is designed to work with an array of checkpoints (ckpts), where each checkpoint contains information about a block number and corresponding votes.

Hereâ€™s a detailed explanation of how this function works:

1. Initialization:
    The function starts by determining the length of the checkpoints array (ckpts.length).
    It initializes two variables, low and high, to represent the search range. Initially, low is set to 0 (the start of the array) and high is set to the length of the array.

2. Initial Narrowing of Search Range:
    If the length of the checkpoints array is greater than 5, the function attempts to narrow down the search range more quickly.
    It calculates a midpoint (mid) using the formula length  Math.sqrt(length). This formula is designed to quickly reduce the search space by focusing on a point closer to the end of the array.
    It then checks the block number of the checkpoint at this midpoint using _unsafeAccess(ckpts, mid).fromBlock.
      If this block number is greater than blockNumber, it means the desired checkpoint is before this midpoint, so it sets high to mid.
      Otherwise, it sets low to mid + 1, indicating that the desired checkpoint is after this midpoint.

3. Binary Search Loop:
    The function enters a while loop that continues as long as low is less than high.
    Inside the loop, it calculates a new midpoint (mid) using Math.average(low, high), which computes the average of low and high.
    It then checks the block number of the checkpoint at this midpoint using _unsafeAccess(ckpts, mid).fromBlock.
      If this block number is greater than blockNumber, it sets high to mid, narrowing the search range to the left half.
      Otherwise, it sets low to mid + 1, narrowing the search range to the right half.

4. Final Check and Return:
    Once the loop exits (when low equals high), the function checks if high is 0. If it is, it means the search went out of bounds, indicating that there are no checkpoints after blockNumber, so it returns 0.
    Otherwise, it returns the votes from the checkpoint at index high  1, which is the last checkpoint before or at blockNumber.

This function efficiently locates the desired checkpoint using a binary search, which is particularly useful for large arrays of checkpoints, ensuring that the search operation is performed in logarithmic time relative to the size of the array.