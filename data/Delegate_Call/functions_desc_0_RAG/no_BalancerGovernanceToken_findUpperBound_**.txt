The code I am giving you:
solidity
function findUpperBound(uint256[] storage array, uint256 element) internal view returns (uint256) {
    if (array.length == 0) {
        return 0;
    }

    uint256 low = 0;
    uint256 high = array.length;

    while (low < high) {
        uint256 mid = Math.average(low, high);

        // Note that mid will always be strictly less than high (i.e. it will be a valid array index)
        // because Math.average rounds down (it does integer division with truncation).
        if (array[mid] > element) {
            high = mid;
        } else {
            low = mid + 1;
        }
    }

    // At this point low is the exclusive upper bound. We will return the inclusive upper bound.
    if (low > 0 && array[low  1] == element) {
        return low  1;
    } else {
        return low;
    }
}


You need to answer like this:

This code defines an internal view function named findUpperBound, which takes a storage array of unsigned integers (uint256[] storage array) and an unsigned integer (uint256 element) as inputs, and returns an unsigned integer (uint256). The purpose of this function is to find the upper bound of a given element in a sorted array.

Hereâ€™s a detailed explanation of how this function works:

1. Initial Check for Empty Array:
    The function first checks if the array is empty (if (array.length == 0)). If the array is empty, it immediately returns 0, as there are no elements to compare.

2. Initialization of Binary Search Bounds:
    The function initializes two variables, low and high, to represent the bounds of the binary search. low is set to 0 (the start of the array), and high is set to the length of the array (array.length).

3. Binary Search Loop:
    The function enters a while loop that continues as long as low is less than high. This loop performs the binary search.
    Inside the loop, the function calculates the middle index (mid) using Math.average(low, high). The Math.average function performs integer division with truncation, ensuring that mid is always strictly less than high and thus a valid array index.
    The function then compares the element at the middle index (array[mid]) with the target element (element):
      If array[mid] is greater than element, it means the target element, if present, must be in the lower half of the current range. Therefore, high is updated to mid.
      Otherwise, low is updated to mid + 1, indicating that the target element, if present, must be in the upper half of the current range.

4. Determination of Inclusive Upper Bound:
    Once the while loop exits, low represents the exclusive upper bound of the target element in the array.
    The function then checks if low is greater than 0 and if the element at low  1 is equal to the target element (if (low > 0 && array[low  1] == element)). If both conditions are true, it returns low  1 as the inclusive upper bound.
    Otherwise, it returns low, which is the smallest index such that array[low] is greater than the target element.

This function efficiently finds the upper bound of a given element in a sorted array using binary search, ensuring that the complexity is O(log n), where n is the length of the array.