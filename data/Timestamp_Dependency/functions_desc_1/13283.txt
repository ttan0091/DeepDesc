This code defines a smart contract named RootInBlocks, which is designed to store timestamps associated with specific string hashes. Hereâ€™s a detailed explanation of how this contract works:

1. State Variables:
    address public owner: This variable stores the address of the contract owner. It is publicly accessible, meaning other contracts or external entities can read its value.
    mapping(string => uint) map: This is a mapping that associates string keys (hashes) with unsigned integer values (timestamps). Each hash maps to a timestamp indicating when it was added to the mapping.

2. Modifiers:
    modifier onlyOwner(): This modifier is used to restrict certain functions to be callable only by the contract owner. It checks if the msg.sender (the address that initiated the transaction) is equal to the owner. If the condition is met, the function execution continues (_;). If not, the transaction is reverted with an error message.

3. Functions:
    function put(string hash) public onlyOwner: This function allows the owner to add a new hash to the mapping. It is restricted to the owner by using the onlyOwner modifier.
      require(map[hash] == 0): This line checks if the hash is not already present in the mapping (i.e., its associated timestamp is 0). If the hash is already present, the function execution is reverted to prevent overwriting existing data.
      map[hash] = block.timestamp: If the hash is not present, this line assigns the current block's timestamp to the hash in the mapping. This timestamp represents the time when the hash was added to the mapping.
      return;: This line indicates the end of the function and returns control to the caller.

Summary of the Contract's Functionality:
 The RootInBlocks contract allows the owner to store timestamps for unique string hashes.
 It uses a mapping to store these associations and ensures that each hash is unique by checking if it already exists in the mapping before adding a new entry.
 The onlyOwner modifier ensures that only the owner can add new hashes, providing a basic level of access control.

This contract is useful in scenarios where tracking the time of addition for specific hashes is required, and access to this functionality needs to be restricted to a single trusted entity (the owner).