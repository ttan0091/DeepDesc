This code defines a Solidity smart contract named AdditionalToken, which includes several state variables and functions to manage token minting and other functionalities. Hereâ€™s a detailed explanation of how this contract works:

### State Variables
1. address public owner: This variable stores the address of the contract owner. It is publicly accessible, meaning anyone can read its value.
2. uint256 public maxProportion: This variable stores the maximum proportion (as a percentage) that can be minted per year. It is also publicly accessible.
3. uint256 public totalSupply: This variable stores the total supply of tokens. It is publicly accessible.
4. mapping(uint256 => uint256) public maxAmountPer: This mapping associates a year (represented as a uint256) with the maximum amount of tokens that can be minted in that year. It is publicly accessible.

### Modifier
1. modifier onlyOwner: This modifier ensures that only the owner of the contract can execute functions that include this modifier. It checks if the msg.sender (the address that called the function) is the same as the owner. If the condition is met, the function proceeds; otherwise, it reverts the transaction.

### Function
1. function mint(address _to, uint256 _amount) onlyOwner public returns (bool): This function allows the owner to mint new tokens. It includes the onlyOwner modifier, ensuring that only the owner can call this function.
    Parameters:
      _to: The address to which the newly minted tokens will be sent.
      _amount: The amount of tokens to mint.
    Internal Logic:
      uint256 curTime = block.timestamp: Retrieves the current timestamp of the block.
      uint256 curTimes = curTime / (31536000): Calculates the current year by dividing the current timestamp by the number of seconds in a year (31,536,000).
      if(maxAmountPer[curTimes] == 0): Checks if the maximum amount of tokens that can be minted for the current year has been set.
      maxAmountPer[curTimes] = totalSupply  (maxProportion) / (100): If the maximum amount for the current year has not been set, it calculates the maximum amount by multiplying the totalSupply by the maxProportion and dividing by 100.
    Return Value: The function returns true to indicate that the minting process was successful.

### Summary
The AdditionalToken contract is designed to manage token minting with restrictions based on the owner's permissions and annual limits. The mint function allows the owner to mint tokens, ensuring that the minting does not exceed the predefined annual limit. The contract uses a mapping to keep track of the maximum mintable amount per year, recalculating it if necessary.