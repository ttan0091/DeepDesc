This code defines a smart contract named ERC200 which includes functionality related to locking tokens for investors. Hereâ€™s a detailed explanation of how this contract works:

1. Struct Definition:
    The contract defines a struct named InvestorLock which contains a single field amount of type uint. This struct is used to store the amount of tokens locked for an investor.

2. State Variables:
    startsAt: This is a uint variable that stores a timestamp. It is likely used to determine when the locking period starts.
    _investorLocks: This is a private mapping that maps addresses to InvestorLock structs. It is used to store the locked amounts for each investor.
    investorLockedAmount: This is a uint variable that keeps track of the total amount of tokens locked across all investors.

3. Function Definition:
    getInvestorLockedAmount(address account): This is a public view function that takes an address as an argument and returns a uint. This function is used to retrieve the locked amount for a specific investor.
      Inside the function, it first retrieves the locked amount for the given account from the _investorLocks mapping.
      If the locked amount is greater than 0, it then checks the current timestamp (block.timestamp) against the startsAt timestamp.
      If the current timestamp is less than or equal to startsAt, it returns the investorLockedAmount, which is the total amount of tokens locked across all investors.
      If the current timestamp is greater than startsAt, the function does not return anything, effectively returning the default value of uint, which is 0.

### Detailed Steps of getInvestorLockedAmount Function:

1. Input Parameter:
    The function takes one parameter: account of type address, which represents the address of the investor whose locked amount is being queried.

2. Retrieving Locked Amount:
    The function accesses the _investorLocks mapping using the provided account address to get the corresponding InvestorLock struct.
    It then extracts the amount field from this struct.

3. Conditional Check:
    If the retrieved amount is greater than 0, the function proceeds to check the current timestamp against the startsAt timestamp.
    If the current timestamp (block.timestamp) is less than or equal to startsAt, it means the locking period has not yet started or is ongoing, and the function returns the investorLockedAmount.
    If the current timestamp is greater than startsAt, the function does not return anything, which means it effectively returns 0.

### Summary:
The ERC200 contract manages token locking for investors using a mapping to store locked amounts and a timestamp to determine the start of the locking period. The getInvestorLockedAmount function allows querying the locked amount for a specific investor, taking into account the current timestamp and the start of the locking period.