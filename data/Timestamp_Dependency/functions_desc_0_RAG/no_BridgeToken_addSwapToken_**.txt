[Execution Flow]:
This code defines a public function named addSwapToken, which is used to add or update a swap token in the system. The function accepts two parameters: contractAddress (the address of the token contract) and supplyIncrement (the amount by which the supply should be incremented). Hereâ€™s a detailed explanation of how this function works:

1. Access Control:
    The function starts by checking if the caller (msg.sender) has the necessary role to perform this action. This is done using the require statement with bridgeRoles.has(msg.sender). If the caller does not have the required role, the function reverts with the message "Unauthorized."

2. Contract Verification:
    The function then verifies if the provided contractAddress is indeed a contract address. This is done using the isContract(contractAddress) function. If the address is not a contract, the function reverts with the message "Address is not contract."

3. Token Handling:
    The function checks if the contractAddress is already registered in the swapTokens mapping. This is done by checking if swapTokens[contractAddress].tokenContract is equal to address(0). If it is, it means the token is not yet registered.
    If the token is not registered, the function initializes a new SwapToken struct with the contractAddress and supplyIncrement and assigns it to swapTokens[contractAddress].
    If the token is already registered, the function increments the existing supply by supplyIncrement.

4. Event Emission:
    After successfully adding or updating the token, the function emits an AddSwapToken event with the contractAddress and supplyIncrement as parameters. This event can be used to track the addition or update of swap tokens.

