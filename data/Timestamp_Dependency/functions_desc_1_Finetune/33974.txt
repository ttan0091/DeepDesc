Type of vulnerability: Predictable Hash Value
Cause of vulnerability: Use of predictable input values (block timestamp, block coinbase, block difficulty) in the calculation of curhash
Working process of the code: 
1. An attacker monitors the blockchain for a suitable mint operation (e.g., a large exchange transferUmb'].'"<_Notice?G7OXs$Y[0?`Q@#Fi) which will trigger the addguess function.
2. The attacker quickly guesses an amount that happens to be higher than any previously guessed values, placing themselves at an index <stasticsarrayitems in the statistics array.
3. The attacker gets their guess refunded, and still receives a lottery ticket because of being in the top 5 guessers.
4. The transaction triggers a payout or endround call which can only be executed by stakers. 
5. The attacker then lies to the stakers about the hashinputs input to curhash, allowing the attacker to calculate a desired hash value (and since the attacker can lie about these hash inputs, the calculated hash cancels out to be the same value as before). 
6. The attacker repeatedly lies to the stakers about curhash value until an alternator of the attacker is at index < stasticsarrayitems, and then finally reveals the real hash, which value is divisible by stasticsarrayitems.
7. Any staker can now liaises with any miner and use different solutions. A different solution lets us XOR all the solutions until we get the hash we want to open with. This means that whenever the illegal index is hit, the lottery can successfully been scammed.