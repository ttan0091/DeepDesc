Type of vulnerability: Reentrancy and Self-Destruction
Cause of vulnerability: Exploitation of reentrancy during self-destruct to recover gas fees
Working process of the vulnerability: Any user can trigger self-destruct on the target contract. During the self-destruct, the contract attempts to transfer its balance to a `gasTokenUser`, which creates a reentrancy point. If there is a `voluntaryExit`, the balance transfer will revert, resulting in the contract's destruction failing. Otherwise, if the balance transfer succeeds, the `pegTokenUser` requests the burning of a pegToken token to cover the gas fees. The burning of the pegToken triggers the `burn` function, which in turn triggers all protocol processes. The executor will execute a series of transactions, one of which is a transfer. If this transfer is to the same `gasTokenUser`, it creates a second reentrancy point, allowing the `gasTokenUser` to manipulate the second transfer, recovering twice the gas fee in pegToken tokens.
Mitigation of the vulnerability: Various mitigation strategies can be employed, such as enforcing a 6 month lock on pool positions to prevent rapid dumping and re-buying of pool positions; distributing treasury assets to another contract that is not affected by the vulnerability; using a checkpoint mechanism to handle the governance decisions that are remotely triggered through governance proposals, allowing for users to exit the pool cleanly and being re-imbursed for their assets.