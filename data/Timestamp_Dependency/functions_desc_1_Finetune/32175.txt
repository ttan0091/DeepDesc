Type of system: Crowdsale Contract
Purpose of the contract: To manage the sale of tokens for an arbitrary Peg token ratio in multiple Phases.
Key components and their functionality:
1. `START`: A constant representing the start time of the Crowdsale.
2. `getRate()`: A function that returns a rate of 1000 before the `START` time and 500 after, indicating the Peg token's ratio.
3. `initialInvestment()`: A function used to purchase exactly 1 million Peg tokens at the start of the Crowdsale.
4. `getDefaultUserInfo()`: A function to initialize a new user's info on the early access waitlist.
5. `getPhase() & completePhase()`: Functions to transition between Crowdsale Phases.
6. `contribute()`: A function for investors to contribute to token sales.
7. `finalizeSale()`: A function to process remaining tokens and allow users to withdraw their contributions.
8. `token_accept & token_(core)_contribute()`: Functions to accept and contribute tokens from different ERC20 compliant contracts.
9. `StupidCrowdsale`: The constructor to deploy the Crowdsale contract with specific settings.
10. `sumTokensInPeg()`: An internal function to convert multiple token contributions into the base token amount (Peg).
11. `totalDonatedTokensInPeg() & _addNewContribTokens()`: Functions to handle the manual conversion of all contributed tokens into Peg.
12. `manualFinishSale() & withdrawFunds()`: Functions to finalize and close the Crowdsale.
13. `_totalSupplyEditable(): A function to override the supply of the Peg token during the Crowdsale.
14. `_totalSupply(): This function helps to keep track of token holdings in the Crowdsale without affecting the initial distribution of Peg during construction.