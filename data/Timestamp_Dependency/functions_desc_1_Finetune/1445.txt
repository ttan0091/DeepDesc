Type of vulnerability: Incorrect Access Violation
Cause of vulnerability: Using `token` address to access the `released` mapping, which should be `msg.sender`.
Explanation of vulnerability: The function `vestedAmount` attempts to read the `released` mapping using the `token` address, which is immutable and set during deployment. This results in always reading the released balance for the same key (the token contract itself) instead of the actual sender's balance.
Impact of vulnerability: The impact is that the contract will always release the balance for the `token` contract instead of the `msg.sender`, leading to funds being released to the wrong address.
Proposed solution: Modify the `vestedAmount` function to retrieve the `released` balance for the `msg.sender` (recipient of vested tokens) instead of using the `token` address.