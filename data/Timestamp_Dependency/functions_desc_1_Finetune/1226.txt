Type of contract: Vesting Contract
Purpose of the contract: To manage token vesting for participants, allowing them to freeze a portion of their allocated tokens for a specified duration.
Working process: 
1. Participants call the `freezeTokens` function to freeze a certain number of tokens for a specific duration.
2. The function creates a `FreezingNode` struct that contains the end timestamp and the number of frozen tokens.
3. This struct is added to the `c_freezing_list` mapping, indexed by the participant's address.
4. The `end_timestamp` determines the duration for which the tokens are frozen.
5. Once a certain period elapses, participants can call `unfreezeTokens` to release their frozen tokens back to their balances.
6. The `validBalanceOf` function is used to compute the current balance of an address by iterating over the freezing nodes and subtracting the frozen tokens that have not yet expired.
7. If nodes have not expired, their frozen tokens are still considered to be in the balance.
8. Once the function encounters a freezing node that has not yet expired, it subtracts the number of frozen tokens from the `total_coins` tracking variable and retrieves the balance by subtracting this total from the user's initial allocation. This balance is then returned to the caller.
9. The freezing mechanism ensures that any remaining frozen tokens after the end timestamp are maintained as part of the user's balance until they unfreeze them.