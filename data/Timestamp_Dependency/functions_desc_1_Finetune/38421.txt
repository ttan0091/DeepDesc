Type of contract: Circular Array Data Structure with Temporal Indexing
Purpose of the contract: To store a fixed number of messages in an array and be able to access and update the array based on chronological order using the temporal marker.
Detailed explanation of how the contract works:
1. The contract contains a fixed-size array `messages` which is initialized to have 10 elements of type `Message`.
2. The contract maintains an index `messagesIndex` which is used to track the chronological order of messages within the array.
3. The `addMessage` function is used to add a new message to the array. It increments `messagesIndex` for every new message added.
4. As the `messagesIndex` approaches the array size, it resets to 0, creating a circular behavior where older messages are overwritten.
5. The temporal ordering of messages is maintained by the `block.timestamp`, which is used to determine the position in the array for a new message. Older messages past the array size are considered obsolete and can be overwritten.