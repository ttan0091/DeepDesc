Type of vulnerability: Reentrancy or Logic Error
Cause of vulnerability: Logic error in the `Deposit()` function, specifically in the assignment of the `owner` address, which leads to incorrect accounting of deposits and deposit end times.
Working process of the vulnerability: 
1. The first deposit is made, and the `owner` is set to `msg.sender` (the depositor).
2. Subsequent deposits on the same day do not update the `owner` but update the `depositEndTime[owner]`.
3. This leads to scenarios where `owner` is not the sender, causing all subsequent deposits to update the `depositEndTime` of the first depositor rather than the current depositor.
4. This results in the new depositor extending the term of the deposit for the first depositor, without any associated deposit amount, effectively subsidizing the first depositor's rewards.
5. The vulnerability allows the owner (first depositor) to fake the end time for large deposits, limiting how much subsequent depositors can contribute before the end time.
Fix for the vulnerability: Ensure that the `owner` is always updated correctly to reflect the current depositor, rather than retaining the original `owner`.