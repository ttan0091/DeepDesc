This code defines a smart contract named Crowdsale which includes two public state variables and a function. Hereâ€™s a detailed explanation of how this contract works:

1. State Variables:
    uint256 public bonusDeliverTime;: This variable stores a timestamp indicating when the bonus delivery should occur. It is public, meaning it can be accessed externally.
    uint256 public bonusUnsold;: This variable holds the amount of bonus tokens that remain unsold. It is also public and can be accessed externally.

2. Function returnBonus:
    function returnBonus() external returns (uint) {: This function is defined as external, meaning it can only be called from outside the contract. It returns a uint value, which in this context is the amount of unsold bonus tokens.
    require(block.timestamp > bonusDeliverTime);: This line checks if the current block timestamp is greater than the bonusDeliverTime. If this condition is not met, the function execution will revert, ensuring that the bonus can only be returned after the specified delivery time.
    require(bonusUnsold > 0);: This line checks if there are any unsold bonus tokens (bonusUnsold is greater than 0). If there are no unsold tokens, the function execution will revert.
    return bonusUnsold;: If both conditions are satisfied, the function returns the amount of unsold bonus tokens.

Summary:
The Crowdsale contract is designed to manage and return unsold bonus tokens after a specified delivery time. The returnBonus function ensures that the tokens are only returned if the current time is past the delivery time and if there are unsold tokens available. This mechanism helps in controlling the timing and availability of bonus token returns in a crowdsale scenario.