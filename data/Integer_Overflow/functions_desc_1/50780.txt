This code defines a library named SafeMath and a contract named PIGGY_BANK. The SafeMath library provides a safe method for subtraction to prevent underflow, and the PIGGY_BANK contract allows users to collect amounts from their accounts.

Hereâ€™s a detailed explanation of how this code works:

### Library SafeMath

The SafeMath library contains a single function sub which performs a safe subtraction operation.

 Function Signature:
  solidity
  function sub(uint256 a, uint256 b) internal pure returns (uint256)
  
   internal: This function can only be called from within the current contract or derived contracts.
   pure: This function does not read from or modify the state.
   returns (uint256): It returns a uint256 value.

 Function Body:
  solidity
  assert(b <= a);
  return a  b;
  
   assert(b <= a): This line ensures that b is less than or equal to a. If b is greater than a, the function will throw an exception, preventing underflow.
   return a  b: If the condition is satisfied, it returns the result of a  b.

### Contract PIGGY_BANK

The PIGGY_BANK contract uses the SafeMath library for safe arithmetic operations and manages user accounts.

 State Variables:
  solidity
  using SafeMath for uint;
  mapping (address => uint) public Accounts;
  
   using SafeMath for uint: This directive attaches the SafeMath library functions to the uint type, allowing safe arithmetic operations.
   mapping (address => uint) public Accounts: This mapping associates each address with a balance. The public keyword automatically generates a getter function for Accounts.

 Function Collect:
  solidity
  function Collect(uint _am) public payable {
      if(_am <= Accounts[msg.sender]) {
          if(msg.sender.call.value(_am)()) {
              Accounts[msg.sender] = Accounts[msg.sender].sub(_am);
          }
      }
  }
  
   Function Signature:
    solidity
    function Collect(uint _am) public payable
    
     public: This function can be called from outside the contract.
     payable: This function can receive Ether.

   Function Body:
    solidity
    if(_am <= Accounts[msg.sender]) {
        if(msg.sender.call.value(_am)()) {
            Accounts[msg.sender] = Accounts[msg.sender].sub(_am);
        }
    }
    
     if(_am <= Accounts[msg.sender]): This condition checks if the requested amount _am is less than or equal to the balance of the sender.
     if(msg.sender.call.value(_am)()): This line sends the requested amount _am to the sender using the call method, which is a lowlevel function that forwards all available gas. If the call is successful, it proceeds to the next line.
     Accounts[msg.sender] = Accounts[msg.sender].sub(_am): If the call is successful, it subtracts the requested amount _am from the sender's balance using the sub function from the SafeMath library to ensure safe subtraction.

### Summary

 The SafeMath library provides a safe subtraction function to prevent underflow.
 The PIGGY_BANK contract uses this library to manage user balances safely.
 The Collect function allows users to withdraw amounts from their accounts if they have sufficient balance, using a lowlevel call method to send Ether.

This code ensures that arithmetic operations are performed safely and that users can withdraw their balances without underflow issues.