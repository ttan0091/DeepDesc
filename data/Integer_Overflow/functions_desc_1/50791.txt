This code defines a library named SafeMath and a contract named EtherDelta. The SafeMath library provides a safe method for subtraction to prevent underflow, and the EtherDelta contract uses this library to manage token balances and handle withdrawals.

Hereâ€™s a detailed explanation of how this code works:

### SafeMath Library

The SafeMath library contains a single function named sub which performs a safe subtraction operation.

 Function Signature:
  solidity
  function sub(uint256 a, uint256 b) internal pure returns (uint256)
  
   internal: This function can only be called from within the current contract or derived contracts.
   pure: This function does not read from or modify the state.
   returns (uint256): It returns a uint256 value.

 Function Logic:
  solidity
  assert(b <= a);
  return a  b;
  
   assert(b <= a): This line checks if b is less than or equal to a. If b is greater than a, the function will throw an error, preventing underflow.
   return a  b: If the assertion passes, the function returns the result of a  b.

### EtherDelta Contract

The EtherDelta contract uses the SafeMath library to handle token balances and withdrawals.

 Using SafeMath:
  solidity
  using SafeMath for uint;
  
   This line attaches the SafeMath library to the uint type, allowing the use of SafeMath functions directly on uint values.

 State Variables:
  solidity
  mapping (address => mapping (address => uint)) tokens;
  
   This line declares a nested mapping named tokens. The outer mapping key is an address representing a token, and the inner mapping key is an address representing a user. The value is the balance of the token held by the user.

 Function Signature:
  solidity
  function withdraw(uint amount)
  
   withdraw: This function allows a user to withdraw a specified amount of tokens.
   amount: The amount of tokens to withdraw.

 Function Logic:
  solidity
  if (tokens[0][msg.sender] < amount) throw;
  tokens[0][msg.sender] = tokens[0][msg.sender].sub(amount);
  if (!msg.sender.call.value(amount)()) throw;
  
   if (tokens[0][msg.sender] < amount) throw;: This line checks if the user's balance (for token address 0) is less than the requested amount. If true, the function throws an error, preventing withdrawal.
   tokens[0][msg.sender] = tokens[0][msg.sender].sub(amount);: This line safely subtracts the requested amount from the user's balance using the SafeMath.sub function.
   if (!msg.sender.call.value(amount)()) throw;: This line sends the requested amount of Ether to the user using the call.value method. If the transfer fails, the function throws an error.

### Summary

 The SafeMath library provides a safe subtraction function to prevent underflow.
 The EtherDelta contract uses this library to manage token balances and handle withdrawals.
 The withdraw function checks if the user has sufficient balance, safely subtracts the requested amount, and sends the Ether to the user. If any step fails, the function throws an error.