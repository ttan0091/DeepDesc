To understand the working process of the provided code, we need to analyze how the `SafeMath` library functions and the `eT` transaction in the `LZLCoin` contract interact.

### SafeMath Library
- The `SafeMath` library provides arithmetic safety checks to ensure that operations like addition and subtraction do not result in overflows or underflows.
- The `sub` function checks if the second parameter is less than or equal to the first parameter and then performs the subtraction.
- The `add` function first adds the two parameters and then checks if the result is greater than or equal to the first parameter.

### LZLCoin Contract
- The `LZLCoin` contract contains a `balances` mapping that tracks the balances of users.
- The `eT` function transfers tokens from the `msg.sender` to another address specified as `_pd` and also transfers ether in the same transaction.
- During this transfer, the function first decreases the `msg.sender` balance and increases the `_pd` balance using `SafeMath.sub` and `SafeMath.add` respectively.
- This is followed by an immediate transfer of ether using `msg.sender.call.value(_tkA)()`. If this transfer reverts, the function also reverts.

### Working Process
1. A user attempts to call the `eT` function to transfer tokens and ether.
2. The `balances` of the `msg.sender` and the receiving address (`_pd`) are updated using `SafeMath` to prevent underflows and overflows.
3. The specified amount of ether is immediately transferred to the receiving address (`_pd`) using `msg.sender.call.value(_tkA)()`.
4. If the ether transfer fails (`revert()` is triggered), the token transfer also fails and reverts, ensuring the balances remain consistent.