Type of vulnerability: Denial of Service (DoS) through Block Gas Limit Abuse
Cause of vulnerability: The `TownCrier.withdraw` function iterates over the entire length of a very large array (2^64), each iteration costing a certain amount of gas. An attacker can fill these slots by making deposits and then updating or cancelling the requests, creating sparse entries. When the attacker withdraws, the function must iterate over all these sparse entries, causing it to run out of gas before clearing all positions.
Working process of the exploit: An attacker deposits ETH, then updates their request repeatedly to create sparse entries in the `requests` array. This causes the `TownCrier.withdraw` function to run out of gas due to iterations over sparse entries, effectively blocking access to the contract's ETH balance.