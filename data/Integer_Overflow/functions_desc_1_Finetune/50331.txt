Type of vulnerability: Denial of Service (DoS)
Cause of vulnerability: Lack of access controls and insufficient restrictions on loop iterations
Working process of the code: 
1. An attacker can set the contract reward (ETH) using the `setReward()` function.
2. The attacker can then call the `claimReward(uint256 submission)` function with a submission number greater than or equal to 10, causing the function to revert due to the `submission` check.
3. Because the `claimReward()` function uses a for loop iteration to transfer Ether to multiple recipient addresses, the fail during execution loop after the `submission` check adds that sender into `senders[submission]` which will make the function not able to be called anymore by the sender because it will always revert.
4. This results in effectively blacklisting the sender's address, preventing them from sending transactions to the contract in the future.