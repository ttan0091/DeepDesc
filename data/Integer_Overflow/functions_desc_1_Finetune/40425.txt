Type of vulnerability: Reentrancy Attack
Cause of vulnerability: Lack of the `nonReentrant` modifier or similar protection mechanism to prevent the `BankOwner_WithdrawDonations` function from being called multiple times during the same transaction, leading to reentrancy attacks.
Working process of the vulnerability: An attacker deposits a small amount of ETH (e.g., 0.00000001 ETH) into the contract and then takes multiple loans with large amounts. During the loan processing, the `BankOwner_WithdrawDonations` function is called each time a loan is taken or extended. Since the `BankOwner_WithdrawDonations` function does not include a reentrancy guard, the attacker's `receive()` fallback function is called back repeatedly, allowing the attacker to withdraw the bank's actual funds multiple times. This results in a loss of financial integrity for the bank, as the withdrawn funds exceed the bank's actual balance.