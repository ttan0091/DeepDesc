Type of the contract: ProgressiveIndividualCappedCrowdsale
Language: Solidity
Working Process: The contract enforces a progressively increasing ETH cap per address through a predefined time period. Each day, the ETH cap per address doubles, starting with zero on the first day and continually increasing until the last day before the general sale.

Detailed Explanation:
1. The contract includes a public constant variable `TIME_PERIOD_IN_SEC` set to 1 day.
2. The function `getCurrentEthCapPerAddress` calculates the current ETH cap per address based on the time passed since `startGeneralSale`.
3. The time since `startGeneralSale` is divided by `TIME_PERIOD_IN_SEC` to determine the current period.
4. The current period is multiplied by 2 to calculate the ETH cap per address for that period.
5. This approach ensures that the ETH cap per address doubles for each day since `startGeneralSale`, gradually increasing the cap over time.