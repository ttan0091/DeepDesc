Type of the system: Smart Contract
Name of the system: GameCell
Purpose of the system: To track and manage locked and unlocked balances for liquidity providers
Type of vulnerability: Logic Error / Lack of Ensured Consistency
Summary of the vulnerability: The `subAllocation` function does not always properly update the total locked and unlocked amounts, leading to inconsistencies when users interact with the contract during specific time intervals.
Cause of the vulnerability: The `subAllocation` function incorrectly increases the total unlocked amount in certain scenarios where it should be updating the total locked amount, and vice versa.
Working process of the code: 
1. A user creates a liquidity position, which causes an entry in the `allocations` mapping with a release time in the future and a locked balance.
2. Another user stakes GameCell and causes the `subAllocation` function to update the total locked amount.
3. To resolve the overflow of the `total_unlockamount`, a different user can call the `sumTokensInPeg` function to force an update, which increases the `total_unlockamount` without appropriately updating the `total_lockamount`.
4. This inconsistency allows users to transfer more tokens from locked than what was expected initially.