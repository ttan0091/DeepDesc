Type of contract: Energy Management
Use case: Tracks the energy accumulation of players for a game, with energy increasing over time and having a cap limit that needs to be manually claimed by the player.
Details of working process: 
1. The contract uses a mapping to store the `Energy` struct corresponding to each player's address. The `Energy` struct contains the timestamp of the last energy claim.
2. Players accumulate energy over time based on a configured `claimAmount` (60 * 20 in the provided example), which is updated by the game developers.
3. Players can claim their accumulated energy by calling the `getClaimableAmount` function, which calculates the total claimable energy based on the time elapsed since the last claim and the current `claimAmount`.
4. The calculated claimable amount is returned to the player, subject to the cap imposed by the `claimAmount`.
5. Players can then call the `claimEnergy` function to transfer the claimed energy to their address and update the `lastClaim` timestamp.