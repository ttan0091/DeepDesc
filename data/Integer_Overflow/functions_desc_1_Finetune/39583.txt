Type of contract: Time-Based Proof of Existence
        Language or Platform: Ethereum (Solidity)
        Purpose of the contract: To provide irrefutable proof that a certain document or string exists at a specific point in time by recording the hashed value of the document along with the block timestamp.
        Components of the contract:
        1. Data Structure: `mapping (string => uint) private proofs;`
        2. Function: `function storeProof(string memory sha256) public { proofs[sha256] = block.timestamp; }`
        How it works:
        - A user provides a document or string that needs proof of existence.
        - The document is hashed (e.g., SHA256) to create a unique identifier.
        - The hashed value is stored in the mapping along with the current block timestamp, marking the time of existence.
        - Subsequent calls to `storeProof` with the same hashed value will update the timestamp, ensuring the latest time of proof is recorded.
        - The existence of the document at a specific time can be proven by verifying the hashed value and checking the timestamp in the mapping against the block timestamp. If the timestamp is later, the document existed at that time.