Type of contract: On-chain Decentralized Exchange (DEX)
Dependency on Uniswap: Yes, the contract uses uniswapTokenAttributeHandler to retrieve token data
Purpose: To provide an Automated Market Maker (AMM) service for users to swap tokens and provide liquidity
Working Process: 
1. Initial Setup: Deploy the contract with initial liquidity provided, user's `liquidityForAddress` is updated with initial minting amount and they receive pooling shares
2. Swapping Tokens:
   - Check if the token balance and tokenSupply have changed since the last time the received parameters were updated
   - Update all users with the appropriate amounts of the additional tokens based on their current `liquidityForAddress` and remainingTokenSupply values.
   - Re-evaluate the token allocations for users by updating `liquidityForAddress` for each user, this ensures each user has a fair and accurate allocation, protecting against slippage as tokenSupply grows
3. Adding Liquidity: 
   - Check if the token balance and tokenSupply have changed since the last time the received parameters were updated
   - Distribute to all active users in proportion to the increase in `tokenSupply`, calculating the user's share as `amountÂ´ * (liquidityForAddress / totalActiveDispenserShares)`
   - Ensures that tokens are only sent when it is clear what share of the tokens should be assigned to the `EpochDividends::liquidityForAddress` mapping, to avoid potential frontrunning attacks.