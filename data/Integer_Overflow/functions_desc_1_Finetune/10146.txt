Type of contract: Token Sale Contract
Purpose: To manage the sale of KIO tokens and the distribution of KOI tokens as rewards
Primary functions:
1. Construction: Initializes the contract with the auction parameters, starting and ending times, and other necessary details.
2. `mintRewards`: Mints KOIs for auction participants based on the amount they paid in IKC when the auction ends.
3. `buyKIO`: Allows users to buy KIO during the auction by sending IKC. Mints KIO based on the sent IKC amount.
4. `isValidPurchase`: Checks if the current timestamp is after the auction start time.
5. `claimBackParticipation`: Allows for the claim of unused IKC back after the auction ends if the user has not won a stake of the koi token.
6. `withdrawAmy`: Allows for the withdrawal of all accrued amy (KOI in the auction) by participants and the contract operator to the AOI, starting after the launch deadline.
Important variables and their usage:
1. `auctionPurchaseData`: Contains tracked data of all auction participants for claiming part of the KOI token. Accessible by the contract owner.
2. `priorRegistrants`: Contains the number of addresses already registered for the auction. Used to check if a participant is the first.
3. `registered`: A boolean to check if a registered participant has committed some IKC.
4. `committedKYC`: The committed IKC amount by a registered user. Used for withdrawals.
5. `committedKIO`: The total KIO tokens committed by all valid registrants. Kept so computation of the marginal price of KIO for partiipats can be amortized.
6. `allowFirstRegistrations`: A boolean to allow more users to register after the auction has started.
7. `allowClaimBack`: A boolean to allow back allocation for IKC after the auction has ended.
8. `launchDeadline`: The time when the user is already able to withdraw the potential amy for his koi tokens.
9. `amyWait`: The amount of accrued amy.
10. `startingTimestamp`: The time when the auction starts.