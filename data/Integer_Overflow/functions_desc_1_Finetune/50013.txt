Type of vulnerability: Wrapper Reentrancy
Cause of vulnerability: Violation of the Checks-Effects-Interactions pattern by allowing interaction before checking the return value, enabling a malicious wrapper contract to reenter and front-run the execution of a transfer, potentially draining funds.
Explanation of the attack: A malicious or compromised wrapper contract can exploit the lack of proper checks on interaction results to create a reentrancy attack. When the wrapper calls `playerWithdrawPendingTransactions`, it sets the senders' balance in `playerPendingWithdrawals` to zero. However, using the `call` function without correctly checking the return value allows the wrapper to immediately reenter and execute its fallback function, transferring all funds held in the contract back to the wrapper.
Fix for the vulnerability: The contract design must be updated to adhere to the Checks-Effects-Interactions pattern. Specifically, the function `playerWithdrawPendingTransactions` should first record the pending withdrawal amount, then make the call to the sender's address using `call.value` and appropriately capture the return value, and only after that, based on the return value, clear or reset the pending withdrawal amount.