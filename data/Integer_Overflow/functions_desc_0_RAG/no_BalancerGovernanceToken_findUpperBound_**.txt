[Execution Flow]:
This code defines an internal view function named findUpperBound, which is designed to find the position of the first element in a sorted array that is greater than a given element. The function accepts two parameters: an array of unsigned integers (array) and an unsigned integer (element). Hereâ€™s a detailed explanation of how this function works:

The function signature includes the parameters array and element. findUpperBound is an internal view function, meaning it can only be called within the contract or its derived contracts and does not modify the state. The function accepts two parameters: array (a storage array of unsigned integers) and element (an unsigned integer). The function returns a uint256 variable representing the index of the first element in the array that is greater than element.

The function first checks if the array is empty. If it is, the function immediately returns 0, as there are no elements in the array.

If the array is not empty, the function initializes two variables: low and high. low is set to 0, representing the start of the array, and high is set to the length of the array, representing the end of the array.

The function then enters a while loop that continues as long as low is less than high. Inside the loop, the function calculates the middle index mid using the Math.average function, which performs integer division with truncation, ensuring that mid is always strictly less than high.

The function then compares the element at the mid index of the array with element. If array[mid] is greater than element, it means the upper bound must be in the lower half of the array, so high is updated to mid. Otherwise, the upper bound must be in the upper half of the array, so low is updated to mid + 1.

Once the loop exits, low represents the exclusive upper bound. The function then checks if low is greater than 0 and if the element at low  1 is equal to element. If so, it returns low  1 as the inclusive upper bound. Otherwise, it returns low.

