[Execution Flow]:
This code defines a private view function named _checkpointsLookup, which performs a binary search to find the earliest checkpoint taken after a given blockNumber. The function accepts two parameters: an array of checkpoints (ckpts) and a blockNumber. Hereâ€™s a detailed explanation of how this function works:

The function signature includes the parameters ckpts (an array of checkpoints) and blockNumber. _checkpointsLookup is a private view function, meaning it can only be called within the contract and does not modify the state. The function returns a uint256 value representing the number of votes from the found checkpoint.

The variable length stores the length of the ckpts array, which is used to control the search range. The function initializes two variables, low and high, to represent the current search range. Initially, low is set to 0 and high is set to length.

The function then checks if the length of the ckpts array is greater than 5. If so, it narrows down the search range by calculating a midpoint (mid) using the square root of the length. The function accesses the checkpoint at this midpoint using _unsafeAccess(ckpts, mid) and checks if its fromBlock is greater than blockNumber. If it is, high is set to mid; otherwise, low is set to mid + 1.

The function then enters a while loop that continues as long as low is less than high. Inside the loop, the function calculates a new midpoint (mid) using Math.average(low, high). It then accesses the checkpoint at this midpoint and checks if its fromBlock is greater than blockNumber. If it is, high is set to mid; otherwise, low is set to mid + 1.

Once the loop exits, the function checks if high is 0. If it is, the function returns 0, indicating that no suitable checkpoint was found. Otherwise, the function accesses the checkpoint at index high  1 using _unsafeAccess(ckpts, high  1) and returns its votes value.

