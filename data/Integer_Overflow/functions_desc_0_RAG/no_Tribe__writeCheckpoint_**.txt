[Execution Flow]:
This code defines an internal function named _writeCheckpoint, which updates the voting checkpoints for a given delegatee. The function accepts four parameters: delegatee (an address representing the delegatee), nCheckpoints (a uint32 representing the number of existing checkpoints), oldVotes (a uint96 representing the previous vote count), and newVotes (a uint96 representing the updated vote count). Hereâ€™s a detailed explanation of how this function works:

The function signature includes the parameters delegatee, nCheckpoints, oldVotes, and newVotes. _writeCheckpoint is an internal function, meaning it can only be called within the contract or its derived contracts. The function does not return any value.

The variable blockNumber is assigned the current block number, which is obtained using block.number. The safe32 function is called to ensure that the block number does not exceed 32 bits, and if it does, it throws an error with the message "Tribe: block number exceeds 32 bits".

The function then checks if there are existing checkpoints (nCheckpoints > 0) and if the block number of the last checkpoint (checkpoints[delegatee][nCheckpoints  1].fromBlock) matches the current block number (blockNumber). If both conditions are true, it updates the vote count of the last checkpoint to newVotes.

If the conditions are not met, it creates a new checkpoint by assigning a new Checkpoint struct to checkpoints[delegatee][nCheckpoints] with the current block number and newVotes. It also updates the number of checkpoints for the delegatee by incrementing numCheckpoints[delegatee] by 1.

Finally, the function emits an event DelegateVotesChanged with the parameters delegatee, oldVotes, and newVotes to notify listeners of the change in vote count.

