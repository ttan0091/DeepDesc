This code defines a private view function named _peek, which is used to retrieve the price of a specific token from a given source based on its type. The function takes two parameters: base, a 6byte string representing the base token, and kind, another 6byte string indicating the type of price to be fetched (either "rate" or "chi"). The function returns two values: price, which is the scaled price of the token, and updateTime, which is the timestamp of the block when the function was called.

Hereâ€™s a detailed explanation of how this function works:

1. Variable Declaration: The function starts by declaring a variable rawPrice of type uint256, which will store the raw price fetched from the source.

2. Source Address Retrieval: The function then retrieves the address of the source from a mapping sources using the base and kind parameters. The sources mapping is assumed to be defined elsewhere in the contract and maps pairs of base and kind to source addresses.

3. Source Validation: The function checks if the retrieved source address is not the zero address (address(0)). If it is, the function reverts with the message "Source not found", indicating that the specified source does not exist.

4. Price Retrieval Based on Kind:
    If the kind is "rate", the function calls the borrowIndex() function on the source address, which is assumed to be an instance of CTokenInterface. The borrowIndex() function returns the borrow index of the Compound protocol, which is used to calculate the interest rate.
    If the kind is "chi", the function calls the exchangeRateStored() function on the source address, which returns the stored exchange rate of the token.
    If the kind is neither "rate" nor "chi", the function reverts with the message "Unknown oracle type", indicating that the specified oracle type is not supported.

5. Price Validation: The function checks if the rawPrice is greater than zero. If it is not, the function reverts with the message "Compound price is zero", indicating that the retrieved price is invalid.

6. Price Scaling: The function scales the rawPrice by multiplying it with a constant SCALE_FACTOR. This scaling factor is assumed to be defined elsewhere in the contract and is used to adjust the precision of the price.

7. Update Time Retrieval: The function sets the updateTime to the current block timestamp using block.timestamp.

8. Return Values: Finally, the function returns the scaled price and the updateTime.

This function is designed to be used internally within the contract to fetch and scale prices from external sources based on the specified type, ensuring that the retrieved prices are valid and appropriately scaled for further use within the contract.