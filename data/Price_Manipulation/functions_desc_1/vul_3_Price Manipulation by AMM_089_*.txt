This code defines an internal view function named _computeUpdate, which calculates and returns two values: newAccRewardsPerShare and currentBalance. This function is designed to compute the new accumulated rewards per share and the current balance of JPEG tokens in the contract.

Hereâ€™s a detailed explanation of how this function works:

1. Initialization of currentBalance:
    The function starts by calculating the currentBalance of JPEG tokens. This is done by summing up two values:
      vault.balanceOfJPEG(): This function call retrieves the balance of JPEG tokens held by a specific vault.
      jpeg.balanceOf(address(this)): This function call retrieves the balance of JPEG tokens held directly by the contract itself.

2. Calculation of newRewards:
    The function then calculates the newRewards by subtracting previousBalance from currentBalance. This difference represents the increase in JPEG token balance since the last update.

3. Calculation of newAccRewardsPerShare:
    The function computes newAccRewardsPerShare by adding the existing accRewardPerShare to the result of the following calculation:
      newRewards  1e36 / totalStaked: This expression calculates the new rewards per share. The multiplication by 1e36 is used to maintain precision in the calculation, as Solidity does not support floatingpoint numbers. The division by totalStaked ensures that the rewards are distributed proportionally to all staked tokens.

4. Return Values:
    Finally, the function returns two values: newAccRewardsPerShare and currentBalance. These values are used elsewhere in the contract to update the state of the rewards distribution mechanism.

In summary, the _computeUpdate function is crucial for maintaining the accuracy of rewards distribution in a staking or similar contract. It ensures that the rewards per share are updated based on the current balance of JPEG tokens and the total amount of staked tokens.