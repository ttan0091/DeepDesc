Type of contract: IntegrationManager
Use case: Automating the scheduling, execution, and reporting of periodic rebalances and integrations with external protocols.
Key components and their roles:
 IntegrationManager: The core contract responsible for managing and executing multistage integrations and rebalances for Set Tokens.
 IIntegration: An interface that each integration adapter must implement, defining adapterspecific methods like getSpender() and getTradeCalldata() to interact with external protocols.
 GenericAdapter: An abstract contract serving as a template for creating new integration adapters, implement the IIntegration interface, and define abstract methods like getSpender() and getTradeCalldata().
 SetValuer: A module responsible for assisting in the valuation of SetToken assets.
 DataManager: A module that facilitates storing and retrieving various post trade data for reporting purposes.
Working process in detail:
1. The IntegrationManager receives a rebalance payload from a rebalance manager.
2. It calculates new token %s to meet target allocations.
3. For each exchange to be executed, it gets data from an adapter, creates a TradeInfo struct, and invokes the trade on the SetToken via a SetTokenResource.
4. TokenFlows from the trade are stored for subsequent integration.
5. Posttrade details (like receive quantities) are stored in a list for the DataManager to fetch and store.
6. The DataManager is invoked post reentrantly to commit the trade details and update the SetToken with new positions.