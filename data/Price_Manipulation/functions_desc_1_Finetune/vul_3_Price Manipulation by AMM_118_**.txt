Type of contract: Automated Market Maker (AMM)
Purpose of the contract: Enables swapping between different ERC20 tokens using WETH as an intermediary
Key functions and logic: 
1. _updateToken(tokenContract) to retrieve token price from Uniswap or Sushiswap.
2. _updateEthUsdOracle() to update ETH price from Chainlink Oracle.
3. _minWethAmountOut(uint256 tokenAmount_, address token_) performs calculations to determine the minimum amount of WETH to receive based on slippage tolerance and token price in ETH.
4. addLiquidity() to deposit funds into the pool and receive lp tokens.
5. removeLiquidity() to remove liquidity from the pool and receive tokens in return.
6. swapExactTokensForTokens() to swap tokens in the pool with specified slippage tolerance.
7. _getPriceInEth(address token_) to fetch the price of a token in ETH from Uniswap or Sushiswap.
Flow of user transactions: 
1. User deposits tokens into the pool.
2. When another user swaps tokens through the pool:
    a. A portion of the swapped tokens is added to the Uniswap or Sushiswap pool.
    b. The remaining tokens are returned to the user.
    c. Pool receives fees for facilitating the swap.
3. User can remove liquidity from the pool, receiving tokens based on the current pool rates.
4. User can get a loan against the deposited lp tokens.