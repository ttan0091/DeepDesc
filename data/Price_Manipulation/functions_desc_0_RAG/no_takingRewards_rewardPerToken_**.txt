[Execution Flow]:
This code defines a public view function named rewardPerToken, which calculates the reward per token based on the current state of the staking system. The function does not modify the state and can be called externally or internally without any gas cost. Hereâ€™s a detailed explanation of how this function works:

The function signature indicates that rewardPerToken is a public view function, meaning it can be called by any external or internal entity and does not modify the state of the contract. The function returns a uint256 value representing the reward per token.

The function first checks if the total supply of staked tokens (_staking_token_supply) is zero. If it is, the function immediately returns rewardPerTokenStored, which is a stored value representing the reward per token at the last update. This check ensures that if no tokens are staked, the reward per token remains at the last stored value.

If the total supply of staked tokens is not zero, the function calculates the current reward per token using a series of arithmetic operations. The calculation involves the following steps:
1. Time Difference Calculation: It calculates the difference between the lastTimeRewardApplicable() and lastUpdateTime. This difference represents the period since the last reward update.
2. Reward Rate Multiplication: It multiplies this time difference by rewardRate, which is the rate at which rewards are distributed over time.
3. Boost Multiplier Application: It multiplies the result by crBoostMultiplier(), which is a multiplier applied based on the current conditions or user stakes.
4. Precision Adjustment: It multiplies the result by 1e18 to adjust for precision and then divides by PRICE_PRECISION, which is a constant used to maintain precision in the calculations.
5. Supply Adjustment: Finally, it divides the result by _staking_token_boosted_supply, which is the total supply of staked tokens adjusted by any boosting mechanisms.

The result of these calculations is added to rewardPerTokenStored to get the current reward per token. This value is then returned by the function.

