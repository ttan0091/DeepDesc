Type of vulnerability: Denial of Service (DoS) due to Contract Lockup
Cause of vulnerability: Logic of bulkDeposit() and finishMinting() allows AUC and tokens to be locked up in the contract without the possibility of being transferred to the owner.
Working process of the code:
1. Contract is initialized with AUC and tokens balance.
2. token.harvest() triggers PUMP() and DUMP() functions to manage AUC balance based on price.
3. Owner calls bulkDeposit() to convert remaining AUC balance to ETH and transfers ETH to yteam.
4. earned() function of Strategy token can be called to convert earned AUC to ETH and add to vault's balance.
5. finishMinting() and finishMintingERC20() are called to finalize contract settings, which freezes the contract and prevents any use of deposit() or bulkDeposit() functions.
6. onlyHarvester() modifier on withdraw() and emergencyWithdraw() functions prevents their use.
7. Owner cannot call withdraw() or emergencyWithdraw() due to onlyHarvester(), and new yteam address is not set, so no one can call bulkDeposit() or withdraw().
8. AUC and tokens are permanently locked in the contract, preventing them from being withdrawn or used.