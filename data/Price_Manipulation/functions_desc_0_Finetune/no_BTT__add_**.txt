Type of vulnerability: Storage Inefficiency
Cause of vulnerability: Redundant storage and lack of dynamicness in Set struct
Explanation of vulnerability: The Set struct uses both an array (_values) and a map (_indexes) to store unique values. However, the array does not shrink when values are removed, leading to wasted storage. Additionally, the struct does not have a configurable type, causing unnecessary storage usage for smaller value types like uint8.
Extent of vulnerability: The vulnerability affects all usage of the Set struct and can lead to significantly higher storage costs, especially in scenarios with frequent value removals.
Proposed solution: Modify the Set struct to use a dynamic array (ArrayLib library) for storage, which can resize as values are added or removed. This will significantly reduce storage costs and eliminate the need for expensive protocol upgrades.