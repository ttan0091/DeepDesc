Type of the software: React FrontEnd with Web3 Integration

Working process: The repository contains the frontend application that connects to a Ethereum blockchain through a Web3 provider (e.g., MetaMask) and interacts with smart contracts deployed on the blockchain. The React components provide a user interface for creating a set, adding and removing values from the set, and manipulating the set through various mathematical operations. The app sends transactions to the smart contract using Web3 calls to update the set state on the blockchain.

Technical overview: The Frontend app is built using React and Web3.js. It utilizes hooks like useState, useEffect, and useContext to manage state and interact with the Ethereum blockchain. The Web3 provider (MetaMask) is used for connecting to the blockchain, and a contract instance is created to call functions on the SetMathematicsLibrary contract deployed on the blockchain. Transactions are sent with the current account using the injected provider from MetaMask. The app listens for events emitted by the contract to update the UI when the blockchain state changes.

Authorization and access control: The users are identified and authorized through their MetaMask wallet. Each user can only interact with the smart contract functions if they have permission (by being the owner or having sufficient authorization according to the access control rules). Ownership management is done through the contract's constructor and functions that restrict access based on the current Ethereum account.

Data persistence and immutability: The state of the set and its operations are stored on the Ethereum blockchain, providing immutable and transparent recordkeeping. Once a set is created, its state cannot be changed or deleted, ensuring that all operations on the set are traceable and verifiable. The operations like addition, subtraction, union, intersection, etc., are all recorded on the blockchain and can be queried for audit and validation.