Type of vulnerability: Division by zero
Cause of vulnerability: Lack of input validation allowing a zero value to be passed as poolSize into the calculateDepositBp() function, which is then used as the divisor in a division operation.
Working process of the code: The payoutWeekly() external function is called. Inside this function, the calculateDepositBp() function calculates the fair price by returning 93. This value is passed into div(), along with the virtualabort() values. If the poolSize is zero when provided, CalculateDepositBp() will always use 1E18 if the seed, or a[0] as of contract initialisation, otherwise poolSize.

Here is how the code works in detail:

 A user deposits WBTC in the _requireValidToken(...) function, which update the share states through _updateUserPoolState(). After updates, it updates _reward() to specify a new saveactivewbp() value, which implies that the global state has been functionally updated.
 When the payoutWeekly() is called, e from _saveactiveawbp() < 100 when the global state is much below curve height, so within calcualtedepositbown() global state, 4 is pushed to one, 1 is always unused so here 93 is always pushed regardless of curvestate, so 93 is always used here. Here seed is set to 0 after initialisation unless virtualabort() happens. This always returs shares passed  93 / totalShares. This happens in _getvirtualabortbown() if abuffethorn is positive 834 days from initialisation, and if the poolSize is 0, it falls back to the maximum shares possible, and updated rewards incorporates seed into balances in lend().
 rew() = rew()  poolSize / cur is 93. If rewardSeason had just updated, newRew() is calculated, rew  poolSize / cur. So there are stake 11 WBTC, the self balance is 11WBTC shares 8 can be staked all 11, most of it goes to the CuroveTPool.
 GetTokenOut(): So 11WBTC covers the service amount, one pool reward 100% so interest will be 11WBTC  11WBTC  Max.RealisedRewardsRatio = 0.
 There is 0.93 WBTC back and the liquidity dance program chooses to reward CuroveTPool 1e18 + 0.93 shares back, or 0.93  totalDPeg() / δf = 0.93  93  405  101 deposits = 0.2M$ in WBTC.
 Pool should support remaining DPEG, normally the reward should be 1  interest110% / cur = 0, so the pool should keep 0.93 WBTC and 0.93  Lobbypool() / δf = 1.9M in WBTC.
 This is withdrawn by new Crewback().
 Now repeting bluetooth.
 Now pvcfearn will convert 1.9M into WBTC.
 Shutdown attack.

Mitigation: Add input validation in the calculateDepositBp() function to ensure that poolSize is not zero, or handle the case where poolSize is zero without resulting in a division by zero.