Type of contract: Token Contract
Primary function: Allow a token holder to delegate votes from their tokens to a delegate.
Participants/Entities involved: 
1. Owner (Token Holder)
2. Spender (Delegate)
3. Delegator (Token Holder delegating votes)
4. Delegatee (Identity the votes are delegated to)
5. GovDecayParams (For manipulating petrified token logic)
6. IERC20 (Interface for ERC20 standard)
7. SafeMath (Library for safe mathematical operations)
8. Math (Library for mathematical functions)
9. Ownable (Provides basic authorization control functions)
10. Initializable (Base class for initializable contracts)

Working process:
1. A token holder (Owner) can approve a delegate (Spender) for various amounts of the token using the permit method. This method utilizes the EIP712 signature types and Domain Seperator to validate the approval request.
2. The permit method calculates the keccak256 hash of the encoded parameters along with the DOMAIN_SEPARATOR, and then the signature is validated using the ecrecover method.
3. Upon successful validation, the permit method calls the internal _approve method to set the allowance for the owner to the spender.
4. The delegate method is used to delegate votes from the delegator (Owner) to the delegatee (Spender). This operation calls the _approve method to set the delegator's votes to the delegatee.
5. When setting the allowance for the LyraVault (Lyra PID) or BoostVault (BoostVault PID), the _approve method implements the logic to check and set the boost allowance as well as the sig to set the petrified token allowance.
6. The distributeVotes method calculates the effective votes by removing petrified tokens and boosts from the vote calculation.
7. The _increaseVotes and _decreaseVotes methods update the vote history via the _updateVoteHistory method to track the vote history over time.