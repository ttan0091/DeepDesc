Type of vulnerability: Reentrancy
Cause of vulnerability: Storage modifications in beforeDAIModifiers() and beforeUSDCModifiers() that allow state changes to be executed again in beforeProtocolSwapDAI().
Working of the exploit: The exploit works by initating a swap which transfers DAI, TCAP and 3PoolShares (3Crv) to the attacker prior to the refToken modifiers. The beforeDAIModifiers() hook then allows the attacker to reexecute the changes by exchanging DAI for targeted token projects, causing a loss of these tokens.
Protection mechanism: The base token modification functions include a doublespend check to prevent reentry, but it is bypassed through the UsdcAggregator by swapping DAI for the same value of USDC.
Fixing the vulnerability: The vulnerability can be fixed by ensuring that the destroyThisContract_ function returns false during the actions that could be reexecuted to prevent them from being called again.