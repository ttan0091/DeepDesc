Type of vulnerability: Reentrancy
Cause of vulnerability: Misunderstanding of function purpose and scope, leading to a mistaken assumption that it can be called without restrictions.
Working of the code: The increaseAllowance function is designed to increase the amount able to be spent by an approved spender. However, the contract owner incorrectly believed that this function could be called under any conditions. This led to the unintended consequence of allowing the spender to execute its function before the spend limit was increased, thus bypassing the intended checks and allowing reentrancy.
Impact of the vulnerability: The vulnerability allowed the approved spender (Carve C) to reenter and execute its function (stake) before the increaseAllowance was completed, thus successfully staking additional tokens (251.16M TCCS) without further spend limit checks.
Patch for the vulnerability: Upon identification, the contract owner audited all approved spenders for similar issues and revoked all allowances which could exploit this vulnerability. The owner then added unit tests and implemented a validation function to explicitly mark borrowers who need to validate rewards (thus codifying the existing black listing based on a history of payment issues).