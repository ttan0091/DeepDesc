Type of transaction: Native Meta Transaction
Purpose of the transaction: Submit transaction on behalf of users
Conceptual overview: A user signs a transaction using their private key. The signed transaction, along with the user's address, is submitted to the RelayController. The RelayController and MetaTransactionHandler work together to validate the user's signature and execute the transaction on behalf of the user, crediting the peg balance of the RelayController.
Execution steps: 
1. The user signs a transaction using their private key.
2. The signed transaction details, including the user's address and the user's signature, are submitted to the RelayController via a standard admin transaction (not shown).
3. The RelayController verifies that the submission comes from a trusted admin by using the adminInProgress variable.
4. The signed transaction is deserialized and sent to the MetaTransactionHandler.
5. The MetaTransactionHandler processes the signature using the verify function.
6. The verify function calls toTypedMessageHash and hashMetaTransaction to construct the hash of the transaction.
7. Using the hash, the function ecrecover recovers the public key of the signer.
8. The verify function checks if the recovered address matches the expected signer.
9. If the validation is successful, the executeMetaTransaction() function is called to execute the actual transaction.
10. The executeMetaTransaction() function ensures the nonce is correct, updates the Relay threshold if needed, and calls the sumTokensInPeg() function to calculate the peg balance.
11. The transferDispatchTokenToListedIndex() function is called to perform the actual transfer of the transaction amount.
12. The RLY.safeTransferFrom() method is used to transfer the funds to the RelayController contract.