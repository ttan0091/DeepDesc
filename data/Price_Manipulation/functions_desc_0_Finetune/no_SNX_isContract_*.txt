Type of the script: Assembly in Solidity

Purpose of the script: To check if a particular address is a contract or a normal account, by verifying if the extcodehash of the address is not equal to 0x0 and not equal to a predefined accountHash.

Explanation of the functions used:
1. isContract(address account) internal view returns (bool): This function checks if the given account corresponds to a contract or not.
2. sumTokensInPeg(...): internal returns (uint256 totalPeg): This function calculates the total liquidity value of all tokens in the Pool together in PEG.
3. getLiquidityInPeg(liquidityIndexToUpdate, sjcxReservesToUpdate): public returns (uint256): This function takes the most recent liquidity index and the most recent SJ (tokens) reserve and calculates how many PEG would the Pool get after burning all its tokens.
4. updateExchange(
    ExchangeV1.Typedefs.ExchangeBalances calldata exchangeBalances
  ): public returns (bool): This function updated the exchange. It is mainly used to update eExchange with a new eQuantity.
5. handlePeg(
    Peg.Typedefs.ExchangeBalances calldata _exchangesBalances,
    Handler.Typedefs.LiquidityInformation calldata _liquidityInformation
    )
    public
    returns (Peg.Typedefs.ExchangeBalances memory)
  : This function handles PEG. It first calculates the PEG share of liquidity of the ePool supply. By burning those ePeg (tokens) in the LP incentive pool, ePool owners will receive a portion of their PEG back. That PEG can be burned to flesh out even more PEG for LP owners.