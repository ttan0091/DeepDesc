Type of Contract: TokenBridge
Application: Crosschain bridge for tokens
Working Process: 
1. User locks tokens on CharityChain contract by calling approveAndCall with the exact token amount to be locked.
2. The approveAndCall function sets the balances[recipient].sumTokensInPegSync() to the current sumTokensInPeg().
3. In the sumTokensInPeg(), the user's balancePeggedBasket() is calculated based on the sumTokensInPegSync().
4. When a user calls requestTokenExchange(), it reduces their balances[msg.sender] and tokensIssuedTotal.
5. The USDC is exchanged to WUSDC in A.StLim how long to call ‘WERC20Bridge_USDC.childTokenToMatic()’ to Mint WUSDC and lock it on Matic.
6. On child chain (Matic), WUSDC is burned and queried to main layer. WUSDCChild.deposit():
      Prepare the message and recipient parameters.
      Immediatly transfer amount minus charityChain.balancerBridgeFee() to main layer address.

The process ensures that both chains—CharityChain and Matic—are in sync with the user's token balances, reducing race conditions, and ensuring a trustless bridge.