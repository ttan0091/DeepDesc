This code defines a private view function named _peek, which is used to retrieve the price of a specific token based on its base and kind, and also returns the time of the last update for this price. The function is designed to interact with a decentralized finance (DeFi) protocol known as Compound, which is a lending and borrowing platform.

Hereâ€™s a detailed explanation of how this function works:

1. Function Signature and Parameters:
    The function _peek takes two parameters: base (a 6byte identifier for the base currency) and kind (a 6byte identifier for the type of price to fetch, such as "rate" or "chi").
    The function is marked as private and view, meaning it can only be called internally within the contract and does not modify the state of the blockchain.

2. Variable Initialization:
    uint256 rawPrice; initializes a variable to store the raw price fetched from the Compound protocol.
    address source = sources[base][kind]; retrieves the address of the data source from a mapping sources that maps base currencies and kinds to their respective data source addresses.

3. Source Validation:
    require(source != address(0), "Source not found"); checks if the source address is not zero, ensuring that a valid data source exists for the given base and kind. If not, the function reverts with an error message "Source not found".

4. Price Retrieval Based on Kind:
    The function uses an ifelse statement to determine how to fetch the price based on the kind parameter:
      If kind is "rate", it calls borrowIndex() on the CTokenInterface at the source address to get the borrowing index, which is a measure of the interest rate over time.
      If kind is "chi", it calls exchangeRateStored() to get the exchange rate of the token.
      If kind is neither "rate" nor "chi", the function reverts with an error message "Unknown oracle type".

5. Price Validation:
    require(rawPrice > 0, "Compound price is zero"); ensures that the fetched price is greater than zero. If the price is zero, the function reverts with an error message "Compound price is zero".

6. Price Scaling and Update Time:
    price = rawPrice  SCALE_FACTOR; scales the raw price by a predefined scaling factor to adjust for precision or unit differences.
    updateTime = block.timestamp; sets the update time to the current block timestamp, indicating when the price was last updated.

7. Return Values:
    The function returns two values: price (the scaled price of the token) and updateTime (the timestamp of the last update).

This function is crucial for smart contracts that need to interact with or rely on price data from the Compound protocol, ensuring that the data is accurate and uptodate.