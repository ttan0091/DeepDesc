This code defines a private view function named getRedemptionAmounts, which calculates various amounts related to the redemption of tokens based on principal and yield amounts, as well as the current interest rate. The function is designed to determine how many yield tokens and backing tokens are redeemable, along with any redemption fees, and the effective interest rate.

Hereâ€™s a detailed explanation of how this function works:

1. Function Parameters and Return Values:
    principalAmount: The amount of principal tokens to be redeemed.
    yieldAmount: The amount of yield tokens to be redeemed.
    currentRate: The current exchange rate or interest rate.
    The function returns four values:
      redeemableYieldTokens: The number of yield tokens that can be redeemed.
      redeemableBackingTokens: The number of backing tokens that can be redeemed.
      redeemFeeAmount: The amount of redemption fees.
      interestRate: The effective interest rate.

2. Calculating the Effective Interest Rate:
    The function starts by calculating the effective interest rate using the effectiveRate function, which takes currentRate as an argument.

3. Determining Redeemable Backing Tokens:
    If the interestRate is less than the initialInterestRate, the redeemable backing tokens are calculated by scaling the principalAmount based on the ratio of interestRate to initialInterestRate.
    If the interestRate is greater than or equal to the initialInterestRate, the function calculates the difference between interestRate and initialInterestRate (rateDiff). This difference is then converted to a percentage (yieldPercent) using a fixedpoint division with exchangeRateONE.
    The redeemable backing tokens are then calculated by adding the principalAmount to the product of yieldAmount and yieldPercent.

4. Handling Maturity and Additional Yield:
    If the system has matured (matured is true) and the currentRate is greater than the interestRate, the function calculates an additional yield rate (additionalYieldRate) and the corresponding fee amount (feeBackingAmount). This fee amount is then converted to yield tokens (redeemFeeAmount).

5. Calculating Redeemable Yield Tokens:
    The redeemable yield tokens are calculated by converting the redeemable backing tokens to yield tokens using the numYieldTokensPerAsset function.

6. Calculating Redemption Fees:
    The function determines the redemption fee percentage based on whether the redemption is early or mature, using feesConfig.earlyRedeemPercent or feesConfig.matureRedeemPercent.
    If the redemption fee percentage is not zero, the function calculates the regular redemption fee (regularRedeemFee) and adjusts the redeemable yield tokens and redeemable backing tokens accordingly.

7. Return Values:
    The function returns the calculated values for redeemableYieldTokens, redeemableBackingTokens, redeemFeeAmount, and interestRate.

This function is crucial for managing the redemption process, ensuring that the correct amounts of tokens are redeemed and that appropriate fees are calculated and applied. The use of fixedpoint arithmetic (divfV and mulfV) ensures precision in calculations, which is particularly important when dealing with token amounts and rates.