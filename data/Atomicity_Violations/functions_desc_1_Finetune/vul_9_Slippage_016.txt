Type of contract: Automated Market Maker (AMM) and Decentralized Exchange (DEX) Implementation
Purpose of the contract: To provide a platform for trading and swapping tokens, adding and removing liquidity, and managing pools in an automated and decentralized manner.
Core functions of the contract:
1. MarketMaking interface: Includes functions for adding and removing liquidity, swapping tokens, and pools management.
2. Public vRewardsPool: Functions to stake and unstake the LP tokens, view vested rewards, and claim vested rewards.
3. VaderPool: Implements the core AMM logic including price calculations, invariant handling, and minting/burning of LP tokens.
4. VaderRouter: Manages routing, including adding and removing liquidity, swaps, and pool creation.
5. VaderPoolLibrary: Contains utility functions for interacting with pools, such as adding liquidity, removing liquidity, and viewing balances.
6. MultiVader: Acts as a primary contract for managing multiple vader routers and pools simultaneously.
Key components and their roles:
 VaderFactory: Responsible for pool and router creation.
 IVaderRouter: The routing interface to validate router interactions.
 VaderMultipool: An extension of MultiVader that specifies a reward token to handle more complex reward systems.
 VaderRouter: The primary router responsible for managing the liquidity of pools through interactions with VaderPool.
 Vader: The base Vader contract with foundational logic for price calculations and adding/removing liquidity.
Protocols or standards used: ERC20, ERC721, Extensions for bulking transfer, and various Utility libraries
Programming languages: Solidity (0.7.6)
Additional context: The contract is designed to function within the Vader ecosystem, which includes multiple routers (VaderRouter), pools (VaderPool), and reward systems (VaderMultiPool).