Type of contract: Factory contract, which manages and deploys Vader pools
Purpose of the contract: To provide methods for swapping tokens based on their reserves in a 50/50 liquidity pool
Key functions of the contract: 
1. calculateInGivenOut: Calculates the amount of token A needed to receive a specific amount of token B in a swap.
2. calculateOutGivenIn: Calculates the amount of token B that will be received for a specific amount of token A in a swap.
3. calculateSwapReverse: Implements the pricing function for a pool, returning the exact output amount for an input amount.

Explanation of the working process: 
 The factory has information about pools between each token pair available via the getPool() method.
 The calculateInGivenOut function first checks if the path length is 2 (direct swap) or greater (multihop swap).
 For a direct swap, it calculates the amount of token A needed for the given output of token B using VaderMath.calculateSwapReverse.
 For a multihop swap, it fetches reserves from two pools and calculates the equivalent amount using two levels of calculateSwapReverse.