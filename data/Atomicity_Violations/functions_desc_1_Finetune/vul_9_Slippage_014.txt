Type of contract: AMM 
Main components: Pricing pool (Oracle), Multiple assets (tokenA, tokenB), Users interacting via the router contract
Key functions: addLiquidity()
Working process: A user calls addLiquidity() through the router, specifying tokens (A or B based on being nativeAsset or not), desired amounts, and timing constraints. The router then determines the pool supported tokens, the foreign deposit (blocktime), and the minted liquidity tokens, which are transferred to the user and LP respectively.