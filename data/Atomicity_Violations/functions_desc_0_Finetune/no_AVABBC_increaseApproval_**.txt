Type of vulnerability: ERC20 standard deviation from specification
Cause of vulnerability: Missing reverts in address approval functions
Explanation of vulnerability and how it can be exploited: The vulnerability arises from the ERC20 standard's design, which prevents setting the approval of an address back to zero using increaseApproval and decreaseApproval. This can lead to unintended token transfers or approvals when the allowance value is increased.
Additionally, an attacker can exploit this to lock up funds by approving a nonERC20 address for a large amount, as these functions do not follow the recommended approve/transferFrom pattern.
Solution to fix the vulnerability: The approval functions (approve, increaseApproval, decreaseApproval) should be standard compliance, ensuring the contract works as expected according to the ERC20 specification. It is crucial to ensure that setting the allowance to zero (approve(_spender, 0)) also triggers the Transfer event as per the ERC20 standard.