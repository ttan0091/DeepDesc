Type of contract: ERC20 Payment Contract
Type of user: service/product provider
Objective: enable service/product providers to convert received tokens to a common peg for liquidity management

Roles:
1. Service/Product Provider: deploys the ERC20 Payment Contract, receives payment in tokens, and redeems the tokens for $ECOP credits.

Functionality: 
1. Conversion to Peg: 
     sumTokensInPeg(): calculates the total value of different tokens received, converting them to a common peg value based on Chainlink Oracle prices.
     redeemToPeg(): allows the service provider to redeem received tokens for $ECOP credits, ensuring the peg balance is maintained in the contract.
     setRedeemPegValue(): sets the peg value for each $ECOP credit when redeeming received tokens.

Operation:
1. Deploy Contract: 
     Service Provider (SP) deploys the ERC20 Payment Contract with $ECOP as the peg token.
     SP sets the conversion ratio for received tokens to $ECOP credits using Chainlink Oracle prices.

2. Receive Token Payment: 
     SP provides its users with a single deposit address for all payments.
     Users can send various tokens, which are credited to the SP's ERC20 Payment Contract address.

3. Redeem Tokens:
     When SP wants to liquidate the received tokens, they call redeemToPeg() to convert specific amounts of each token to the peg token ($ECOP).
     The conversion is based on Chainlink Oracle prices.
     The redeemed tokens are locked in the contract, and $ECOP credits are added to the SP's balance.

4. Withdraw Peg Balance:
     If the converted $ECOP credits exceed a certain minimum, SP can withdraw the $ECOP balance to their own address for further use or conversion.

Possible Risk: 
1. Flash Loan Attacks: users could manipulate token prices or amplification rules to deplete the peg balance.
2. Extreme Market Volatility: large price fluctuations in tokens could result in peg imbalance if SP fails to redeem funds in time.