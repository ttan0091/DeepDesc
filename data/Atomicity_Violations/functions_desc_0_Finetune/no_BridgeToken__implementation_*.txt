Type of contract: Upgradable Proxy Contract
Primary function: Maintaining the address of the current implementation contract via a Beacon mechanism
Working process: 
1. The OpenZeppelin TransparentProxy inherits from UpgradeableBeacon, which in turn inherits from BeaconProxy, ensuring that the proxy is upgradeable.
2. When the proxy is deployed, it is set to use a Beacon implementation via the _setBeacon() function, which contains the address of the implementation.
3. The Beacon is responsible for determining the current implementation by calling the implementation() method on a Beacon implementation contract (e.g., BeaconSimpleProxyImplementation).
4. The implementation() method checks the storage slot SLOT_BEACON_SLOT to determine the address of the current implementation and returns it.
5. This approach allows the implementation to be upgraded without changing the Beacon itself, only updating the storage slot value to point to the new implementation.