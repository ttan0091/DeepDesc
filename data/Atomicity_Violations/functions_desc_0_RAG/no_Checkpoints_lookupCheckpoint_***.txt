[Execution Flow]:
This code defines an internal view function named lookupCheckpoint, which performs a binary search to find the earliest checkpoint taken after a given blockNumber. The function accepts two parameters: an array of checkpoints (ckpts) and a blockNumber. The function returns a uint96 value representing the value of the checkpoint found. Hereâ€™s a detailed explanation of how this function works:

The function signature includes the parameters ckpts (an array of checkpoint values) and blockNumber (a uint256 representing the block number). lookupCheckpoint is an internal view function, meaning it can only be called within the contract or its derived contracts and does not modify the state. The function returns a uint96 value.

The function starts by checking if the provided blockNumber is less than the current block number using require(blockNumber < block.number, "Block not yet determined");. This ensures that the block number provided is already determined and the search can proceed.

The variables high and low are initialized to the length of the ckpts array and 0, respectively. These variables define the range within which the binary search will be performed. The binary search loop continues as long as low is less than high.

Inside the loop, the middle index mid is calculated using Math.average(low, high). This function computes the average of low and high. The block number corresponding to the checkpoint at mid is then retrieved using decodeBlockNumber(ckpts[mid]).

The function then compares the midBlock with the blockNumber:
 If midBlock is greater than blockNumber, it means the desired checkpoint is before mid, so high is set to mid.
 If midBlock is less than or equal to blockNumber, it means the desired checkpoint is after mid, so low is set to mid + 1.

This process continues until low is no longer less than high, indicating that the correct checkpoint has been found.

Finally, the function returns the value of the checkpoint at high  1 if high is not 0. If high is 0, it means the search went too far in the past, and the function returns 0.

