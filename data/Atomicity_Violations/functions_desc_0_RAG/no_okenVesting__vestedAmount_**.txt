[Execution Flow]:
This code defines a private view function named _vestedAmount, which calculates the amount of tokens that have vested up to the current time. The function does not modify the state and is intended to be used internally within the contract. Hereâ€™s a detailed explanation of how this function works:

The function signature indicates that _vestedAmount is a private view function, meaning it can only be called within the contract itself and does not modify the state. The function returns a uint256 value representing the vested amount of tokens.

The function starts by obtaining the current balance of the FXS token held by the contract using FXS.balanceOf(address(this)) and stores this value in the variable currentBalance. It then calculates the total balance of tokens that have been vested or released by adding _released to currentBalance, storing the result in totalBalance.

The function then checks the current timestamp (block.timestamp) against the vesting schedule defined by _cliff, _start, and _duration, and whether the vesting has been revoked (_revoked).

1. If the current timestamp is before the cliff period (_cliff), the function returns 0, indicating that no tokens have vested yet.
2. If the current timestamp is after the end of the vesting period (_start.add(_duration)) or if the vesting has been revoked (_revoked), the function returns the total balance of tokens, indicating that all tokens have vested.
3. If neither of the above conditions is met, the function calculates the vested amount by multiplying the total balance by the ratio of the time elapsed since the start of the vesting period to the total duration of the vesting period. This is done using the formula totalBalance.mul(block.timestamp.sub(_start)).div(_duration).

